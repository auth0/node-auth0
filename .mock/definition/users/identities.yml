imports:
  root: ../__package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    link:
      path: /users/{id}/identities
      method: POST
      auth: true
      docs: >-
        Link two user accounts together forming a primary and secondary
        relationship. On successful linking, the endpoint returns the new array
        of the primary account identities.


        Note: There are two ways of invoking the endpoint:


        <ul>
          <li>With the authenticated primary account's JWT in the Authorization header, which has the <code>update:current_user_identities</code> scope:
            <pre>
              POST /api/v2/users/PRIMARY_ACCOUNT_USER_ID/identities
              Authorization: "Bearer PRIMARY_ACCOUNT_JWT"
              {
                "link_with": "SECONDARY_ACCOUNT_JWT"
              }
            </pre>
            In this case, only the <code>link_with</code> param is required in the body, which also contains the JWT obtained upon the secondary account's authentication.
          </li>
          <li>With a token generated by the API V2 containing the <code>update:users</code> scope:
            <pre>
            POST /api/v2/users/PRIMARY_ACCOUNT_USER_ID/identities
            Authorization: "Bearer YOUR_API_V2_TOKEN"
            {
              "provider": "SECONDARY_ACCOUNT_PROVIDER",
              "connection_id": "SECONDARY_ACCOUNT_CONNECTION_ID(OPTIONAL)",
              "user_id": "SECONDARY_ACCOUNT_USER_ID"
            }
            </pre>
            In this case you need to send <code>provider</code> and <code>user_id</code> in the body. Optionally you can also send the <code>connection_id</code> param which is suitable for identifying a particular database connection for the 'auth0' provider.
          </li>
        </ul>
      source:
        openapi: ../api.json
      path-parameters:
        id:
          type: string
          docs: ID of the primary user account to link a second user account to.
      display-name: Link a User Account
      request:
        name: LinkUserIdentityRequestContent
        body:
          properties:
            provider: optional<root.UserIdentityProviderEnum>
            connection_id:
              type: optional<string>
              docs: >-
                connection_id of the secondary user account being linked when
                more than one `auth0` database provider exists.
            user_id: optional<root.UserIdEnum>
            link_with:
              type: optional<string>
              docs: >-
                JWT for the secondary account being linked. If sending this
                parameter, `provider`, `user_id`, and `connection_id` must not
                be sent.
              default: '{SECONDARY_ACCOUNT_JWT}'
        content-type: application/json
      response:
        docs: Identity successfully added.
        type: list<root.UserIdentity>
        status-code: 201
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.ConflictError
        - root.TooManyRequestsError
      examples:
        - path-parameters:
            id: id
          request: {}
          response:
            body:
              - connection: connection
                user_id: user_id
                provider: provider
                profileData:
                  email: email
                  email_verified: true
                  name: name
                  username: username
                  given_name: given_name
                  phone_number: phone_number
                  phone_verified: true
                  family_name: family_name
                isSocial: true
                access_token: access_token
                access_token_secret: access_token_secret
                refresh_token: refresh_token
    delete:
      path: /users/{id}/identities/{provider}/{user_id}
      method: DELETE
      auth: true
      docs: >
        Unlink a specific secondary account from a target user. This action
        requires the ID of both the target user and the secondary account. 


        Unlinking the secondary account removes it from the identities array of
        the target user and creates a new standalone profile for the secondary
        account. To learn more, review <a
        href="https://auth0.com/docs/manage-users/user-accounts/user-account-linking/unlink-user-accounts">Unlink
        User Accounts</a>.
      source:
        openapi: ../api.json
      path-parameters:
        id:
          type: string
          docs: ID of the primary user account.
        provider:
          type: root.UserIdentityProviderEnum
          docs: >-
            Identity provider name of the secondary linked account (e.g.
            `google-oauth2`).
        user_id:
          type: string
          docs: >-
            ID of the secondary linked account (e.g. `123456789081523216417`
            part after the `|` in `google-oauth2|123456789081523216417`).
      display-name: Unlink a User Identity
      response:
        docs: User identity successfully unlinked.
        type: root.DeleteUserIdentityResponseContent
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
      examples:
        - path-parameters:
            id: id
            provider: ad
            user_id: user_id
          response:
            body:
              - connection: connection
                user_id: user_id
                provider: provider
                isSocial: true
                access_token: access_token
                access_token_secret: access_token_secret
                refresh_token: refresh_token
                profileData:
                  email: email
                  email_verified: true
                  name: name
                  username: username
                  given_name: given_name
                  phone_number: phone_number
                  phone_verified: true
                  family_name: family_name
  source:
    openapi: ../api.json
