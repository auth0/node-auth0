imports:
  root: ../__package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    list:
      path: /clients/{client_id}/credentials
      method: GET
      auth: true
      docs: >
        Get the details of a client credential.


        <b>Important</b>: To enable credentials to be used for a client
        authentication method, set the
        <code>client_authentication_methods</code> property on the client. To
        enable credentials to be used for JWT-Secured Authorization requests set
        the <code>signed_request_object</code> property on the client.
      source:
        openapi: ../api.json
      path-parameters:
        client_id:
          type: string
          docs: ID of the client.
      display-name: Get client credentials
      response:
        docs: Credentials successfully retrieved.
        type: list<root.ClientCredential>
        status-code: 200
      errors:
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
      examples:
        - path-parameters:
            client_id: client_id
          response:
            body:
              - id: id
                name: name
                kid: kid
                alg: RS256
                credential_type: public_key
                subject_dn: subject_dn
                thumbprint_sha256: thumbprint_sha256
                created_at: '2024-01-15T09:30:00Z'
                updated_at: '2024-01-15T09:30:00Z'
                expires_at: '2024-01-15T09:30:00Z'
    create:
      path: /clients/{client_id}/credentials
      method: POST
      auth: true
      docs: >
        Create a client credential associated to your application. Credentials
        can be used to configure Private Key JWT and mTLS authentication
        methods, as well as for JWT-secured Authorization requests.


        <h5>Public Key</h5>Public Key credentials can be used to set up Private
        Key JWT client authentication and JWT-secured Authorization requests.


        Sample: <pre><code>{
          "credential_type": "public_key",
          "name": "string",
          "pem": "string",
          "alg": "RS256",
          "parse_expiry_from_cert": false,
          "expires_at": "2022-12-31T23:59:59Z"
        }</code></pre>

        <h5>Certificate (CA-signed & self-signed)</h5>Certificate credentials
        can be used to set up mTLS client authentication. CA-signed certificates
        can be configured either with a signed certificate or with just the
        certificate Subject DN.


        CA-signed Certificate Sample (pem): <pre><code>{
          "credential_type": "x509_cert",
          "name": "string",
          "pem": "string"
        }</code></pre>CA-signed Certificate Sample (subject_dn): <pre><code>{
          "credential_type": "cert_subject_dn",
          "name": "string",
          "subject_dn": "string"
        }</code></pre>Self-signed Certificate Sample: <pre><code>{
          "credential_type": "cert_subject_dn",
          "name": "string",
          "pem": "string"
        }</code></pre>


        The credential will be created but not yet enabled for use until you set
        the corresponding properties in the client:

        <ul>
          <li>To enable the credential for Private Key JWT or mTLS authentication methods, set the <code>client_authentication_methods</code> property on the client. For more information, read <a href="https://auth0.com/docs/get-started/applications/configure-private-key-jwt">Configure Private Key JWT Authentication</a> and <a href="https://auth0.com/docs/get-started/applications/configure-mtls">Configure mTLS Authentication</a></li>
          <li>To enable the credential for JWT-secured Authorization requests, set the <code>signed_request_object</code>property on the client. For more information, read <a href="https://auth0.com/docs/get-started/applications/configure-jar">Configure JWT-secured Authorization Requests (JAR)</a></li>
        </ul>
      source:
        openapi: ../api.json
      path-parameters:
        client_id:
          type: string
          docs: ID of the client.
      display-name: Create a client credential
      request:
        name: PostClientCredentialRequestContent
        body:
          properties:
            credential_type: root.ClientCredentialTypeEnum
            name:
              type: optional<string>
              docs: Friendly name for a credential.
              default: ''
              validation:
                maxLength: 128
            subject_dn:
              type: optional<string>
              docs: >-
                Subject Distinguished Name. Mutually exclusive with `pem`
                property. Applies to `cert_subject_dn` credential type.
              validation:
                minLength: 1
                maxLength: 256
            pem:
              type: optional<string>
              docs: >-
                PEM-formatted public key (SPKI and PKCS1) or X509 certificate.
                Must be JSON escaped.
              default: "-----BEGIN PUBLIC KEY-----\r\nMIIBIjANBg...\r\n-----END PUBLIC KEY-----\r\n"
            alg: optional<root.PublicKeyCredentialAlgorithmEnum>
            parse_expiry_from_cert:
              type: optional<boolean>
              docs: >-
                Parse expiry from x509 certificate. If true, attempts to parse
                the expiry date from the provided PEM. Applies to `public_key`
                credential type.
              default: false
            expires_at:
              type: optional<datetime>
              docs: >-
                The ISO 8601 formatted date representing the expiration of the
                credential. If not specified (not recommended), the credential
                never expires. Applies to `public_key` credential type.
        content-type: application/json
      response:
        docs: Credential successfully created.
        type: root.PostClientCredentialResponseContent
        status-code: 201
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
      examples:
        - path-parameters:
            client_id: client_id
          request:
            credential_type: public_key
          response:
            body:
              id: id
              name: name
              kid: kid
              alg: RS256
              credential_type: public_key
              subject_dn: subject_dn
              thumbprint_sha256: thumbprint_sha256
              created_at: '2024-01-15T09:30:00Z'
              updated_at: '2024-01-15T09:30:00Z'
              expires_at: '2024-01-15T09:30:00Z'
    get:
      path: /clients/{client_id}/credentials/{credential_id}
      method: GET
      auth: true
      docs: >
        Get the details of a client credential.


        <b>Important</b>: To enable credentials to be used for a client
        authentication method, set the
        <code>client_authentication_methods</code> property on the client. To
        enable credentials to be used for JWT-Secured Authorization requests set
        the <code>signed_request_object</code> property on the client.
      source:
        openapi: ../api.json
      path-parameters:
        client_id:
          type: string
          docs: ID of the client.
        credential_id:
          type: string
          docs: ID of the credential.
      display-name: Get client credential details
      response:
        docs: Credential successfully retrieved.
        type: root.GetClientCredentialResponseContent
        status-code: 200
      errors:
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
      examples:
        - path-parameters:
            client_id: client_id
            credential_id: credential_id
          response:
            body:
              id: id
              name: name
              kid: kid
              alg: RS256
              credential_type: public_key
              subject_dn: subject_dn
              thumbprint_sha256: thumbprint_sha256
              created_at: '2024-01-15T09:30:00Z'
              updated_at: '2024-01-15T09:30:00Z'
              expires_at: '2024-01-15T09:30:00Z'
    delete:
      path: /clients/{client_id}/credentials/{credential_id}
      method: DELETE
      auth: true
      docs: >-
        Delete a client credential you previously created. May be enabled or
        disabled. For more information, read <a
        href="https://www.auth0.com/docs/get-started/authentication-and-authorization-flow/client-credentials-flow">Client
        Credential Flow</a>.
      source:
        openapi: ../api.json
      path-parameters:
        client_id:
          type: string
          docs: ID of the client.
        credential_id:
          type: string
          docs: ID of the credential to delete.
      display-name: Delete a client credential
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
      examples:
        - path-parameters:
            client_id: client_id
            credential_id: credential_id
    update:
      path: /clients/{client_id}/credentials/{credential_id}
      method: PATCH
      auth: true
      docs: >-
        Change a client credential you previously created. May be enabled or
        disabled. For more information, read <a
        href="https://www.auth0.com/docs/get-started/authentication-and-authorization-flow/client-credentials-flow">Client
        Credential Flow</a>.
      source:
        openapi: ../api.json
      path-parameters:
        client_id:
          type: string
          docs: ID of the client.
        credential_id:
          type: string
          docs: ID of the credential.
      display-name: Update a client credential
      request:
        name: PatchClientCredentialRequestContent
        body:
          properties:
            expires_at:
              type: optional<datetime>
              docs: >-
                The ISO 8601 formatted date representing the expiration of the
                credential.
        content-type: application/json
      response:
        docs: Credential successfully updated.
        type: root.PatchClientCredentialResponseContent
        status-code: 201
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
      examples:
        - path-parameters:
            client_id: client_id
            credential_id: credential_id
          request: {}
          response:
            body:
              id: id
              name: name
              kid: kid
              alg: RS256
              credential_type: public_key
              subject_dn: subject_dn
              thumbprint_sha256: thumbprint_sha256
              created_at: '2024-01-15T09:30:00Z'
              updated_at: '2024-01-15T09:30:00Z'
              expires_at: '2024-01-15T09:30:00Z'
  source:
    openapi: ../api.json
