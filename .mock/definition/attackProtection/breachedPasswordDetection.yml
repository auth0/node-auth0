imports:
  root: ../__package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    get:
      path: /attack-protection/breached-password-detection
      method: GET
      auth: true
      docs: >-
        Retrieve details of the Breached Password Detection configuration of
        your tenant.
      source:
        openapi: ../api.json
      display-name: Get Breached Password Detection settings
      response:
        docs: Breached password detection settings successfully retrieved.
        type: root.GetBreachedPasswordDetectionSettingsResponseContent
        status-code: 200
      errors:
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
      examples:
        - response:
            body:
              enabled: true
              shields:
                - block
              admin_notification_frequency:
                - immediately
              method: standard
              stage:
                pre-user-registration:
                  shields:
                    - block
                pre-change-password:
                  shields:
                    - block
    update:
      path: /attack-protection/breached-password-detection
      method: PATCH
      auth: true
      docs: >-
        Update details of the Breached Password Detection configuration of your
        tenant.
      source:
        openapi: ../api.json
      display-name: Update Breached Password Detection settings
      request:
        name: UpdateBreachedPasswordDetectionSettingsRequestContent
        body:
          properties:
            enabled:
              type: optional<boolean>
              docs: Whether or not breached password detection is active.
              default: true
            shields:
              type: optional<list<root.BreachedPasswordDetectionShieldsEnum>>
              docs: >-
                Action to take when a breached password is detected during a
                login.
                      Possible values: <code>block</code>, <code>user_notification</code>, <code>admin_notification</code>.
            admin_notification_frequency:
              type: >-
                optional<list<root.BreachedPasswordDetectionAdminNotificationFrequencyEnum>>
              docs: >-
                When "admin_notification" is enabled, determines how often email
                notifications are sent.
                        Possible values: <code>immediately</code>, <code>daily</code>, <code>weekly</code>, <code>monthly</code>.
            method: optional<root.BreachedPasswordDetectionMethodEnum>
            stage: optional<root.BreachedPasswordDetectionStage>
        content-type: application/json
      response:
        docs: Breached password detection settings successfully updated.
        type: root.UpdateBreachedPasswordDetectionSettingsResponseContent
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
      examples:
        - request: {}
          response:
            body:
              enabled: true
              shields:
                - block
              admin_notification_frequency:
                - immediately
              method: standard
              stage:
                pre-user-registration:
                  shields:
                    - block
                pre-change-password:
                  shields:
                    - block
  source:
    openapi: ../api.json
