imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    list:
      path: /rules
      method: GET
      auth: true
      docs: >
        Retrieve a filtered list of <a
        href="https://auth0.com/docs/rules">rules</a>. Accepts a list of fields
        to include or exclude.
      pagination:
        offset: $request.page
        results: $response.rules
      source:
        openapi: ../api.json
      display-name: Get rules
      request:
        name: ListRulesRequestParameters
        query-parameters:
          page:
            type: optional<integer>
            docs: Page index of the results to return. First page is 0.
          per_page:
            type: optional<integer>
            default: 50
            docs: Number of results per page.
          include_totals:
            type: optional<boolean>
            default: true
            docs: >-
              Return results inside an object that contains the total result
              count (true) or as a direct array of results (false, default).
          enabled:
            type: optional<boolean>
            docs: >-
              Optional filter on whether a rule is enabled (true) or disabled
              (false).
          fields:
            type: optional<string>
            docs: >-
              Comma-separated list of fields to include or exclude (based on
              value provided for include_fields) in the result. Leave empty to
              retrieve all fields.
          include_fields:
            type: optional<boolean>
            docs: >-
              Whether specified fields are to be included (true) or excluded
              (false).
      response:
        docs: Rules successfully retrieved.
        type: root.ListRulesOffsetPaginatedResponseContent
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
      examples:
        - response:
            body:
              start: 1.1
              limit: 1.1
              total: 1.1
              rules:
                - name: name
                  id: id
                  enabled: true
                  script: script
                  order: 1.1
                  stage: stage
    create:
      path: /rules
      method: POST
      auth: true
      docs: >
        Create a <a
        href="https://auth0.com/docs/rules#create-a-new-rule-using-the-management-api">new
        rule</a>.


        Note: Changing a rule's stage of execution from the default
        <code>login_success</code> can change the rule's function signature to
        have user omitted.
      source:
        openapi: ../api.json
      display-name: Create a rule
      request:
        name: CreateRuleRequestContent
        body:
          properties:
            name:
              type: string
              docs: Name of this rule.
              default: my-rule
            script:
              type: string
              docs: Code to be executed when this rule runs.
              default: |-
                function (user, context, callback) {
                  callback(null, user, context);
                }
              validation:
                minLength: 1
            order:
              type: optional<double>
              docs: >-
                Order that this rule should execute in relative to other rules.
                Lower-valued rules execute first.
              default: 2
            enabled:
              type: optional<boolean>
              docs: Whether the rule is enabled (true), or disabled (false).
              default: true
        content-type: application/json
      response:
        docs: Rule successfully created.
        type: root.CreateRuleResponseContent
        status-code: 201
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.ConflictError
        - root.TooManyRequestsError
      examples:
        - request:
            name: name
            script: script
          response:
            body:
              name: name
              id: id
              enabled: true
              script: script
              order: 1.1
              stage: stage
    get:
      path: /rules/{id}
      method: GET
      auth: true
      docs: >
        Retrieve <a href="https://auth0.com/docs/rules">rule</a> details.
        Accepts a list of fields to include or exclude in the result.
      source:
        openapi: ../api.json
      path-parameters:
        id:
          type: string
          docs: ID of the rule to retrieve.
      display-name: Get a rule
      request:
        name: GetRuleRequestParameters
        query-parameters:
          fields:
            type: optional<string>
            docs: >-
              Comma-separated list of fields to include or exclude (based on
              value provided for include_fields) in the result. Leave empty to
              retrieve all fields.
          include_fields:
            type: optional<boolean>
            docs: >-
              Whether specified fields are to be included (true) or excluded
              (false).
      response:
        docs: Rule successfully retrieved.
        type: root.GetRuleResponseContent
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.TooManyRequestsError
      examples:
        - path-parameters:
            id: id
          response:
            body:
              name: name
              id: id
              enabled: true
              script: script
              order: 1.1
              stage: stage
    delete:
      path: /rules/{id}
      method: DELETE
      auth: true
      docs: |
        Delete a rule.
      source:
        openapi: ../api.json
      path-parameters:
        id:
          type: string
          docs: ID of the rule to delete.
      display-name: Delete a rule
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.TooManyRequestsError
      examples:
        - path-parameters:
            id: id
    update:
      path: /rules/{id}
      method: PATCH
      auth: true
      docs: |
        Update an existing rule.
      source:
        openapi: ../api.json
      path-parameters:
        id:
          type: string
          docs: ID of the rule to retrieve.
      display-name: Update a rule
      request:
        name: UpdateRuleRequestContent
        body:
          properties:
            script:
              type: optional<string>
              docs: Code to be executed when this rule runs.
              default: |-
                function (user, context, callback) {
                  callback(null, user, context);
                }
              validation:
                minLength: 1
            name:
              type: optional<string>
              docs: Name of this rule.
              default: my-rule
            order:
              type: optional<double>
              docs: >-
                Order that this rule should execute in relative to other rules.
                Lower-valued rules execute first.
              default: 2
            enabled:
              type: optional<boolean>
              docs: Whether the rule is enabled (true), or disabled (false).
              default: true
        content-type: application/json
      response:
        docs: Rule successfully updated.
        type: root.UpdateRuleResponseContent
        status-code: 200
      errors:
        - root.BadRequestError
        - root.UnauthorizedError
        - root.ForbiddenError
        - root.NotFoundError
        - root.ConflictError
        - root.TooManyRequestsError
      examples:
        - path-parameters:
            id: id
          request: {}
          response:
            body:
              name: name
              id: id
              enabled: true
              script: script
              order: 1.1
              stage: stage
  source:
    openapi: ../api.json
