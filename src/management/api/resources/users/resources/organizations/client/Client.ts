// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../../../BaseClient";
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Management from "../../../../../index";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers";
import * as errors from "../../../../../../errors/index";

export declare namespace Organizations {
    export interface Options extends BaseClientOptions {}

    export interface RequestOptions extends BaseRequestOptions {}
}

export class Organizations {
    protected readonly _options: Organizations.Options;

    constructor(_options: Organizations.Options) {
        this._options = _options;
    }

    /**
     * Retrieve list of the specified user's current Organization memberships. User must be specified by user ID. For more information, review <a href="https://auth0.com/docs/manage-users/organizations">Auth0 Organizations</a>.
     *
     * @param {string} id - ID of the user to retrieve the organizations for.
     * @param {Management.ListUserOrganizationsRequestParameters} request
     * @param {Organizations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Management.UnauthorizedError}
     * @throws {@link Management.ForbiddenError}
     * @throws {@link Management.TooManyRequestsError}
     *
     * @example
     *     await client.users.organizations.list("id", {
     *         page: 1,
     *         per_page: 1,
     *         include_totals: true
     *     })
     */
    public async list(
        id: string,
        request: Management.ListUserOrganizationsRequestParameters = {},
        requestOptions?: Organizations.RequestOptions,
    ): Promise<core.Page<Management.Organization>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: Management.ListUserOrganizationsRequestParameters,
            ): Promise<core.WithRawResponse<Management.ListUserOrganizationsOffsetPaginatedResponseContent>> => {
                const { page = 0, per_page: perPage = 50, include_totals: includeTotals = true } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (page !== undefined) {
                    _queryParams["page"] = page?.toString() ?? null;
                }
                if (perPage !== undefined) {
                    _queryParams["per_page"] = perPage?.toString() ?? null;
                }
                if (includeTotals !== undefined) {
                    _queryParams["include_totals"] = includeTotals?.toString() ?? null;
                }
                let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
                    this._options?.headers,
                    mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                    requestOptions?.headers,
                );
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)) ??
                            environments.ManagementEnvironment.Default,
                        `users/${encodeURIComponent(id)}/organizations`,
                    ),
                    method: "GET",
                    headers: _headers,
                    queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
                    timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
                    maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as Management.ListUserOrganizationsOffsetPaginatedResponseContent,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 401:
                            throw new Management.UnauthorizedError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 403:
                            throw new Management.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                        case 429:
                            throw new Management.TooManyRequestsError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        default:
                            throw new errors.ManagementError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                                rawResponse: _response.rawResponse,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.ManagementError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.ManagementTimeoutError(
                            "Timeout exceeded when calling GET /users/{id}/organizations.",
                        );
                    case "unknown":
                        throw new errors.ManagementError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        let _offset = request?.page != null ? request?.page : 0;
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<
            Management.ListUserOrganizationsOffsetPaginatedResponseContent,
            Management.Organization
        >({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) => (response?.organizations ?? []).length > 0,
            getItems: (response) => response?.organizations ?? [],
            loadPage: (_response) => {
                _offset += 1;
                return list(core.setObjectProperty(request, "page", _offset));
            },
        });
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
