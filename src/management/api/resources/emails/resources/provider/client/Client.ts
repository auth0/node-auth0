/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments.js";
import * as core from "../../../../../../core/index.js";
import type { GetEmailProviderRequestParameters } from "./requests/GetEmailProviderRequestParameters.js";
import { BadRequestError } from "../../../../../errors/BadRequestError.js";
import { UnauthorizedError } from "../../../../../errors/UnauthorizedError.js";
import { ForbiddenError } from "../../../../../errors/ForbiddenError.js";
import { NotFoundError } from "../../../../../errors/NotFoundError.js";
import { TooManyRequestsError } from "../../../../../errors/TooManyRequestsError.js";
import type { GetEmailProviderResponseContent } from "../../../../../types/GetEmailProviderResponseContent.js";
import type { CreateEmailProviderRequestContent } from "./requests/CreateEmailProviderRequestContent.js";
import { ConflictError } from "../../../../../errors/ConflictError.js";
import type { CreateEmailProviderResponseContent } from "../../../../../types/CreateEmailProviderResponseContent.js";
import type { UpdateEmailProviderRequestContent } from "./requests/UpdateEmailProviderRequestContent.js";
import type { UpdateEmailProviderResponseContent } from "../../../../../types/UpdateEmailProviderResponseContent.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";
import * as errors from "../../../../../../errors/index.js";

export declare namespace Provider {
    export interface Options {
        environment?: core.Supplier<environments.ManagementEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Provider {
    protected readonly _options: Provider.Options;

    constructor(_options: Provider.Options) {
        this._options = _options;
    }

    /**
     * Retrieve details of the <a href="https://auth0.com/docs/customize/email/smtp-email-providers">email provider configuration</a> in your tenant. A list of fields to include or exclude may also be specified.
     *
     * @param {GetEmailProviderRequestParameters} request
     * @param {Provider.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BadRequestError}
     * @throws {@link UnauthorizedError}
     * @throws {@link ForbiddenError}
     * @throws {@link NotFoundError}
     * @throws {@link TooManyRequestsError}
     *
     * @example
     *     await client.emails.provider.get()
     */
    public get(
        request: GetEmailProviderRequestParameters = {},
        requestOptions?: Provider.RequestOptions,
    ): core.HttpResponsePromise<GetEmailProviderResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__get(request, requestOptions));
    }

    private async __get(
        request: GetEmailProviderRequestParameters = {},
        requestOptions?: Provider.RequestOptions,
    ): Promise<core.WithRawResponse<GetEmailProviderResponseContent>> {
        const { fields, include_fields: includeFields } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (fields != null) {
            _queryParams["fields"] = fields;
        }

        if (includeFields != null) {
            _queryParams["include_fields"] = includeFields.toString();
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                "emails/provider",
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as GetEmailProviderResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError("Timeout exceeded when calling GET /emails/provider.");
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Create an <a href="https://auth0.com/docs/email/providers">email provider</a>. The <code>credentials</code> object
     * requires different properties depending on the email provider (which is specified using the <code>name</code> property):
     * <ul>
     *   <li><code>mandrill</code> requires <code>api_key</code></li>
     *   <li><code>sendgrid</code> requires <code>api_key</code></li>
     *   <li>
     *     <code>sparkpost</code> requires <code>api_key</code>. Optionally, set <code>region</code> to <code>eu</code> to use
     *     the SparkPost service hosted in Western Europe; set to <code>null</code> to use the SparkPost service hosted in
     *     North America. <code>eu</code> or <code>null</code> are the only valid values for <code>region</code>.
     *   </li>
     *   <li>
     *     <code>mailgun</code> requires <code>api_key</code> and <code>domain</code>. Optionally, set <code>region</code> to
     *     <code>eu</code> to use the Mailgun service hosted in Europe; set to <code>null</code> otherwise. <code>eu</code> or
     *     <code>null</code> are the only valid values for <code>region</code>.
     *   </li>
     *   <li><code>ses</code> requires <code>accessKeyId</code>, <code>secretAccessKey</code>, and <code>region</code></li>
     *   <li>
     *     <code>smtp</code> requires <code>smtp_host</code>, <code>smtp_port</code>, <code>smtp_user</code>, and
     *     <code>smtp_pass</code>
     *   </li>
     * </ul>
     * Depending on the type of provider it is possible to specify <code>settings</code> object with different configuration
     * options, which will be used when sending an email:
     * <ul>
     *   <li>
     *     <code>smtp</code> provider, <code>settings</code> may contain <code>headers</code> object.
     *     <ul>
     *       <li>
     *         When using AWS SES SMTP host, you may provide a name of configuration set in
     *         <code>X-SES-Configuration-Set</code> header. Value must be a string.
     *       </li>
     *       <li>
     *         When using Sparkpost host, you may provide value for
     *         <code>X-MSYS_API</code> header. Value must be an object.
     *       </li>
     *     </ul>
     *   </li>
     *   <li>
     *     for <code>ses</code> provider, <code>settings</code> may contain <code>message</code> object, where you can provide
     *     a name of configuration set in <code>configuration_set_name</code> property. Value must be a string.
     *   </li>
     * </ul>
     *
     * @param {CreateEmailProviderRequestContent} request
     * @param {Provider.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BadRequestError}
     * @throws {@link UnauthorizedError}
     * @throws {@link ForbiddenError}
     * @throws {@link ConflictError}
     * @throws {@link TooManyRequestsError}
     *
     * @example
     *     await client.emails.provider.create({
     *         name: "mailgun",
     *         credentials: {
     *             api_key: "api_key"
     *         }
     *     })
     */
    public create(
        request: CreateEmailProviderRequestContent,
        requestOptions?: Provider.RequestOptions,
    ): core.HttpResponsePromise<CreateEmailProviderResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: CreateEmailProviderRequestContent,
        requestOptions?: Provider.RequestOptions,
    ): Promise<core.WithRawResponse<CreateEmailProviderResponseContent>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                "emails/provider",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as CreateEmailProviderResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 409:
                    throw new ConflictError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError("Timeout exceeded when calling POST /emails/provider.");
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Delete the email provider.
     *
     * @param {Provider.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BadRequestError}
     * @throws {@link UnauthorizedError}
     * @throws {@link ForbiddenError}
     * @throws {@link NotFoundError}
     * @throws {@link TooManyRequestsError}
     *
     * @example
     *     await client.emails.provider.delete()
     */
    public delete(requestOptions?: Provider.RequestOptions): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__delete(requestOptions));
    }

    private async __delete(requestOptions?: Provider.RequestOptions): Promise<core.WithRawResponse<void>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                "emails/provider",
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError("Timeout exceeded when calling DELETE /emails/provider.");
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Update an <a href="https://auth0.com/docs/email/providers">email provider</a>. The <code>credentials</code> object
     * requires different properties depending on the email provider (which is specified using the <code>name</code> property):
     * <ul>
     *   <li><code>mandrill</code> requires <code>api_key</code></li>
     *   <li><code>sendgrid</code> requires <code>api_key</code></li>
     *   <li>
     *     <code>sparkpost</code> requires <code>api_key</code>. Optionally, set <code>region</code> to <code>eu</code> to use
     *     the SparkPost service hosted in Western Europe; set to <code>null</code> to use the SparkPost service hosted in
     *     North America. <code>eu</code> or <code>null</code> are the only valid values for <code>region</code>.
     *   </li>
     *   <li>
     *     <code>mailgun</code> requires <code>api_key</code> and <code>domain</code>. Optionally, set <code>region</code> to
     *     <code>eu</code> to use the Mailgun service hosted in Europe; set to <code>null</code> otherwise. <code>eu</code> or
     *     <code>null</code> are the only valid values for <code>region</code>.
     *   </li>
     *   <li><code>ses</code> requires <code>accessKeyId</code>, <code>secretAccessKey</code>, and <code>region</code></li>
     *   <li>
     *     <code>smtp</code> requires <code>smtp_host</code>, <code>smtp_port</code>, <code>smtp_user</code>, and
     *     <code>smtp_pass</code>
     *   </li>
     * </ul>
     * Depending on the type of provider it is possible to specify <code>settings</code> object with different configuration
     * options, which will be used when sending an email:
     * <ul>
     *   <li>
     *     <code>smtp</code> provider, <code>settings</code> may contain <code>headers</code> object.
     *     <ul>
     *       <li>
     *         When using AWS SES SMTP host, you may provide a name of configuration set in
     *         <code>X-SES-Configuration-Set</code> header. Value must be a string.
     *       </li>
     *       <li>
     *         When using Sparkpost host, you may provide value for
     *         <code>X-MSYS_API</code> header. Value must be an object.
     *       </li>
     *     </ul>
     *     for <code>ses</code> provider, <code>settings</code> may contain <code>message</code> object, where you can provide
     *     a name of configuration set in <code>configuration_set_name</code> property. Value must be a string.
     *   </li>
     * </ul>
     *
     * @param {UpdateEmailProviderRequestContent} request
     * @param {Provider.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BadRequestError}
     * @throws {@link UnauthorizedError}
     * @throws {@link ForbiddenError}
     * @throws {@link NotFoundError}
     * @throws {@link ConflictError}
     * @throws {@link TooManyRequestsError}
     *
     * @example
     *     await client.emails.provider.update()
     */
    public update(
        request: UpdateEmailProviderRequestContent = {},
        requestOptions?: Provider.RequestOptions,
    ): core.HttpResponsePromise<UpdateEmailProviderResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__update(request, requestOptions));
    }

    private async __update(
        request: UpdateEmailProviderRequestContent = {},
        requestOptions?: Provider.RequestOptions,
    ): Promise<core.WithRawResponse<UpdateEmailProviderResponseContent>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                "emails/provider",
            ),
            method: "PATCH",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as UpdateEmailProviderResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 409:
                    throw new ConflictError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError("Timeout exceeded when calling PATCH /emails/provider.");
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
