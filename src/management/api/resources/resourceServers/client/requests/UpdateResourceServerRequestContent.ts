/**
 * This file was auto-generated by Fern from our API Definition.
 */

import type { ResourceServerScope } from "../../../../types/ResourceServerScope.js";
import type { SigningAlgorithmEnum } from "../../../../types/SigningAlgorithmEnum.js";
import type { ResourceServerTokenDialectSchemaEnum } from "../../../../types/ResourceServerTokenDialectSchemaEnum.js";
import type { ResourceServerTokenEncryption } from "../../../../types/ResourceServerTokenEncryption.js";
import type { ResourceServerConsentPolicyEnum } from "../../../../types/ResourceServerConsentPolicyEnum.js";
import type { ResourceServerProofOfPossession } from "../../../../types/ResourceServerProofOfPossession.js";
import type { ResourceServerSubjectTypeAuthorization } from "../../../../types/ResourceServerSubjectTypeAuthorization.js";

/**
 * @example
 *     {}
 */
export interface UpdateResourceServerRequestContent {
    /** Friendly name for this resource server. Can not contain `<` or `>` characters. */
    name?: string;
    /** List of permissions (scopes) that this API uses. */
    scopes?: ResourceServerScope[];
    signing_alg?: SigningAlgorithmEnum;
    /** Secret used to sign tokens when using symmetric algorithms (HS256). */
    signing_secret?: string;
    /** Whether to skip user consent for applications flagged as first party (true) or not (false). */
    skip_consent_for_verifiable_first_party_clients?: boolean;
    /** Whether refresh tokens can be issued for this API (true) or not (false). */
    allow_offline_access?: boolean;
    /** Expiration value (in seconds) for access tokens issued for this API from the token endpoint. */
    token_lifetime?: number;
    token_dialect?: ResourceServerTokenDialectSchemaEnum;
    /** Whether authorization policies are enforced (true) or not enforced (false). */
    enforce_policies?: boolean;
    token_encryption?: ResourceServerTokenEncryption;
    consent_policy?: ResourceServerConsentPolicyEnum | undefined;
    authorization_details?: unknown[];
    proof_of_possession?: ResourceServerProofOfPossession;
    subject_type_authorization?: ResourceServerSubjectTypeAuthorization;
}
