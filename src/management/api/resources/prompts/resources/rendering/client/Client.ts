/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments.js";
import * as core from "../../../../../../core/index.js";
import type { ListAculsRequestParameters } from "./requests/ListAculsRequestParameters.js";
import { BadRequestError } from "../../../../../errors/BadRequestError.js";
import { UnauthorizedError } from "../../../../../errors/UnauthorizedError.js";
import { PaymentRequiredError } from "../../../../../errors/PaymentRequiredError.js";
import { ForbiddenError } from "../../../../../errors/ForbiddenError.js";
import { TooManyRequestsError } from "../../../../../errors/TooManyRequestsError.js";
import type { AculResponseContent } from "../../../../../types/AculResponseContent.js";
import type { ListAculsOffsetPaginatedResponseContent } from "../../../../../types/ListAculsOffsetPaginatedResponseContent.js";
import type { PromptGroupNameEnum } from "../../../../../types/PromptGroupNameEnum.js";
import type { ScreenGroupNameEnum } from "../../../../../types/ScreenGroupNameEnum.js";
import { NotFoundError } from "../../../../../errors/NotFoundError.js";
import type { GetAculResponseContent } from "../../../../../types/GetAculResponseContent.js";
import type { UpdateAculRequestContent } from "./requests/UpdateAculRequestContent.js";
import type { UpdateAculResponseContent } from "../../../../../types/UpdateAculResponseContent.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";
import * as errors from "../../../../../../errors/index.js";

export declare namespace Rendering {
    export interface Options {
        environment?: core.Supplier<environments.ManagementEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Rendering {
    protected readonly _options: Rendering.Options;

    constructor(_options: Rendering.Options) {
        this._options = _options;
    }

    /**
     * Get render setting configurations for all screens.
     *
     * @param {ListAculsRequestParameters} request
     * @param {Rendering.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BadRequestError}
     * @throws {@link UnauthorizedError}
     * @throws {@link PaymentRequiredError}
     * @throws {@link ForbiddenError}
     * @throws {@link TooManyRequestsError}
     *
     * @example
     *     await client.rendering.list()
     */
    public async list(
        request: ListAculsRequestParameters = {},
        requestOptions?: Rendering.RequestOptions,
    ): Promise<core.Page<AculResponseContent>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: ListAculsRequestParameters,
            ): Promise<core.WithRawResponse<ListAculsOffsetPaginatedResponseContent>> => {
                const {
                    fields,
                    include_fields: includeFields,
                    page = 0,
                    per_page: perPage = 50,
                    include_totals: includeTotals = true,
                    prompt,
                    screen,
                    rendering_mode: renderingMode,
                } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (fields != null) {
                    _queryParams["fields"] = fields;
                }
                if (includeFields != null) {
                    _queryParams["include_fields"] = includeFields.toString();
                }
                if (page != null) {
                    _queryParams["page"] = page.toString();
                }
                if (perPage != null) {
                    _queryParams["per_page"] = perPage.toString();
                }
                if (includeTotals != null) {
                    _queryParams["include_totals"] = includeTotals.toString();
                }
                if (prompt != null) {
                    _queryParams["prompt"] = prompt;
                }
                if (screen != null) {
                    _queryParams["screen"] = screen;
                }
                if (renderingMode != null) {
                    _queryParams["rendering_mode"] = renderingMode;
                }
                let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
                    this._options?.headers,
                    mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                    requestOptions?.headers,
                );
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)) ??
                            environments.ManagementEnvironment.Default,
                        "prompts/rendering",
                    ),
                    method: "GET",
                    headers: _headers,
                    queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as ListAculsOffsetPaginatedResponseContent,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 400:
                            throw new BadRequestError(_response.error.body as unknown, _response.rawResponse);
                        case 401:
                            throw new UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                        case 402:
                            throw new PaymentRequiredError(_response.error.body as unknown, _response.rawResponse);
                        case 403:
                            throw new ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                        case 429:
                            throw new TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                        default:
                            throw new errors.ManagementError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                                rawResponse: _response.rawResponse,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.ManagementError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.ManagementTimeoutError(
                            "Timeout exceeded when calling GET /prompts/rendering.",
                        );
                    case "unknown":
                        throw new errors.ManagementError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        let _offset = request?.page != null ? request?.page : 0;
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<ListAculsOffsetPaginatedResponseContent, AculResponseContent>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) => (response?.configs ?? []).length > 0,
            getItems: (response) => response?.configs ?? [],
            loadPage: (_response) => {
                _offset += 1;
                return list(core.setObjectProperty(request, "page", _offset));
            },
        });
    }

    /**
     * Get render settings for a screen.
     *
     * @param {PromptGroupNameEnum} prompt - Name of the prompt
     * @param {ScreenGroupNameEnum} screen - Name of the screen
     * @param {Rendering.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BadRequestError}
     * @throws {@link UnauthorizedError}
     * @throws {@link PaymentRequiredError}
     * @throws {@link ForbiddenError}
     * @throws {@link NotFoundError}
     * @throws {@link TooManyRequestsError}
     *
     * @example
     *     await client.rendering.get("login", "login")
     */
    public get(
        prompt: PromptGroupNameEnum,
        screen: ScreenGroupNameEnum,
        requestOptions?: Rendering.RequestOptions,
    ): core.HttpResponsePromise<GetAculResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__get(prompt, screen, requestOptions));
    }

    private async __get(
        prompt: PromptGroupNameEnum,
        screen: ScreenGroupNameEnum,
        requestOptions?: Rendering.RequestOptions,
    ): Promise<core.WithRawResponse<GetAculResponseContent>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                `prompts/${encodeURIComponent(prompt)}/screen/${encodeURIComponent(screen)}/rendering`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as GetAculResponseContent, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 402:
                    throw new PaymentRequiredError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError(
                    "Timeout exceeded when calling GET /prompts/{prompt}/screen/{screen}/rendering.",
                );
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Learn more about <a href='https://auth0.com/docs/customize/login-pages/advanced-customizations/getting-started/configure-acul-screens'>configuring render settings</a> for advanced customization.
     *
     * <p>
     *   Example <code>head_tags</code> array. See our <a href='https://auth0.com/docs/customize/login-pages/advanced-customizations/getting-started/configure-acul-screens'>documentation</a> on using Liquid variables within head tags.
     * </p>
     * <pre>{
     *   "head_tags": [
     *     {
     *       "tag": "script",
     *       "attributes": {
     *         "defer": true,
     *         "src": "URL_TO_ASSET",
     *         "async": true,
     *         "integrity": [
     *           "ASSET_SHA"
     *         ]
     *       }
     *     },
     *     {
     *       "tag": "link",
     *       "attributes": {
     *         "href": "URL_TO_ASSET",
     *         "rel": "stylesheet"
     *       }
     *     }
     *   ]
     * }
     * </pre>
     *
     * @param {PromptGroupNameEnum} prompt - Name of the prompt
     * @param {ScreenGroupNameEnum} screen - Name of the screen
     * @param {UpdateAculRequestContent} request
     * @param {Rendering.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BadRequestError}
     * @throws {@link UnauthorizedError}
     * @throws {@link PaymentRequiredError}
     * @throws {@link ForbiddenError}
     * @throws {@link TooManyRequestsError}
     *
     * @example
     *     await client.rendering.update("login", "login")
     */
    public update(
        prompt: PromptGroupNameEnum,
        screen: ScreenGroupNameEnum,
        request: UpdateAculRequestContent = {},
        requestOptions?: Rendering.RequestOptions,
    ): core.HttpResponsePromise<UpdateAculResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__update(prompt, screen, request, requestOptions));
    }

    private async __update(
        prompt: PromptGroupNameEnum,
        screen: ScreenGroupNameEnum,
        request: UpdateAculRequestContent = {},
        requestOptions?: Rendering.RequestOptions,
    ): Promise<core.WithRawResponse<UpdateAculResponseContent>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                `prompts/${encodeURIComponent(prompt)}/screen/${encodeURIComponent(screen)}/rendering`,
            ),
            method: "PATCH",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as UpdateAculResponseContent, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 402:
                    throw new PaymentRequiredError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError(
                    "Timeout exceeded when calling PATCH /prompts/{prompt}/screen/{screen}/rendering.",
                );
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
