/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments.js";
import * as core from "../../../../../../core/index.js";
import * as Management from "../../../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";
import * as errors from "../../../../../../errors/index.js";

export declare namespace CustomText {
    export interface Options {
        environment?: core.Supplier<environments.ManagementEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class CustomText {
    protected readonly _options: CustomText.Options;

    constructor(_options: CustomText.Options) {
        this._options = _options;
    }

    /**
     * Retrieves text customizations for a given self-service profile, language and Self Service SSO Flow page.
     *
     * @param {string} id - The id of the self-service profile.
     * @param {Management.SelfServiceProfileCustomTextLanguageEnum} language - The language of the custom text.
     * @param {Management.SelfServiceProfileCustomTextPageEnum} page - The page where the custom text is shown.
     * @param {CustomText.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Management.UnauthorizedError}
     * @throws {@link Management.ForbiddenError}
     * @throws {@link Management.NotFoundError}
     * @throws {@link Management.TooManyRequestsError}
     *
     * @example
     *     await client.selfServiceProfiles.customText.list("id", "en", "get-started")
     */
    public list(
        id: string,
        language: Management.SelfServiceProfileCustomTextLanguageEnum,
        page: Management.SelfServiceProfileCustomTextPageEnum,
        requestOptions?: CustomText.RequestOptions,
    ): core.HttpResponsePromise<Management.ListSelfServiceProfileCustomTextResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__list(id, language, page, requestOptions));
    }

    private async __list(
        id: string,
        language: Management.SelfServiceProfileCustomTextLanguageEnum,
        page: Management.SelfServiceProfileCustomTextPageEnum,
        requestOptions?: CustomText.RequestOptions,
    ): Promise<core.WithRawResponse<Management.ListSelfServiceProfileCustomTextResponseContent>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                `self-service-profiles/${encodeURIComponent(id)}/custom-text/${encodeURIComponent(language)}/${encodeURIComponent(page)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Management.ListSelfServiceProfileCustomTextResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Management.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Management.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Management.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Management.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError(
                    "Timeout exceeded when calling GET /self-service-profiles/{id}/custom-text/{language}/{page}.",
                );
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Updates text customizations for a given self-service profile, language and Self Service SSO Flow page.
     *
     * @param {string} id - The id of the self-service profile.
     * @param {Management.SelfServiceProfileCustomTextLanguageEnum} language - The language of the custom text.
     * @param {Management.SelfServiceProfileCustomTextPageEnum} page - The page where the custom text is shown.
     * @param {Management.SetSelfServiceProfileCustomTextRequestContent} request
     * @param {CustomText.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Management.UnauthorizedError}
     * @throws {@link Management.ForbiddenError}
     * @throws {@link Management.NotFoundError}
     * @throws {@link Management.TooManyRequestsError}
     *
     * @example
     *     await client.selfServiceProfiles.customText.set("id", "en", "get-started", {
     *         "key": "value"
     *     })
     */
    public set(
        id: string,
        language: Management.SelfServiceProfileCustomTextLanguageEnum,
        page: Management.SelfServiceProfileCustomTextPageEnum,
        request: Management.SetSelfServiceProfileCustomTextRequestContent,
        requestOptions?: CustomText.RequestOptions,
    ): core.HttpResponsePromise<Management.SetSelfServiceProfileCustomTextResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__set(id, language, page, request, requestOptions));
    }

    private async __set(
        id: string,
        language: Management.SelfServiceProfileCustomTextLanguageEnum,
        page: Management.SelfServiceProfileCustomTextPageEnum,
        request: Management.SetSelfServiceProfileCustomTextRequestContent,
        requestOptions?: CustomText.RequestOptions,
    ): Promise<core.WithRawResponse<Management.SetSelfServiceProfileCustomTextResponseContent>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                `self-service-profiles/${encodeURIComponent(id)}/custom-text/${encodeURIComponent(language)}/${encodeURIComponent(page)}`,
            ),
            method: "PUT",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Management.SetSelfServiceProfileCustomTextResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Management.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Management.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Management.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Management.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError(
                    "Timeout exceeded when calling PUT /self-service-profiles/{id}/custom-text/{language}/{page}.",
                );
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
