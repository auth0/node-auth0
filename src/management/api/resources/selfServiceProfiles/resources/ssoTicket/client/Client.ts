// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../../../BaseClient.js";
import * as environments from "../../../../../../environments.js";
import * as core from "../../../../../../core/index.js";
import * as Management from "../../../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";
import * as errors from "../../../../../../errors/index.js";

export declare namespace SsoTicket {
    export interface Options extends BaseClientOptions {}

    export interface RequestOptions extends BaseRequestOptions {}
}

export class SsoTicket {
    protected readonly _options: SsoTicket.Options;

    constructor(_options: SsoTicket.Options) {
        this._options = _options;
    }

    /**
     * Creates an SSO access ticket to initiate the Self Service SSO Flow using a self-service profile.
     *
     * @param {string} id - The id of the self-service profile to retrieve
     * @param {Management.CreateSelfServiceProfileSsoTicketRequestContent} request
     * @param {SsoTicket.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Management.BadRequestError}
     * @throws {@link Management.UnauthorizedError}
     * @throws {@link Management.ForbiddenError}
     * @throws {@link Management.TooManyRequestsError}
     *
     * @example
     *     await client.selfServiceProfiles.ssoTicket.create("id")
     */
    public create(
        id: string,
        request: Management.CreateSelfServiceProfileSsoTicketRequestContent = {},
        requestOptions?: SsoTicket.RequestOptions,
    ): core.HttpResponsePromise<Management.CreateSelfServiceProfileSsoTicketResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__create(id, request, requestOptions));
    }

    private async __create(
        id: string,
        request: Management.CreateSelfServiceProfileSsoTicketRequestContent = {},
        requestOptions?: SsoTicket.RequestOptions,
    ): Promise<core.WithRawResponse<Management.CreateSelfServiceProfileSsoTicketResponseContent>> {
        const _metadata: core.EndpointMetadata = {
            security: [{ bearerAuth: [] }, { oAuth2ClientCredentials: ["create:sso_access_tickets"] }],
        };
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader(_metadata) }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                `self-service-profiles/${core.url.encodePathParam(id)}/sso-ticket`,
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
            endpointMetadata: _metadata,
        });
        if (_response.ok) {
            return {
                data: _response.body as Management.CreateSelfServiceProfileSsoTicketResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Management.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Management.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Management.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Management.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError(
                    "Timeout exceeded when calling POST /self-service-profiles/{id}/sso-ticket.",
                );
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Revokes an SSO access ticket and invalidates associated sessions. The ticket will no longer be accepted to initiate a Self-Service SSO session. If any users have already started a session through this ticket, their session will be terminated. Clients should expect a `202 Accepted` response upon successful processing, indicating that the request has been acknowledged and that the revocation is underway but may not be fully completed at the time of response. If the specified ticket does not exist, a `202 Accepted` response is also returned, signaling that no further action is required.
     * Clients should treat these `202` responses as an acknowledgment that the request has been accepted and is in progress, even if the ticket was not found.
     *
     * @param {string} profileId - The id of the self-service profile
     * @param {string} id - The id of the ticket to revoke
     * @param {SsoTicket.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Management.UnauthorizedError}
     * @throws {@link Management.ForbiddenError}
     * @throws {@link Management.TooManyRequestsError}
     *
     * @example
     *     await client.selfServiceProfiles.ssoTicket.revoke("profileId", "id")
     */
    public revoke(
        profileId: string,
        id: string,
        requestOptions?: SsoTicket.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__revoke(profileId, id, requestOptions));
    }

    private async __revoke(
        profileId: string,
        id: string,
        requestOptions?: SsoTicket.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _metadata: core.EndpointMetadata = {
            security: [{ bearerAuth: [] }, { oAuth2ClientCredentials: ["delete:sso_access_tickets"] }],
        };
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader(_metadata) }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                `self-service-profiles/${core.url.encodePathParam(profileId)}/sso-ticket/${core.url.encodePathParam(id)}/revoke`,
            ),
            method: "POST",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
            endpointMetadata: _metadata,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Management.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Management.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Management.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError(
                    "Timeout exceeded when calling POST /self-service-profiles/{profileId}/sso-ticket/{id}/revoke.",
                );
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(endpointMetadata: core.EndpointMetadata): Promise<string> {
        return `Bearer ${await core.EndpointSupplier.get(this._options.token, { endpointMetadata })}`;
    }
}
