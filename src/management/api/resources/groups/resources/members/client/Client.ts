/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments.js";
import * as core from "../../../../../../core/index.js";
import type { GetGroupMembersRequestParameters } from "./requests/GetGroupMembersRequestParameters.js";
import { BadRequestError } from "../../../../../errors/BadRequestError.js";
import { UnauthorizedError } from "../../../../../errors/UnauthorizedError.js";
import { ForbiddenError } from "../../../../../errors/ForbiddenError.js";
import { TooManyRequestsError } from "../../../../../errors/TooManyRequestsError.js";
import type { GroupMember } from "../../../../../types/GroupMember.js";
import type { GetGroupMembersResponseContent } from "../../../../../types/GetGroupMembersResponseContent.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";
import * as errors from "../../../../../../errors/index.js";

export declare namespace Members {
    export interface Options {
        environment?: core.Supplier<environments.ManagementEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Members {
    protected readonly _options: Members.Options;

    constructor(_options: Members.Options) {
        this._options = _options;
    }

    /**
     * @param {string} id - Unique identifier for the group (service-generated).
     * @param {GetGroupMembersRequestParameters} request
     * @param {Members.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BadRequestError}
     * @throws {@link UnauthorizedError}
     * @throws {@link ForbiddenError}
     * @throws {@link TooManyRequestsError}
     *
     * @example
     *     await client.members.get("id")
     */
    public async get(
        id: string,
        request: GetGroupMembersRequestParameters = {},
        requestOptions?: Members.RequestOptions,
    ): Promise<core.Page<GroupMember>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: GetGroupMembersRequestParameters,
            ): Promise<core.WithRawResponse<GetGroupMembersResponseContent>> => {
                const { from: from_, take = 50 } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (from_ != null) {
                    _queryParams["from"] = from_;
                }
                if (take != null) {
                    _queryParams["take"] = take.toString();
                }
                let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
                    this._options?.headers,
                    mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                    requestOptions?.headers,
                );
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)) ??
                            environments.ManagementEnvironment.Default,
                        `groups/${encodeURIComponent(id)}/members`,
                    ),
                    method: "GET",
                    headers: _headers,
                    queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as GetGroupMembersResponseContent,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 400:
                            throw new BadRequestError(_response.error.body as unknown, _response.rawResponse);
                        case 401:
                            throw new UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                        case 403:
                            throw new ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                        case 429:
                            throw new TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                        default:
                            throw new errors.ManagementError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                                rawResponse: _response.rawResponse,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.ManagementError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.ManagementTimeoutError(
                            "Timeout exceeded when calling GET /groups/{id}/members.",
                        );
                    case "unknown":
                        throw new errors.ManagementError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<GetGroupMembersResponseContent, GroupMember>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) =>
                response?.next != null && !(typeof response?.next === "string" && response?.next === ""),
            getItems: (response) => response?.members ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "from", response?.next));
            },
        });
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
