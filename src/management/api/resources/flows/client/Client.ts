/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import type { FlowsListRequest } from "./requests/FlowsListRequest.js";
import { BadRequestError } from "../../../errors/BadRequestError.js";
import { UnauthorizedError } from "../../../errors/UnauthorizedError.js";
import { ForbiddenError } from "../../../errors/ForbiddenError.js";
import { TooManyRequestsError } from "../../../errors/TooManyRequestsError.js";
import type { FlowSummary } from "../../../types/FlowSummary.js";
import type { ListFlowsOffsetPaginatedResponseContent } from "../../../types/ListFlowsOffsetPaginatedResponseContent.js";
import type { CreateFlowRequestContent } from "./requests/CreateFlowRequestContent.js";
import type { CreateFlowResponseContent } from "../../../types/CreateFlowResponseContent.js";
import type { GetFlowRequestParameters } from "./requests/GetFlowRequestParameters.js";
import { NotFoundError } from "../../../errors/NotFoundError.js";
import type { GetFlowResponseContent } from "../../../types/GetFlowResponseContent.js";
import type { UpdateFlowRequestContent } from "./requests/UpdateFlowRequestContent.js";
import type { UpdateFlowResponseContent } from "../../../types/UpdateFlowResponseContent.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";
import { Executions } from "../resources/executions/client/Client.js";
import { Vault } from "../resources/vault/client/Client.js";

export declare namespace Flows {
    export interface Options {
        environment?: core.Supplier<environments.ManagementEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Flows {
    protected readonly _options: Flows.Options;
    protected _executions: Executions | undefined;
    protected _vault: Vault | undefined;

    constructor(_options: Flows.Options) {
        this._options = _options;
    }

    public get executions(): Executions {
        return (this._executions ??= new Executions(this._options));
    }

    public get vault(): Vault {
        return (this._vault ??= new Vault(this._options));
    }

    /**
     * @param {FlowsListRequest} request
     * @param {Flows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BadRequestError}
     * @throws {@link UnauthorizedError}
     * @throws {@link ForbiddenError}
     * @throws {@link TooManyRequestsError}
     *
     * @example
     *     await client.flows.list()
     */
    public async list(
        request: FlowsListRequest = {},
        requestOptions?: Flows.RequestOptions,
    ): Promise<core.Page<FlowSummary>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: FlowsListRequest,
            ): Promise<core.WithRawResponse<ListFlowsOffsetPaginatedResponseContent>> => {
                const {
                    page = 0,
                    per_page: perPage = 50,
                    include_totals: includeTotals = true,
                    hydrate,
                    synchronous,
                } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (page != null) {
                    _queryParams["page"] = page.toString();
                }
                if (perPage != null) {
                    _queryParams["per_page"] = perPage.toString();
                }
                if (includeTotals != null) {
                    _queryParams["include_totals"] = includeTotals.toString();
                }
                if (hydrate != null) {
                    if (Array.isArray(hydrate)) {
                        _queryParams["hydrate"] = hydrate.map((item) => item);
                    } else {
                        _queryParams["hydrate"] = hydrate;
                    }
                }
                if (synchronous != null) {
                    _queryParams["synchronous"] = synchronous.toString();
                }
                let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
                    this._options?.headers,
                    mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                    requestOptions?.headers,
                );
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)) ??
                            environments.ManagementEnvironment.Default,
                        "flows",
                    ),
                    method: "GET",
                    headers: _headers,
                    queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as ListFlowsOffsetPaginatedResponseContent,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 400:
                            throw new BadRequestError(_response.error.body as unknown, _response.rawResponse);
                        case 401:
                            throw new UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                        case 403:
                            throw new ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                        case 429:
                            throw new TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                        default:
                            throw new errors.ManagementError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                                rawResponse: _response.rawResponse,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.ManagementError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.ManagementTimeoutError("Timeout exceeded when calling GET /flows.");
                    case "unknown":
                        throw new errors.ManagementError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        let _offset = request?.page != null ? request?.page : 0;
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<ListFlowsOffsetPaginatedResponseContent, FlowSummary>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) => (response?.flows ?? []).length > 0,
            getItems: (response) => response?.flows ?? [],
            loadPage: (_response) => {
                _offset += 1;
                return list(core.setObjectProperty(request, "page", _offset));
            },
        });
    }

    /**
     * @param {CreateFlowRequestContent} request
     * @param {Flows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BadRequestError}
     * @throws {@link UnauthorizedError}
     * @throws {@link ForbiddenError}
     * @throws {@link TooManyRequestsError}
     *
     * @example
     *     await client.flows.create({
     *         name: "name"
     *     })
     */
    public create(
        request: CreateFlowRequestContent,
        requestOptions?: Flows.RequestOptions,
    ): core.HttpResponsePromise<CreateFlowResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: CreateFlowRequestContent,
        requestOptions?: Flows.RequestOptions,
    ): Promise<core.WithRawResponse<CreateFlowResponseContent>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                "flows",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as CreateFlowResponseContent, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError("Timeout exceeded when calling POST /flows.");
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} id - Flow identifier
     * @param {GetFlowRequestParameters} request
     * @param {Flows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BadRequestError}
     * @throws {@link UnauthorizedError}
     * @throws {@link ForbiddenError}
     * @throws {@link NotFoundError}
     * @throws {@link TooManyRequestsError}
     *
     * @example
     *     await client.flows.get("id")
     */
    public get(
        id: string,
        request: GetFlowRequestParameters = {},
        requestOptions?: Flows.RequestOptions,
    ): core.HttpResponsePromise<GetFlowResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__get(id, request, requestOptions));
    }

    private async __get(
        id: string,
        request: GetFlowRequestParameters = {},
        requestOptions?: Flows.RequestOptions,
    ): Promise<core.WithRawResponse<GetFlowResponseContent>> {
        const { hydrate } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (hydrate != null) {
            if (Array.isArray(hydrate)) {
                _queryParams["hydrate"] = hydrate.map((item) => item);
            } else {
                _queryParams["hydrate"] = hydrate;
            }
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                `flows/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as GetFlowResponseContent, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError("Timeout exceeded when calling GET /flows/{id}.");
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} id - Flow id
     * @param {Flows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BadRequestError}
     * @throws {@link UnauthorizedError}
     * @throws {@link ForbiddenError}
     * @throws {@link NotFoundError}
     * @throws {@link TooManyRequestsError}
     *
     * @example
     *     await client.flows.delete("id")
     */
    public delete(id: string, requestOptions?: Flows.RequestOptions): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__delete(id, requestOptions));
    }

    private async __delete(id: string, requestOptions?: Flows.RequestOptions): Promise<core.WithRawResponse<void>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                `flows/${encodeURIComponent(id)}`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError("Timeout exceeded when calling DELETE /flows/{id}.");
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * @param {string} id - Flow identifier
     * @param {UpdateFlowRequestContent} request
     * @param {Flows.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link UnauthorizedError}
     * @throws {@link ForbiddenError}
     * @throws {@link NotFoundError}
     * @throws {@link TooManyRequestsError}
     *
     * @example
     *     await client.flows.update("id")
     */
    public update(
        id: string,
        request: UpdateFlowRequestContent = {},
        requestOptions?: Flows.RequestOptions,
    ): core.HttpResponsePromise<UpdateFlowResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__update(id, request, requestOptions));
    }

    private async __update(
        id: string,
        request: UpdateFlowRequestContent = {},
        requestOptions?: Flows.RequestOptions,
    ): Promise<core.WithRawResponse<UpdateFlowResponseContent>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                `flows/${encodeURIComponent(id)}`,
            ),
            method: "PATCH",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as UpdateFlowResponseContent, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError("Timeout exceeded when calling PATCH /flows/{id}.");
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
