// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../../../BaseClient";
import * as environments from "../../../../../../environments";
import * as core from "../../../../../../core";
import * as Management from "../../../../../index";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers";
import * as errors from "../../../../../../errors/index";

export declare namespace Credentials {
    export interface Options extends BaseClientOptions {}

    export interface RequestOptions extends BaseRequestOptions {}
}

export class Credentials {
    protected readonly _options: Credentials.Options;

    constructor(_options: Credentials.Options) {
        this._options = _options;
    }

    /**
     * Get the details of a client credential.
     *
     * <b>Important</b>: To enable credentials to be used for a client authentication method, set the <code>client_authentication_methods</code> property on the client. To enable credentials to be used for JWT-Secured Authorization requests set the <code>signed_request_object</code> property on the client.
     *
     * @param {string} clientId - ID of the client.
     * @param {Credentials.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Management.UnauthorizedError}
     * @throws {@link Management.ForbiddenError}
     * @throws {@link Management.NotFoundError}
     * @throws {@link Management.TooManyRequestsError}
     *
     * @example
     *     await client.clients.credentials.list("client_id")
     */
    public list(
        clientId: string,
        requestOptions?: Credentials.RequestOptions,
    ): core.HttpResponsePromise<Management.ClientCredential[]> {
        return core.HttpResponsePromise.fromPromise(this.__list(clientId, requestOptions));
    }

    private async __list(
        clientId: string,
        requestOptions?: Credentials.RequestOptions,
    ): Promise<core.WithRawResponse<Management.ClientCredential[]>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                `clients/${encodeURIComponent(clientId)}/credentials`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Management.ClientCredential[], rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Management.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Management.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Management.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Management.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError(
                    "Timeout exceeded when calling GET /clients/{client_id}/credentials.",
                );
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Create a client credential associated to your application. Credentials can be used to configure Private Key JWT and mTLS authentication methods, as well as for JWT-secured Authorization requests.
     *
     * <h5>Public Key</h5>Public Key credentials can be used to set up Private Key JWT client authentication and JWT-secured Authorization requests.
     *
     * Sample: <pre><code>{
     *   "credential_type": "public_key",
     *   "name": "string",
     *   "pem": "string",
     *   "alg": "RS256",
     *   "parse_expiry_from_cert": false,
     *   "expires_at": "2022-12-31T23:59:59Z"
     * }</code></pre>
     * <h5>Certificate (CA-signed & self-signed)</h5>Certificate credentials can be used to set up mTLS client authentication. CA-signed certificates can be configured either with a signed certificate or with just the certificate Subject DN.
     *
     * CA-signed Certificate Sample (pem): <pre><code>{
     *   "credential_type": "x509_cert",
     *   "name": "string",
     *   "pem": "string"
     * }</code></pre>CA-signed Certificate Sample (subject_dn): <pre><code>{
     *   "credential_type": "cert_subject_dn",
     *   "name": "string",
     *   "subject_dn": "string"
     * }</code></pre>Self-signed Certificate Sample: <pre><code>{
     *   "credential_type": "cert_subject_dn",
     *   "name": "string",
     *   "pem": "string"
     * }</code></pre>
     *
     * The credential will be created but not yet enabled for use until you set the corresponding properties in the client:
     * <ul>
     *   <li>To enable the credential for Private Key JWT or mTLS authentication methods, set the <code>client_authentication_methods</code> property on the client. For more information, read <a href="https://auth0.com/docs/get-started/applications/configure-private-key-jwt">Configure Private Key JWT Authentication</a> and <a href="https://auth0.com/docs/get-started/applications/configure-mtls">Configure mTLS Authentication</a></li>
     *   <li>To enable the credential for JWT-secured Authorization requests, set the <code>signed_request_object</code>property on the client. For more information, read <a href="https://auth0.com/docs/get-started/applications/configure-jar">Configure JWT-secured Authorization Requests (JAR)</a></li>
     * </ul>
     *
     * @param {string} clientId - ID of the client.
     * @param {Management.PostClientCredentialRequestContent} request
     * @param {Credentials.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Management.BadRequestError}
     * @throws {@link Management.UnauthorizedError}
     * @throws {@link Management.ForbiddenError}
     * @throws {@link Management.NotFoundError}
     * @throws {@link Management.TooManyRequestsError}
     *
     * @example
     *     await client.clients.credentials.create("client_id", {
     *         credential_type: "public_key"
     *     })
     */
    public create(
        clientId: string,
        request: Management.PostClientCredentialRequestContent,
        requestOptions?: Credentials.RequestOptions,
    ): core.HttpResponsePromise<Management.PostClientCredentialResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__create(clientId, request, requestOptions));
    }

    private async __create(
        clientId: string,
        request: Management.PostClientCredentialRequestContent,
        requestOptions?: Credentials.RequestOptions,
    ): Promise<core.WithRawResponse<Management.PostClientCredentialResponseContent>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                `clients/${encodeURIComponent(clientId)}/credentials`,
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Management.PostClientCredentialResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Management.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Management.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Management.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Management.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Management.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError(
                    "Timeout exceeded when calling POST /clients/{client_id}/credentials.",
                );
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Get the details of a client credential.
     *
     * <b>Important</b>: To enable credentials to be used for a client authentication method, set the <code>client_authentication_methods</code> property on the client. To enable credentials to be used for JWT-Secured Authorization requests set the <code>signed_request_object</code> property on the client.
     *
     * @param {string} clientId - ID of the client.
     * @param {string} credentialId - ID of the credential.
     * @param {Credentials.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Management.UnauthorizedError}
     * @throws {@link Management.ForbiddenError}
     * @throws {@link Management.NotFoundError}
     * @throws {@link Management.TooManyRequestsError}
     *
     * @example
     *     await client.clients.credentials.get("client_id", "credential_id")
     */
    public get(
        clientId: string,
        credentialId: string,
        requestOptions?: Credentials.RequestOptions,
    ): core.HttpResponsePromise<Management.GetClientCredentialResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__get(clientId, credentialId, requestOptions));
    }

    private async __get(
        clientId: string,
        credentialId: string,
        requestOptions?: Credentials.RequestOptions,
    ): Promise<core.WithRawResponse<Management.GetClientCredentialResponseContent>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                `clients/${encodeURIComponent(clientId)}/credentials/${encodeURIComponent(credentialId)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Management.GetClientCredentialResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Management.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Management.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Management.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Management.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError(
                    "Timeout exceeded when calling GET /clients/{client_id}/credentials/{credential_id}.",
                );
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Delete a client credential you previously created. May be enabled or disabled. For more information, read <a href="https://www.auth0.com/docs/get-started/authentication-and-authorization-flow/client-credentials-flow">Client Credential Flow</a>.
     *
     * @param {string} clientId - ID of the client.
     * @param {string} credentialId - ID of the credential to delete.
     * @param {Credentials.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Management.BadRequestError}
     * @throws {@link Management.UnauthorizedError}
     * @throws {@link Management.ForbiddenError}
     * @throws {@link Management.TooManyRequestsError}
     *
     * @example
     *     await client.clients.credentials.delete("client_id", "credential_id")
     */
    public delete(
        clientId: string,
        credentialId: string,
        requestOptions?: Credentials.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__delete(clientId, credentialId, requestOptions));
    }

    private async __delete(
        clientId: string,
        credentialId: string,
        requestOptions?: Credentials.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                `clients/${encodeURIComponent(clientId)}/credentials/${encodeURIComponent(credentialId)}`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Management.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Management.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Management.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Management.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError(
                    "Timeout exceeded when calling DELETE /clients/{client_id}/credentials/{credential_id}.",
                );
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Change a client credential you previously created. May be enabled or disabled. For more information, read <a href="https://www.auth0.com/docs/get-started/authentication-and-authorization-flow/client-credentials-flow">Client Credential Flow</a>.
     *
     * @param {string} clientId - ID of the client.
     * @param {string} credentialId - ID of the credential.
     * @param {Management.PatchClientCredentialRequestContent} request
     * @param {Credentials.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Management.BadRequestError}
     * @throws {@link Management.UnauthorizedError}
     * @throws {@link Management.ForbiddenError}
     * @throws {@link Management.NotFoundError}
     * @throws {@link Management.TooManyRequestsError}
     *
     * @example
     *     await client.clients.credentials.update("client_id", "credential_id")
     */
    public update(
        clientId: string,
        credentialId: string,
        request: Management.PatchClientCredentialRequestContent = {},
        requestOptions?: Credentials.RequestOptions,
    ): core.HttpResponsePromise<Management.PatchClientCredentialResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__update(clientId, credentialId, request, requestOptions));
    }

    private async __update(
        clientId: string,
        credentialId: string,
        request: Management.PatchClientCredentialRequestContent = {},
        requestOptions?: Credentials.RequestOptions,
    ): Promise<core.WithRawResponse<Management.PatchClientCredentialResponseContent>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                `clients/${encodeURIComponent(clientId)}/credentials/${encodeURIComponent(credentialId)}`,
            ),
            method: "PATCH",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Management.PatchClientCredentialResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Management.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Management.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Management.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Management.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Management.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError(
                    "Timeout exceeded when calling PATCH /clients/{client_id}/credentials/{credential_id}.",
                );
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
