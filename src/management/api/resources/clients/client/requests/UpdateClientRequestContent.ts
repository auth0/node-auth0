/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as Management from "../../../../index.js";

/**
 * @example
 *     {}
 */
export interface UpdateClientRequestContent {
    /** The name of the client. Must contain at least one character. Does not allow '<' or '>'. */
    name?: string;
    /** Free text description of the purpose of the Client. (Max character length: <code>140</code>) */
    description?: string;
    /** The secret used to sign tokens for the client */
    client_secret?: string;
    /** The URL of the client logo (recommended size: 150x150) */
    logo_uri?: string;
    /** A set of URLs that are valid to call back from Auth0 when authenticating users */
    callbacks?: string[];
    oidc_logout?: Management.ClientOidcBackchannelLogoutSettings;
    oidc_backchannel_logout?: Management.ClientOidcBackchannelLogoutSettings;
    session_transfer?: Management.ClientSessionTransferConfiguration;
    /** A set of URLs that represents valid origins for CORS */
    allowed_origins?: string[];
    /** A set of URLs that represents valid web origins for use with web message response mode */
    web_origins?: string[];
    /** A set of grant types that the client is authorized to use. Can include `authorization_code`, `implicit`, `refresh_token`, `client_credentials`, `password`, `http://auth0.com/oauth/grant-type/password-realm`, `http://auth0.com/oauth/grant-type/mfa-oob`, `http://auth0.com/oauth/grant-type/mfa-otp`, `http://auth0.com/oauth/grant-type/mfa-recovery-code`, `urn:openid:params:grant-type:ciba`, and `urn:ietf:params:oauth:grant-type:device_code`. */
    grant_types?: string[];
    /** List of audiences for SAML protocol */
    client_aliases?: string[];
    /** Ids of clients that will be allowed to perform delegation requests. Clients that will be allowed to make delegation request. By default, all your clients will be allowed. This field allows you to specify specific clients */
    allowed_clients?: string[];
    /** URLs that are valid to redirect to after logout from Auth0. */
    allowed_logout_urls?: string[];
    jwt_configuration?: Management.ClientJwtConfiguration;
    encryption_key?: Management.ClientEncryptionKey;
    /** <code>true</code> to use Auth0 instead of the IdP to do Single Sign On, <code>false</code> otherwise (default: <code>false</code>) */
    sso?: boolean;
    /** <code>true</code> if this client can be used to make cross-origin authentication requests, <code>false</code> otherwise if cross origin is disabled */
    cross_origin_authentication?: boolean;
    /** URL for the location in your site where the cross origin verification takes place for the cross-origin auth flow when performing Auth in your own domain instead of Auth0 hosted login page. */
    cross_origin_loc?: string;
    /** <code>true</code> to disable Single Sign On, <code>false</code> otherwise (default: <code>false</code>) */
    sso_disabled?: boolean;
    /** <code>true</code> if the custom login page is to be used, <code>false</code> otherwise. */
    custom_login_page_on?: boolean;
    token_endpoint_auth_method?: Management.ClientTokenEndpointAuthMethodOrNullEnum | undefined;
    app_type?: Management.ClientAppTypeEnum;
    /** Whether this client a first party client or not */
    is_first_party?: boolean;
    /** Whether this client will conform to strict OIDC specifications */
    oidc_conformant?: boolean;
    /** The content (HTML, CSS, JS) of the custom login page */
    custom_login_page?: string;
    custom_login_page_preview?: string;
    token_quota?: Management.UpdateTokenQuota;
    /** Form template for WS-Federation protocol */
    form_template?: string;
    addons?: Management.ClientAddons;
    client_metadata?: Management.ClientMetadata;
    mobile?: Management.ClientMobile;
    /** Initiate login uri, must be https */
    initiate_login_uri?: string;
    native_social_login?: Management.NativeSocialLogin;
    refresh_token?: Management.ClientRefreshTokenConfiguration;
    default_organization?: Management.ClientDefaultOrganization;
    /** Defines how to proceed during an authentication transaction with regards an organization. Can be `deny` (default), `allow` or `require`. */
    organization_usage?: string;
    /** Defines how to proceed during an authentication transaction when `client.organization_usage: 'require'`. Can be `no_prompt` (default), `pre_login_prompt` or `post_login_prompt`. `post_login_prompt` requires `oidc_conformant: true`. */
    organization_require_behavior?: string;
    client_authentication_methods?: Management.ClientAuthenticationMethod;
    /** Makes the use of Pushed Authorization Requests mandatory for this client */
    require_pushed_authorization_requests?: boolean;
    /** Makes the use of Proof-of-Possession mandatory for this client */
    require_proof_of_possession?: boolean;
    signed_request_object?: Management.ClientSignedRequestObjectWithCredentialId;
    compliance_level?: Management.ClientComplianceLevelEnum | undefined;
    /** Specifies how long, in seconds, a Pushed Authorization Request URI remains valid */
    par_request_expiry?: number;
}
