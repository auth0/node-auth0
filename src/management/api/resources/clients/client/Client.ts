// This file was auto-generated by Fern from our API Definition.

import type { BaseClientOptions, BaseRequestOptions } from "../../../../BaseClient.js";
import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Management from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";
import { Credentials } from "../resources/credentials/client/Client.js";
import { Connections } from "../resources/connections/client/Client.js";

export declare namespace Clients {
    export interface Options extends BaseClientOptions {}

    export interface RequestOptions extends BaseRequestOptions {}
}

export class Clients {
    protected readonly _options: Clients.Options;
    protected _credentials: Credentials | undefined;
    protected _connections: Connections | undefined;

    constructor(_options: Clients.Options) {
        this._options = _options;
    }

    public get credentials(): Credentials {
        return (this._credentials ??= new Credentials(this._options));
    }

    public get connections(): Connections {
        return (this._connections ??= new Connections(this._options));
    }

    /**
     * Retrieve clients (applications and SSO integrations) matching provided filters. A list of fields to include or exclude may also be specified.
     * For more information, read <a href="https://www.auth0.com/docs/get-started/applications"> Applications in Auth0</a> and <a href="https://www.auth0.com/docs/authenticate/single-sign-on"> Single Sign-On</a>.
     *
     * <ul>
     *   <li>
     *     The following can be retrieved with any scope:
     *     <code>client_id</code>, <code>app_type</code>, <code>name</code>, and <code>description</code>.
     *   </li>
     *   <li>
     *     The following properties can only be retrieved with the <code>read:clients</code> or
     *     <code>read:client_keys</code> scope:
     *     <code>callbacks</code>, <code>oidc_logout</code>, <code>allowed_origins</code>,
     *     <code>web_origins</code>, <code>tenant</code>, <code>global</code>, <code>config_route</code>,
     *     <code>callback_url_template</code>, <code>jwt_configuration</code>,
     *     <code>jwt_configuration.lifetime_in_seconds</code>, <code>jwt_configuration.secret_encoded</code>,
     *     <code>jwt_configuration.scopes</code>, <code>jwt_configuration.alg</code>, <code>api_type</code>,
     *     <code>logo_uri</code>, <code>allowed_clients</code>, <code>owners</code>, <code>custom_login_page</code>,
     *     <code>custom_login_page_off</code>, <code>sso</code>, <code>addons</code>, <code>form_template</code>,
     *     <code>custom_login_page_codeview</code>, <code>resource_servers</code>, <code>client_metadata</code>,
     *     <code>mobile</code>, <code>mobile.android</code>, <code>mobile.ios</code>, <code>allowed_logout_urls</code>,
     *     <code>token_endpoint_auth_method</code>, <code>is_first_party</code>, <code>oidc_conformant</code>,
     *     <code>is_token_endpoint_ip_header_trusted</code>, <code>initiate_login_uri</code>, <code>grant_types</code>,
     *     <code>refresh_token</code>, <code>refresh_token.rotation_type</code>, <code>refresh_token.expiration_type</code>,
     *     <code>refresh_token.leeway</code>, <code>refresh_token.token_lifetime</code>, <code>refresh_token.policies</code>, <code>organization_usage</code>,
     *     <code>organization_require_behavior</code>.
     *   </li>
     *   <li>
     *     The following properties can only be retrieved with the
     *     <code>read:client_keys</code> or <code>read:client_credentials</code> scope:
     *     <code>encryption_key</code>, <code>encryption_key.pub</code>, <code>encryption_key.cert</code>,
     *     <code>client_secret</code>, <code>client_authentication_methods</code> and <code>signing_key</code>.
     *   </li>
     * </ul>
     *
     * @param {Management.ListClientsRequestParameters} request
     * @param {Clients.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Management.BadRequestError}
     * @throws {@link Management.UnauthorizedError}
     * @throws {@link Management.ForbiddenError}
     * @throws {@link Management.TooManyRequestsError}
     *
     * @example
     *     await client.clients.list({
     *         fields: "fields",
     *         include_fields: true,
     *         page: 1,
     *         per_page: 1,
     *         include_totals: true,
     *         is_global: true,
     *         is_first_party: true,
     *         app_type: "app_type",
     *         q: "q"
     *     })
     */
    public async list(
        request: Management.ListClientsRequestParameters = {},
        requestOptions?: Clients.RequestOptions,
    ): Promise<core.Page<Management.Client, Management.ListClientsOffsetPaginatedResponseContent>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: Management.ListClientsRequestParameters,
            ): Promise<core.WithRawResponse<Management.ListClientsOffsetPaginatedResponseContent>> => {
                const _metadata: core.EndpointMetadata = {
                    security: [
                        { bearerAuth: [] },
                        {
                            oAuth2ClientCredentials: [
                                "read:clients",
                                "read:client_keys",
                                "read:client_credentials",
                                "read:client_summary",
                            ],
                        },
                    ],
                };
                const {
                    fields,
                    include_fields: includeFields,
                    page = 0,
                    per_page: perPage = 50,
                    include_totals: includeTotals = true,
                    is_global: isGlobal,
                    is_first_party: isFirstParty,
                    app_type: appType,
                    q,
                } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (fields !== undefined) {
                    _queryParams["fields"] = fields;
                }
                if (includeFields !== undefined) {
                    _queryParams["include_fields"] = includeFields?.toString() ?? null;
                }
                if (page !== undefined) {
                    _queryParams["page"] = page?.toString() ?? null;
                }
                if (perPage !== undefined) {
                    _queryParams["per_page"] = perPage?.toString() ?? null;
                }
                if (includeTotals !== undefined) {
                    _queryParams["include_totals"] = includeTotals?.toString() ?? null;
                }
                if (isGlobal !== undefined) {
                    _queryParams["is_global"] = isGlobal?.toString() ?? null;
                }
                if (isFirstParty !== undefined) {
                    _queryParams["is_first_party"] = isFirstParty?.toString() ?? null;
                }
                if (appType !== undefined) {
                    _queryParams["app_type"] = appType;
                }
                if (q !== undefined) {
                    _queryParams["q"] = q;
                }
                let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
                    this._options?.headers,
                    mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader(_metadata) }),
                    requestOptions?.headers,
                );
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)) ??
                            environments.ManagementEnvironment.Default,
                        "clients",
                    ),
                    method: "GET",
                    headers: _headers,
                    queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
                    timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
                    maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                    endpointMetadata: _metadata,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as Management.ListClientsOffsetPaginatedResponseContent,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 400:
                            throw new Management.BadRequestError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 401:
                            throw new Management.UnauthorizedError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        case 403:
                            throw new Management.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                        case 429:
                            throw new Management.TooManyRequestsError(
                                _response.error.body as unknown,
                                _response.rawResponse,
                            );
                        default:
                            throw new errors.ManagementError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                                rawResponse: _response.rawResponse,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.ManagementError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.ManagementTimeoutError("Timeout exceeded when calling GET /clients.");
                    case "unknown":
                        throw new errors.ManagementError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        let _offset = request?.page != null ? request?.page : 0;
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Page<Management.Client, Management.ListClientsOffsetPaginatedResponseContent>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) => (response?.clients ?? []).length > 0,
            getItems: (response) => response?.clients ?? [],
            loadPage: (_response) => {
                _offset += 1;
                return list(core.setObjectProperty(request, "page", _offset));
            },
        });
    }

    /**
     * Create a new client (application or SSO integration). For more information, read <a href="https://www.auth0.com/docs/get-started/auth0-overview/create-applications">Create Applications</a>
     * <a href="https://www.auth0.com/docs/authenticate/single-sign-on/api-endpoints-for-single-sign-on>">API Endpoints for Single Sign-On</a>.
     *
     * Notes:
     * - We recommend leaving the `client_secret` parameter unspecified to allow the generation of a safe secret.
     * - The <code>client_authentication_methods</code> and <code>token_endpoint_auth_method</code> properties are mutually exclusive. Use
     * <code>client_authentication_methods</code> to configure the client with Private Key JWT authentication method. Otherwise, use <code>token_endpoint_auth_method</code>
     * to configure the client with client secret (basic or post) or with no authentication method (none).
     * - When using <code>client_authentication_methods</code> to configure the client with Private Key JWT authentication method, specify fully defined credentials.
     * These credentials will be automatically enabled for Private Key JWT authentication on the client.
     * - To configure <code>client_authentication_methods</code>, the <code>create:client_credentials</code> scope is required.
     * - To configure <code>client_authentication_methods</code>, the property <code>jwt_configuration.alg</code> must be set to RS256.
     *
     * <div class="alert alert-warning">SSO Integrations created via this endpoint will accept login requests and share user profile information.</div>
     *
     * @param {Management.CreateClientRequestContent} request
     * @param {Clients.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Management.BadRequestError}
     * @throws {@link Management.UnauthorizedError}
     * @throws {@link Management.ForbiddenError}
     * @throws {@link Management.ConflictError}
     * @throws {@link Management.TooManyRequestsError}
     *
     * @example
     *     await client.clients.create({
     *         name: "name"
     *     })
     */
    public create(
        request: Management.CreateClientRequestContent,
        requestOptions?: Clients.RequestOptions,
    ): core.HttpResponsePromise<Management.CreateClientResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Management.CreateClientRequestContent,
        requestOptions?: Clients.RequestOptions,
    ): Promise<core.WithRawResponse<Management.CreateClientResponseContent>> {
        const _metadata: core.EndpointMetadata = {
            security: [{ bearerAuth: [] }, { oAuth2ClientCredentials: ["create:clients"] }],
        };
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader(_metadata) }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                "clients",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
            endpointMetadata: _metadata,
        });
        if (_response.ok) {
            return {
                data: _response.body as Management.CreateClientResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Management.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Management.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Management.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 409:
                    throw new Management.ConflictError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Management.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError("Timeout exceeded when calling POST /clients.");
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve client details by ID. Clients are SSO connections or Applications linked with your Auth0 tenant. A list of fields to include or exclude may also be specified.
     * For more information, read <a href="https://www.auth0.com/docs/get-started/applications"> Applications in Auth0</a> and <a href="https://www.auth0.com/docs/authenticate/single-sign-on"> Single Sign-On</a>.
     * <ul>
     *   <li>
     *     The following properties can be retrieved with any of the scopes:
     *     <code>client_id</code>, <code>app_type</code>, <code>name</code>, and <code>description</code>.
     *   </li>
     *   <li>
     *     The following properties can only be retrieved with the <code>read:clients</code> or
     *     <code>read:client_keys</code> scopes:
     *     <code>callbacks</code>, <code>oidc_logout</code>, <code>allowed_origins</code>,
     *     <code>web_origins</code>, <code>tenant</code>, <code>global</code>, <code>config_route</code>,
     *     <code>callback_url_template</code>, <code>jwt_configuration</code>,
     *     <code>jwt_configuration.lifetime_in_seconds</code>, <code>jwt_configuration.secret_encoded</code>,
     *     <code>jwt_configuration.scopes</code>, <code>jwt_configuration.alg</code>, <code>api_type</code>,
     *     <code>logo_uri</code>, <code>allowed_clients</code>, <code>owners</code>, <code>custom_login_page</code>,
     *     <code>custom_login_page_off</code>, <code>sso</code>, <code>addons</code>, <code>form_template</code>,
     *     <code>custom_login_page_codeview</code>, <code>resource_servers</code>, <code>client_metadata</code>,
     *     <code>mobile</code>, <code>mobile.android</code>, <code>mobile.ios</code>, <code>allowed_logout_urls</code>,
     *     <code>token_endpoint_auth_method</code>, <code>is_first_party</code>, <code>oidc_conformant</code>,
     *     <code>is_token_endpoint_ip_header_trusted</code>, <code>initiate_login_uri</code>, <code>grant_types</code>,
     *     <code>refresh_token</code>, <code>refresh_token.rotation_type</code>, <code>refresh_token.expiration_type</code>,
     *     <code>refresh_token.leeway</code>, <code>refresh_token.token_lifetime</code>, <code>refresh_token.policies</code>, <code>organization_usage</code>,
     *     <code>organization_require_behavior</code>.
     *   </li>
     *   <li>
     *     The following properties can only be retrieved with the <code>read:client_keys</code> or <code>read:client_credentials</code> scopes:
     *     <code>encryption_key</code>, <code>encryption_key.pub</code>, <code>encryption_key.cert</code>,
     *     <code>client_secret</code>, <code>client_authentication_methods</code> and <code>signing_key</code>.
     *   </li>
     * </ul>
     *
     * @param {string} id - ID of the client to retrieve.
     * @param {Management.GetClientRequestParameters} request
     * @param {Clients.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Management.BadRequestError}
     * @throws {@link Management.UnauthorizedError}
     * @throws {@link Management.ForbiddenError}
     * @throws {@link Management.NotFoundError}
     * @throws {@link Management.TooManyRequestsError}
     *
     * @example
     *     await client.clients.get("id", {
     *         fields: "fields",
     *         include_fields: true
     *     })
     */
    public get(
        id: string,
        request: Management.GetClientRequestParameters = {},
        requestOptions?: Clients.RequestOptions,
    ): core.HttpResponsePromise<Management.GetClientResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__get(id, request, requestOptions));
    }

    private async __get(
        id: string,
        request: Management.GetClientRequestParameters = {},
        requestOptions?: Clients.RequestOptions,
    ): Promise<core.WithRawResponse<Management.GetClientResponseContent>> {
        const _metadata: core.EndpointMetadata = {
            security: [
                { bearerAuth: [] },
                {
                    oAuth2ClientCredentials: [
                        "read:clients",
                        "read:client_keys",
                        "read:client_credentials",
                        "read:client_summary",
                    ],
                },
            ],
        };
        const { fields, include_fields: includeFields } = request;
        const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
        if (fields !== undefined) {
            _queryParams["fields"] = fields;
        }

        if (includeFields !== undefined) {
            _queryParams["include_fields"] = includeFields?.toString() ?? null;
        }

        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader(_metadata) }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                `clients/${core.url.encodePathParam(id)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
            endpointMetadata: _metadata,
        });
        if (_response.ok) {
            return { data: _response.body as Management.GetClientResponseContent, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Management.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Management.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Management.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Management.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Management.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError("Timeout exceeded when calling GET /clients/{id}.");
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Delete a client and related configuration (rules, connections, etc).
     *
     * @param {string} id - ID of the client to delete.
     * @param {Clients.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Management.BadRequestError}
     * @throws {@link Management.UnauthorizedError}
     * @throws {@link Management.ForbiddenError}
     * @throws {@link Management.TooManyRequestsError}
     *
     * @example
     *     await client.clients.delete("id")
     */
    public delete(id: string, requestOptions?: Clients.RequestOptions): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__delete(id, requestOptions));
    }

    private async __delete(id: string, requestOptions?: Clients.RequestOptions): Promise<core.WithRawResponse<void>> {
        const _metadata: core.EndpointMetadata = {
            security: [{ bearerAuth: [] }, { oAuth2ClientCredentials: ["delete:clients"] }],
        };
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader(_metadata) }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                `clients/${core.url.encodePathParam(id)}`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
            endpointMetadata: _metadata,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Management.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Management.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Management.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Management.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError("Timeout exceeded when calling DELETE /clients/{id}.");
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Updates a client's settings. For more information, read <a href="https://www.auth0.com/docs/get-started/applications"> Applications in Auth0</a> and <a href="https://www.auth0.com/docs/authenticate/single-sign-on"> Single Sign-On</a>.
     *
     * Notes:
     * - The `client_secret` and `signing_key` attributes can only be updated with the `update:client_keys` scope.
     * - The <code>client_authentication_methods</code> and <code>token_endpoint_auth_method</code> properties are mutually exclusive. Use <code>client_authentication_methods</code> to configure the client with Private Key JWT authentication method. Otherwise, use <code>token_endpoint_auth_method</code> to configure the client with client secret (basic or post) or with no authentication method (none).
     * - When using <code>client_authentication_methods</code> to configure the client with Private Key JWT authentication method, only specify the credential IDs that were generated when creating the credentials on the client.
     * - To configure <code>client_authentication_methods</code>, the <code>update:client_credentials</code> scope is required.
     * - To configure <code>client_authentication_methods</code>, the property <code>jwt_configuration.alg</code> must be set to RS256.
     * - To change a client's <code>is_first_party</code> property to <code>false</code>, the <code>organization_usage</code> and <code>organization_require_behavior</code> properties must be unset.
     *
     * @param {string} id - ID of the client to update.
     * @param {Management.UpdateClientRequestContent} request
     * @param {Clients.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Management.BadRequestError}
     * @throws {@link Management.UnauthorizedError}
     * @throws {@link Management.ForbiddenError}
     * @throws {@link Management.NotFoundError}
     * @throws {@link Management.TooManyRequestsError}
     *
     * @example
     *     await client.clients.update("id")
     */
    public update(
        id: string,
        request: Management.UpdateClientRequestContent = {},
        requestOptions?: Clients.RequestOptions,
    ): core.HttpResponsePromise<Management.UpdateClientResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__update(id, request, requestOptions));
    }

    private async __update(
        id: string,
        request: Management.UpdateClientRequestContent = {},
        requestOptions?: Clients.RequestOptions,
    ): Promise<core.WithRawResponse<Management.UpdateClientResponseContent>> {
        const _metadata: core.EndpointMetadata = {
            security: [
                { bearerAuth: [] },
                { oAuth2ClientCredentials: ["update:clients", "update:client_keys", "update:client_credentials"] },
            ],
        };
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader(_metadata) }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                `clients/${core.url.encodePathParam(id)}`,
            ),
            method: "PATCH",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
            endpointMetadata: _metadata,
        });
        if (_response.ok) {
            return {
                data: _response.body as Management.UpdateClientResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Management.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Management.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Management.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Management.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Management.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError("Timeout exceeded when calling PATCH /clients/{id}.");
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Rotate a client secret.
     *
     * This endpoint cannot be used with clients configured with Private Key JWT authentication method (client_authentication_methods configured with private_key_jwt). The generated secret is NOT base64 encoded.
     *
     * For more information, read <a href="https://www.auth0.com/docs/get-started/applications/rotate-client-secret">Rotate Client Secrets</a>.
     *
     * @param {string} id - ID of the client that will rotate secrets.
     * @param {Clients.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Management.BadRequestError}
     * @throws {@link Management.UnauthorizedError}
     * @throws {@link Management.ForbiddenError}
     * @throws {@link Management.NotFoundError}
     * @throws {@link Management.TooManyRequestsError}
     *
     * @example
     *     await client.clients.rotateSecret("id")
     */
    public rotateSecret(
        id: string,
        requestOptions?: Clients.RequestOptions,
    ): core.HttpResponsePromise<Management.RotateClientSecretResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__rotateSecret(id, requestOptions));
    }

    private async __rotateSecret(
        id: string,
        requestOptions?: Clients.RequestOptions,
    ): Promise<core.WithRawResponse<Management.RotateClientSecretResponseContent>> {
        const _metadata: core.EndpointMetadata = {
            security: [{ bearerAuth: [] }, { oAuth2ClientCredentials: ["update:client_keys"] }],
        };
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader(_metadata) }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                `clients/${core.url.encodePathParam(id)}/rotate-secret`,
            ),
            method: "POST",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: (requestOptions?.timeoutInSeconds ?? this._options?.timeoutInSeconds ?? 60) * 1000,
            maxRetries: requestOptions?.maxRetries ?? this._options?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
            endpointMetadata: _metadata,
        });
        if (_response.ok) {
            return {
                data: _response.body as Management.RotateClientSecretResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Management.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Management.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Management.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Management.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Management.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError(
                    "Timeout exceeded when calling POST /clients/{id}/rotate-secret.",
                );
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(endpointMetadata: core.EndpointMetadata): Promise<string> {
        return `Bearer ${await core.EndpointSupplier.get(this._options.token, { endpointMetadata })}`;
    }
}
