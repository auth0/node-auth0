/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments.js";
import * as core from "../../../../../../core/index.js";
import { BadRequestError } from "../../../../../errors/BadRequestError.js";
import { UnauthorizedError } from "../../../../../errors/UnauthorizedError.js";
import { ForbiddenError } from "../../../../../errors/ForbiddenError.js";
import { NotFoundError } from "../../../../../errors/NotFoundError.js";
import { TooManyRequestsError } from "../../../../../errors/TooManyRequestsError.js";
import type { GetHookSecretResponseContent } from "../../../../../types/GetHookSecretResponseContent.js";
import type { CreateHookSecretRequestContent } from "../../../../../types/CreateHookSecretRequestContent.js";
import { ConflictError } from "../../../../../errors/ConflictError.js";
import type { DeleteHookSecretRequestContent } from "../../../../../types/DeleteHookSecretRequestContent.js";
import type { UpdateHookSecretRequestContent } from "../../../../../types/UpdateHookSecretRequestContent.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";
import * as errors from "../../../../../../errors/index.js";

export declare namespace Secrets {
    export interface Options {
        environment?: core.Supplier<environments.ManagementEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Secrets {
    protected readonly _options: Secrets.Options;

    constructor(_options: Secrets.Options) {
        this._options = _options;
    }

    /**
     * Retrieve a hook's secrets by the ID of the hook.
     *
     * @param {string} id - ID of the hook to retrieve secrets from.
     * @param {Secrets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BadRequestError}
     * @throws {@link UnauthorizedError}
     * @throws {@link ForbiddenError}
     * @throws {@link NotFoundError}
     * @throws {@link TooManyRequestsError}
     *
     * @example
     *     await client.hooks.secrets.get("id")
     */
    public get(
        id: string,
        requestOptions?: Secrets.RequestOptions,
    ): core.HttpResponsePromise<GetHookSecretResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__get(id, requestOptions));
    }

    private async __get(
        id: string,
        requestOptions?: Secrets.RequestOptions,
    ): Promise<core.WithRawResponse<GetHookSecretResponseContent>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                `hooks/${encodeURIComponent(id)}/secrets`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as GetHookSecretResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError("Timeout exceeded when calling GET /hooks/{id}/secrets.");
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Add one or more secrets to an existing hook. Accepts an object of key-value pairs, where the key is the name of the secret. A hook can have a maximum of 20 secrets.
     *
     * @param {string} id - The id of the hook to retrieve
     * @param {CreateHookSecretRequestContent} request
     * @param {Secrets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BadRequestError}
     * @throws {@link UnauthorizedError}
     * @throws {@link ForbiddenError}
     * @throws {@link ConflictError}
     * @throws {@link TooManyRequestsError}
     *
     * @example
     *     await client.hooks.secrets.create("id", {
     *         "key": "value"
     *     })
     */
    public create(
        id: string,
        request: CreateHookSecretRequestContent,
        requestOptions?: Secrets.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__create(id, request, requestOptions));
    }

    private async __create(
        id: string,
        request: CreateHookSecretRequestContent,
        requestOptions?: Secrets.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                `hooks/${encodeURIComponent(id)}/secrets`,
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 409:
                    throw new ConflictError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError("Timeout exceeded when calling POST /hooks/{id}/secrets.");
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Delete one or more existing secrets for a given hook. Accepts an array of secret names to delete.
     *
     * @param {string} id - ID of the hook whose secrets to delete.
     * @param {DeleteHookSecretRequestContent} request
     * @param {Secrets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BadRequestError}
     * @throws {@link UnauthorizedError}
     * @throws {@link ForbiddenError}
     * @throws {@link TooManyRequestsError}
     *
     * @example
     *     await client.hooks.secrets.delete("id", ["string"])
     */
    public delete(
        id: string,
        request: DeleteHookSecretRequestContent,
        requestOptions?: Secrets.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__delete(id, request, requestOptions));
    }

    private async __delete(
        id: string,
        request: DeleteHookSecretRequestContent,
        requestOptions?: Secrets.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                `hooks/${encodeURIComponent(id)}/secrets`,
            ),
            method: "DELETE",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError("Timeout exceeded when calling DELETE /hooks/{id}/secrets.");
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Update one or more existing secrets for an existing hook. Accepts an object of key-value pairs, where the key is the name of the existing secret.
     *
     * @param {string} id - ID of the hook whose secrets to update.
     * @param {UpdateHookSecretRequestContent} request
     * @param {Secrets.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BadRequestError}
     * @throws {@link UnauthorizedError}
     * @throws {@link ForbiddenError}
     * @throws {@link NotFoundError}
     * @throws {@link ConflictError}
     * @throws {@link TooManyRequestsError}
     *
     * @example
     *     await client.hooks.secrets.update("id", {
     *         "key": "value"
     *     })
     */
    public update(
        id: string,
        request: UpdateHookSecretRequestContent,
        requestOptions?: Secrets.RequestOptions,
    ): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__update(id, request, requestOptions));
    }

    private async __update(
        id: string,
        request: UpdateHookSecretRequestContent,
        requestOptions?: Secrets.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                `hooks/${encodeURIComponent(id)}/secrets`,
            ),
            method: "PATCH",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 409:
                    throw new ConflictError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError("Timeout exceeded when calling PATCH /hooks/{id}/secrets.");
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
