/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments.js";
import * as core from "../../../../../../core/index.js";
import * as Management from "../../../../../index.js";
import * as fs from "fs";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";
import * as errors from "../../../../../../errors/index.js";

export declare namespace UsersImports {
    export interface Options {
        environment?: core.Supplier<environments.ManagementEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class UsersImports {
    protected readonly _options: UsersImports.Options;

    constructor(_options: UsersImports.Options) {
        this._options = _options;
    }

    /**
     * Import users from a <a href="https://auth0.com/docs/users/references/bulk-import-database-schema-examples">formatted file</a> into a connection via a long-running job. When importing users, with or without upsert, the `email_verified` is set to `false` when the email address is added or updated. Users must verify their email address. To avoid this behavior, set `email_verified` to `true` in the imported data.
     *
     * @param {Management.jobs.CreateImportUsersRequestContent} request
     * @param {UsersImports.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Management.BadRequestError}
     * @throws {@link Management.UnauthorizedError}
     * @throws {@link Management.ForbiddenError}
     * @throws {@link Management.ContentTooLargeError}
     * @throws {@link Management.TooManyRequestsError}
     * @throws {@link Management.InternalServerError}
     *
     * @example
     *     import { createReadStream } from "fs";
     *     await client.jobs.usersImports.create({
     *         users: fs.createReadStream("/path/to/your/file"),
     *         connection_id: "connection_id"
     *     })
     */
    public create(
        request: Management.jobs.CreateImportUsersRequestContent,
        requestOptions?: UsersImports.RequestOptions,
    ): core.HttpResponsePromise<Management.CreateImportUsersResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Management.jobs.CreateImportUsersRequestContent,
        requestOptions?: UsersImports.RequestOptions,
    ): Promise<core.WithRawResponse<Management.CreateImportUsersResponseContent>> {
        const _request = await core.newFormData();
        await _request.appendFile("users", request.users);
        _request.append("connection_id", request.connection_id);
        if (request.upsert != null) {
            _request.append("upsert", request.upsert.toString());
        }

        if (request.external_id != null) {
            _request.append("external_id", request.external_id);
        }

        if (request.send_completion_email != null) {
            _request.append("send_completion_email", request.send_completion_email.toString());
        }

        const _maybeEncodedRequest = await _request.getRequest();
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                "jobs/users-imports",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({
                    Authorization: await this._getAuthorizationHeader(),
                    ..._maybeEncodedRequest.headers,
                }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            requestType: "file",
            duplex: _maybeEncodedRequest.duplex,
            body: _maybeEncodedRequest.body,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Management.CreateImportUsersResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Management.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Management.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Management.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 413:
                    throw new Management.ContentTooLargeError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Management.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                case 500:
                    throw new Management.InternalServerError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError("Timeout exceeded when calling POST /jobs/users-imports.");
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
