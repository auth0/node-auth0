/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments.js";
import * as core from "../../../../../../core/index.js";
import * as Management from "../../../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";
import * as errors from "../../../../../../errors/index.js";

export declare namespace Themes {
    export interface Options {
        environment?: core.Supplier<environments.ManagementEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Themes {
    protected readonly _options: Themes.Options;

    constructor(_options: Themes.Options) {
        this._options = _options;
    }

    /**
     * Create branding theme.
     *
     * @param {Management.branding.CreateBrandingThemeRequestContent} request
     * @param {Themes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Management.BadRequestError}
     * @throws {@link Management.UnauthorizedError}
     * @throws {@link Management.ForbiddenError}
     * @throws {@link Management.ConflictError}
     * @throws {@link Management.TooManyRequestsError}
     *
     * @example
     *     await client.branding.themes.create({
     *         borders: {
     *             button_border_radius: 1.1,
     *             button_border_weight: 1.1,
     *             buttons_style: "pill",
     *             input_border_radius: 1.1,
     *             input_border_weight: 1.1,
     *             inputs_style: "pill",
     *             show_widget_shadow: true,
     *             widget_border_weight: 1.1,
     *             widget_corner_radius: 1.1
     *         },
     *         colors: {
     *             body_text: "body_text",
     *             error: "error",
     *             header: "header",
     *             icons: "icons",
     *             input_background: "input_background",
     *             input_border: "input_border",
     *             input_filled_text: "input_filled_text",
     *             input_labels_placeholders: "input_labels_placeholders",
     *             links_focused_components: "links_focused_components",
     *             primary_button: "primary_button",
     *             primary_button_label: "primary_button_label",
     *             secondary_button_border: "secondary_button_border",
     *             secondary_button_label: "secondary_button_label",
     *             success: "success",
     *             widget_background: "widget_background",
     *             widget_border: "widget_border"
     *         },
     *         fonts: {
     *             body_text: {
     *                 bold: true,
     *                 size: 1.1
     *             },
     *             buttons_text: {
     *                 bold: true,
     *                 size: 1.1
     *             },
     *             font_url: "font_url",
     *             input_labels: {
     *                 bold: true,
     *                 size: 1.1
     *             },
     *             links: {
     *                 bold: true,
     *                 size: 1.1
     *             },
     *             links_style: "normal",
     *             reference_text_size: 1.1,
     *             subtitle: {
     *                 bold: true,
     *                 size: 1.1
     *             },
     *             title: {
     *                 bold: true,
     *                 size: 1.1
     *             }
     *         },
     *         page_background: {
     *             background_color: "background_color",
     *             background_image_url: "background_image_url",
     *             page_layout: "center"
     *         },
     *         widget: {
     *             header_text_alignment: "center",
     *             logo_height: 1.1,
     *             logo_position: "center",
     *             logo_url: "logo_url",
     *             social_buttons_layout: "bottom"
     *         }
     *     })
     */
    public create(
        request: Management.branding.CreateBrandingThemeRequestContent,
        requestOptions?: Themes.RequestOptions,
    ): core.HttpResponsePromise<Management.CreateBrandingThemeResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Management.branding.CreateBrandingThemeRequestContent,
        requestOptions?: Themes.RequestOptions,
    ): Promise<core.WithRawResponse<Management.CreateBrandingThemeResponseContent>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                "branding/themes",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Management.CreateBrandingThemeResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Management.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Management.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Management.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 409:
                    throw new Management.ConflictError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Management.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError("Timeout exceeded when calling POST /branding/themes.");
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve default branding theme.
     *
     * @param {Themes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Management.UnauthorizedError}
     * @throws {@link Management.ForbiddenError}
     * @throws {@link Management.NotFoundError}
     * @throws {@link Management.TooManyRequestsError}
     *
     * @example
     *     await client.branding.themes.getDefault()
     */
    public getDefault(
        requestOptions?: Themes.RequestOptions,
    ): core.HttpResponsePromise<Management.GetBrandingDefaultThemeResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__getDefault(requestOptions));
    }

    private async __getDefault(
        requestOptions?: Themes.RequestOptions,
    ): Promise<core.WithRawResponse<Management.GetBrandingDefaultThemeResponseContent>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                "branding/themes/default",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Management.GetBrandingDefaultThemeResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Management.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Management.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Management.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Management.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError("Timeout exceeded when calling GET /branding/themes/default.");
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve branding theme.
     *
     * @param {string} themeId - The ID of the theme
     * @param {Themes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Management.UnauthorizedError}
     * @throws {@link Management.ForbiddenError}
     * @throws {@link Management.NotFoundError}
     * @throws {@link Management.TooManyRequestsError}
     *
     * @example
     *     await client.branding.themes.get("themeId")
     */
    public get(
        themeId: string,
        requestOptions?: Themes.RequestOptions,
    ): core.HttpResponsePromise<Management.GetBrandingThemeResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__get(themeId, requestOptions));
    }

    private async __get(
        themeId: string,
        requestOptions?: Themes.RequestOptions,
    ): Promise<core.WithRawResponse<Management.GetBrandingThemeResponseContent>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                `branding/themes/${encodeURIComponent(themeId)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Management.GetBrandingThemeResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Management.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Management.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Management.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Management.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError(
                    "Timeout exceeded when calling GET /branding/themes/{themeId}.",
                );
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Delete branding theme.
     *
     * @param {string} themeId - The ID of the theme
     * @param {Themes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Management.UnauthorizedError}
     * @throws {@link Management.ForbiddenError}
     * @throws {@link Management.NotFoundError}
     * @throws {@link Management.TooManyRequestsError}
     *
     * @example
     *     await client.branding.themes.delete("themeId")
     */
    public delete(themeId: string, requestOptions?: Themes.RequestOptions): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__delete(themeId, requestOptions));
    }

    private async __delete(
        themeId: string,
        requestOptions?: Themes.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                `branding/themes/${encodeURIComponent(themeId)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Management.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Management.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Management.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Management.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError(
                    "Timeout exceeded when calling DELETE /branding/themes/{themeId}.",
                );
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Update branding theme.
     *
     * @param {string} themeId - The ID of the theme
     * @param {Management.branding.UpdateBrandingThemeRequestContent} request
     * @param {Themes.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Management.BadRequestError}
     * @throws {@link Management.UnauthorizedError}
     * @throws {@link Management.ForbiddenError}
     * @throws {@link Management.NotFoundError}
     * @throws {@link Management.TooManyRequestsError}
     *
     * @example
     *     await client.branding.themes.update("themeId", {
     *         borders: {
     *             button_border_radius: 1.1,
     *             button_border_weight: 1.1,
     *             buttons_style: "pill",
     *             input_border_radius: 1.1,
     *             input_border_weight: 1.1,
     *             inputs_style: "pill",
     *             show_widget_shadow: true,
     *             widget_border_weight: 1.1,
     *             widget_corner_radius: 1.1
     *         },
     *         colors: {
     *             body_text: "body_text",
     *             error: "error",
     *             header: "header",
     *             icons: "icons",
     *             input_background: "input_background",
     *             input_border: "input_border",
     *             input_filled_text: "input_filled_text",
     *             input_labels_placeholders: "input_labels_placeholders",
     *             links_focused_components: "links_focused_components",
     *             primary_button: "primary_button",
     *             primary_button_label: "primary_button_label",
     *             secondary_button_border: "secondary_button_border",
     *             secondary_button_label: "secondary_button_label",
     *             success: "success",
     *             widget_background: "widget_background",
     *             widget_border: "widget_border"
     *         },
     *         fonts: {
     *             body_text: {
     *                 bold: true,
     *                 size: 1.1
     *             },
     *             buttons_text: {
     *                 bold: true,
     *                 size: 1.1
     *             },
     *             font_url: "font_url",
     *             input_labels: {
     *                 bold: true,
     *                 size: 1.1
     *             },
     *             links: {
     *                 bold: true,
     *                 size: 1.1
     *             },
     *             links_style: "normal",
     *             reference_text_size: 1.1,
     *             subtitle: {
     *                 bold: true,
     *                 size: 1.1
     *             },
     *             title: {
     *                 bold: true,
     *                 size: 1.1
     *             }
     *         },
     *         page_background: {
     *             background_color: "background_color",
     *             background_image_url: "background_image_url",
     *             page_layout: "center"
     *         },
     *         widget: {
     *             header_text_alignment: "center",
     *             logo_height: 1.1,
     *             logo_position: "center",
     *             logo_url: "logo_url",
     *             social_buttons_layout: "bottom"
     *         }
     *     })
     */
    public update(
        themeId: string,
        request: Management.branding.UpdateBrandingThemeRequestContent,
        requestOptions?: Themes.RequestOptions,
    ): core.HttpResponsePromise<Management.UpdateBrandingThemeResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__update(themeId, request, requestOptions));
    }

    private async __update(
        themeId: string,
        request: Management.branding.UpdateBrandingThemeRequestContent,
        requestOptions?: Themes.RequestOptions,
    ): Promise<core.WithRawResponse<Management.UpdateBrandingThemeResponseContent>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                `branding/themes/${encodeURIComponent(themeId)}`,
            ),
            method: "PATCH",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Management.UpdateBrandingThemeResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Management.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Management.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Management.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Management.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Management.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError(
                    "Timeout exceeded when calling PATCH /branding/themes/{themeId}.",
                );
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
