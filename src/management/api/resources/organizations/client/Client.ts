/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import type { ListOrganizationsRequestParameters } from "./requests/ListOrganizationsRequestParameters.js";
import { BadRequestError } from "../../../errors/BadRequestError.js";
import { UnauthorizedError } from "../../../errors/UnauthorizedError.js";
import { ForbiddenError } from "../../../errors/ForbiddenError.js";
import { TooManyRequestsError } from "../../../errors/TooManyRequestsError.js";
import type { Organization } from "../../../types/Organization.js";
import type { ListOrganizationsPaginatedResponseContent } from "../../../types/ListOrganizationsPaginatedResponseContent.js";
import type { CreateOrganizationRequestContent } from "./requests/CreateOrganizationRequestContent.js";
import { ConflictError } from "../../../errors/ConflictError.js";
import type { CreateOrganizationResponseContent } from "../../../types/CreateOrganizationResponseContent.js";
import type { GetOrganizationByNameResponseContent } from "../../../types/GetOrganizationByNameResponseContent.js";
import type { GetOrganizationResponseContent } from "../../../types/GetOrganizationResponseContent.js";
import { NotFoundError } from "../../../errors/NotFoundError.js";
import type { UpdateOrganizationRequestContent } from "./requests/UpdateOrganizationRequestContent.js";
import type { UpdateOrganizationResponseContent } from "../../../types/UpdateOrganizationResponseContent.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";
import { ClientGrants } from "../resources/clientGrants/client/Client.js";
import { EnabledConnections } from "../resources/enabledConnections/client/Client.js";
import { Invitations } from "../resources/invitations/client/Client.js";
import { Members } from "../resources/members/client/Client.js";

export declare namespace Organizations {
    export interface Options {
        environment?: core.Supplier<environments.ManagementEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Organizations {
    protected readonly _options: Organizations.Options;
    protected _clientGrants: ClientGrants | undefined;
    protected _enabledConnections: EnabledConnections | undefined;
    protected _invitations: Invitations | undefined;
    protected _members: Members | undefined;

    constructor(_options: Organizations.Options) {
        this._options = _options;
    }

    public get clientGrants(): ClientGrants {
        return (this._clientGrants ??= new ClientGrants(this._options));
    }

    public get enabledConnections(): EnabledConnections {
        return (this._enabledConnections ??= new EnabledConnections(this._options));
    }

    public get invitations(): Invitations {
        return (this._invitations ??= new Invitations(this._options));
    }

    public get members(): Members {
        return (this._members ??= new Members(this._options));
    }

    /**
     * Retrieve detailed list of all Organizations available in your tenant. For more information, see Auth0 Organizations.
     *
     * This endpoint supports two types of pagination:
     * <ul>
     * <li>Offset pagination</li>
     * <li>Checkpoint pagination</li>
     * </ul>
     *
     * Checkpoint pagination must be used if you need to retrieve more than 1000 organizations.
     *
     * <h2>Checkpoint Pagination</h2>
     *
     * To search by checkpoint, use the following parameters:
     * <ul>
     * <li><code>from</code>: Optional id from which to start selection.</li>
     * <li><code>take</code>: The total number of entries to retrieve when using the <code>from</code> parameter. Defaults to 50.</li>
     * </ul>
     *
     * <b>Note</b>: The first time you call this endpoint using checkpoint pagination, omit the <code>from</code> parameter. If there are more results, a <code>next</code> value is included in the response. You can use this for subsequent API calls. When <code>next</code> is no longer included in the response, no pages are remaining.
     *
     * @param {ListOrganizationsRequestParameters} request
     * @param {Organizations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BadRequestError}
     * @throws {@link UnauthorizedError}
     * @throws {@link ForbiddenError}
     * @throws {@link TooManyRequestsError}
     *
     * @example
     *     await client.organizations.list()
     */
    public async list(
        request: ListOrganizationsRequestParameters = {},
        requestOptions?: Organizations.RequestOptions,
    ): Promise<core.Page<Organization>> {
        const list = core.HttpResponsePromise.interceptFunction(
            async (
                request: ListOrganizationsRequestParameters,
            ): Promise<core.WithRawResponse<ListOrganizationsPaginatedResponseContent>> => {
                const { from: from_, take = 50, sort } = request;
                const _queryParams: Record<string, string | string[] | object | object[] | null> = {};
                if (from_ != null) {
                    _queryParams["from"] = from_;
                }
                if (take != null) {
                    _queryParams["take"] = take.toString();
                }
                if (sort != null) {
                    _queryParams["sort"] = sort;
                }
                let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
                    this._options?.headers,
                    mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                    requestOptions?.headers,
                );
                const _response = await (this._options.fetcher ?? core.fetcher)({
                    url: core.url.join(
                        (await core.Supplier.get(this._options.baseUrl)) ??
                            (await core.Supplier.get(this._options.environment)) ??
                            environments.ManagementEnvironment.Default,
                        "organizations",
                    ),
                    method: "GET",
                    headers: _headers,
                    queryParameters: { ..._queryParams, ...requestOptions?.queryParams },
                    timeoutMs:
                        requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
                    maxRetries: requestOptions?.maxRetries,
                    abortSignal: requestOptions?.abortSignal,
                });
                if (_response.ok) {
                    return {
                        data: _response.body as ListOrganizationsPaginatedResponseContent,
                        rawResponse: _response.rawResponse,
                    };
                }
                if (_response.error.reason === "status-code") {
                    switch (_response.error.statusCode) {
                        case 400:
                            throw new BadRequestError(_response.error.body as unknown, _response.rawResponse);
                        case 401:
                            throw new UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                        case 403:
                            throw new ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                        case 429:
                            throw new TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                        default:
                            throw new errors.ManagementError({
                                statusCode: _response.error.statusCode,
                                body: _response.error.body,
                                rawResponse: _response.rawResponse,
                            });
                    }
                }
                switch (_response.error.reason) {
                    case "non-json":
                        throw new errors.ManagementError({
                            statusCode: _response.error.statusCode,
                            body: _response.error.rawBody,
                            rawResponse: _response.rawResponse,
                        });
                    case "timeout":
                        throw new errors.ManagementTimeoutError("Timeout exceeded when calling GET /organizations.");
                    case "unknown":
                        throw new errors.ManagementError({
                            message: _response.error.errorMessage,
                            rawResponse: _response.rawResponse,
                        });
                }
            },
        );
        const dataWithRawResponse = await list(request).withRawResponse();
        return new core.Pageable<ListOrganizationsPaginatedResponseContent, Organization>({
            response: dataWithRawResponse.data,
            rawResponse: dataWithRawResponse.rawResponse,
            hasNextPage: (response) =>
                response?.next != null && !(typeof response?.next === "string" && response?.next === ""),
            getItems: (response) => response?.organizations ?? [],
            loadPage: (response) => {
                return list(core.setObjectProperty(request, "from", response?.next));
            },
        });
    }

    /**
     * Create a new Organization within your tenant.  To learn more about Organization settings, behavior, and configuration options, review <a href="https://auth0.com/docs/manage-users/organizations/create-first-organization">Create Your First Organization</a>.
     *
     * @param {CreateOrganizationRequestContent} request
     * @param {Organizations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BadRequestError}
     * @throws {@link UnauthorizedError}
     * @throws {@link ForbiddenError}
     * @throws {@link ConflictError}
     * @throws {@link TooManyRequestsError}
     *
     * @example
     *     await client.organizations.create({
     *         name: "name"
     *     })
     */
    public create(
        request: CreateOrganizationRequestContent,
        requestOptions?: Organizations.RequestOptions,
    ): core.HttpResponsePromise<CreateOrganizationResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: CreateOrganizationRequestContent,
        requestOptions?: Organizations.RequestOptions,
    ): Promise<core.WithRawResponse<CreateOrganizationResponseContent>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                "organizations",
            ),
            method: "POST",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as CreateOrganizationResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 409:
                    throw new ConflictError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError("Timeout exceeded when calling POST /organizations.");
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve details about a single Organization specified by name.
     *
     * @param {string} name - name of the organization to retrieve.
     * @param {Organizations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BadRequestError}
     * @throws {@link UnauthorizedError}
     * @throws {@link ForbiddenError}
     * @throws {@link TooManyRequestsError}
     *
     * @example
     *     await client.organizations.getByName("name")
     */
    public getByName(
        name: string,
        requestOptions?: Organizations.RequestOptions,
    ): core.HttpResponsePromise<GetOrganizationByNameResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__getByName(name, requestOptions));
    }

    private async __getByName(
        name: string,
        requestOptions?: Organizations.RequestOptions,
    ): Promise<core.WithRawResponse<GetOrganizationByNameResponseContent>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                `organizations/name/${encodeURIComponent(name)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as GetOrganizationByNameResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError(
                    "Timeout exceeded when calling GET /organizations/name/{name}.",
                );
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve details about a single Organization specified by ID.
     *
     * @param {string} id - ID of the organization to retrieve.
     * @param {Organizations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BadRequestError}
     * @throws {@link UnauthorizedError}
     * @throws {@link ForbiddenError}
     * @throws {@link TooManyRequestsError}
     *
     * @example
     *     await client.organizations.get("id")
     */
    public get(
        id: string,
        requestOptions?: Organizations.RequestOptions,
    ): core.HttpResponsePromise<GetOrganizationResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__get(id, requestOptions));
    }

    private async __get(
        id: string,
        requestOptions?: Organizations.RequestOptions,
    ): Promise<core.WithRawResponse<GetOrganizationResponseContent>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                `organizations/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as GetOrganizationResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError("Timeout exceeded when calling GET /organizations/{id}.");
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Remove an Organization from your tenant.  This action cannot be undone.
     *
     * <b>Note</b>: Members are automatically disassociated from an Organization when it is deleted. However, this action does <b>not</b> delete these users from your tenant.
     *
     * @param {string} id - Organization identifier.
     * @param {Organizations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BadRequestError}
     * @throws {@link UnauthorizedError}
     * @throws {@link ForbiddenError}
     * @throws {@link NotFoundError}
     * @throws {@link TooManyRequestsError}
     *
     * @example
     *     await client.organizations.delete("id")
     */
    public delete(id: string, requestOptions?: Organizations.RequestOptions): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__delete(id, requestOptions));
    }

    private async __delete(
        id: string,
        requestOptions?: Organizations.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                `organizations/${encodeURIComponent(id)}`,
            ),
            method: "DELETE",
            headers: _headers,
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError("Timeout exceeded when calling DELETE /organizations/{id}.");
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Update the details of a specific <a href="https://auth0.com/docs/manage-users/organizations/configure-organizations/create-organizations">Organization</a>, such as name and display name, branding options, and metadata.
     *
     * @param {string} id - ID of the organization to update.
     * @param {UpdateOrganizationRequestContent} request
     * @param {Organizations.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link BadRequestError}
     * @throws {@link UnauthorizedError}
     * @throws {@link ForbiddenError}
     * @throws {@link TooManyRequestsError}
     *
     * @example
     *     await client.organizations.update("id")
     */
    public update(
        id: string,
        request: UpdateOrganizationRequestContent = {},
        requestOptions?: Organizations.RequestOptions,
    ): core.HttpResponsePromise<UpdateOrganizationResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__update(id, request, requestOptions));
    }

    private async __update(
        id: string,
        request: UpdateOrganizationRequestContent = {},
        requestOptions?: Organizations.RequestOptions,
    ): Promise<core.WithRawResponse<UpdateOrganizationResponseContent>> {
        let _headers: core.Fetcher.Args["headers"] = mergeHeaders(
            this._options?.headers,
            mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
            requestOptions?.headers,
        );
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                `organizations/${encodeURIComponent(id)}`,
            ),
            method: "PATCH",
            headers: _headers,
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as UpdateOrganizationResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError("Timeout exceeded when calling PATCH /organizations/{id}.");
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
