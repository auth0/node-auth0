/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../environments.js";
import * as core from "../../../../core/index.js";
import * as Management from "../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../core/headers.js";
import * as errors from "../../../../errors/index.js";

export declare namespace LogStreams {
    export interface Options {
        environment?: core.Supplier<environments.ManagementEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        token: core.Supplier<core.BearerToken>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional query string parameters to include in the request. */
        queryParams?: Record<string, unknown>;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class LogStreams {
    protected readonly _options: LogStreams.Options;

    constructor(_options: LogStreams.Options) {
        this._options = _options;
    }

    /**
     * Retrieve details on <a href="https://auth0.com/docs/logs/streams">log streams</a>.
     * <h5>Sample Response</h5><pre><code>[{
     * 	"id": "string",
     * 	"name": "string",
     * 	"type": "eventbridge",
     * 	"status": "active|paused|suspended",
     * 	"sink": {
     * 		"awsAccountId": "string",
     * 		"awsRegion": "string",
     * 		"awsPartnerEventSource": "string"
     * 	}
     * }, {
     * 	"id": "string",
     * 	"name": "string",
     * 	"type": "http",
     * 	"status": "active|paused|suspended",
     * 	"sink": {
     * 		"httpContentFormat": "JSONLINES|JSONARRAY",
     * 		"httpContentType": "string",
     * 		"httpEndpoint": "string",
     * 		"httpAuthorization": "string"
     * 	}
     * },
     * {
     * 	"id": "string",
     * 	"name": "string",
     * 	"type": "eventgrid",
     * 	"status": "active|paused|suspended",
     * 	"sink": {
     * 		"azureSubscriptionId": "string",
     * 		"azureResourceGroup": "string",
     * 		"azureRegion": "string",
     * 		"azurePartnerTopic": "string"
     * 	}
     * },
     * {
     * 	"id": "string",
     * 	"name": "string",
     * 	"type": "splunk",
     * 	"status": "active|paused|suspended",
     * 	"sink": {
     * 		"splunkDomain": "string",
     * 		"splunkToken": "string",
     * 		"splunkPort": "string",
     * 		"splunkSecure": "boolean"
     * 	}
     * },
     * {
     * 	"id": "string",
     * 	"name": "string",
     * 	"type": "sumo",
     * 	"status": "active|paused|suspended",
     * 	"sink": {
     * 		"sumoSourceAddress": "string",
     * 	}
     * },
     * {
     * 	"id": "string",
     * 	"name": "string",
     * 	"type": "datadog",
     * 	"status": "active|paused|suspended",
     * 	"sink": {
     * 		"datadogRegion": "string",
     * 		"datadogApiKey": "string"
     * 	}
     * }]</code></pre>
     *
     * @param {LogStreams.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Management.UnauthorizedError}
     * @throws {@link Management.ForbiddenError}
     * @throws {@link Management.NotFoundError}
     * @throws {@link Management.TooManyRequestsError}
     *
     * @example
     *     await client.logStreams.list()
     */
    public list(
        requestOptions?: LogStreams.RequestOptions,
    ): core.HttpResponsePromise<Management.LogStreamResponseSchema[]> {
        return core.HttpResponsePromise.fromPromise(this.__list(requestOptions));
    }

    private async __list(
        requestOptions?: LogStreams.RequestOptions,
    ): Promise<core.WithRawResponse<Management.LogStreamResponseSchema[]>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                "log-streams",
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Management.LogStreamResponseSchema[], rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Management.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Management.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Management.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Management.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError("Timeout exceeded when calling GET /log-streams.");
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Create a log stream.
     * <h5>Log Stream Types</h5> The <code>type</code> of log stream being created determines the properties required in the <code>sink</code> payload.
     * <h5>HTTP Stream</h5> For an <code>http</code> Stream, the <code>sink</code> properties are listed in the payload below
     * Request: <pre><code>{
     * 	"name": "string",
     * 	"type": "http",
     * 	"sink": {
     * 		"httpEndpoint": "string",
     * 		"httpContentType": "string",
     * 		"httpContentFormat": "JSONLINES|JSONARRAY",
     * 		"httpAuthorization": "string"
     * 	}
     * }</code></pre>
     * Response: <pre><code>{
     * 	"id": "string",
     * 	"name": "string",
     * 	"type": "http",
     * 	"status": "active",
     * 	"sink": {
     * 		"httpEndpoint": "string",
     * 		"httpContentType": "string",
     * 		"httpContentFormat": "JSONLINES|JSONARRAY",
     * 		"httpAuthorization": "string"
     * 	}
     * }</code></pre>
     * <h5>Amazon EventBridge Stream</h5> For an <code>eventbridge</code> Stream, the <code>sink</code> properties are listed in the payload below
     * Request: <pre><code>{
     * 	"name": "string",
     * 	"type": "eventbridge",
     * 	"sink": {
     * 		"awsRegion": "string",
     * 		"awsAccountId": "string"
     * 	}
     * }</code></pre>
     * The response will include an additional field <code>awsPartnerEventSource</code> in the <code>sink</code>: <pre><code>{
     * 	"id": "string",
     * 	"name": "string",
     * 	"type": "eventbridge",
     * 	"status": "active",
     * 	"sink": {
     * 		"awsAccountId": "string",
     * 		"awsRegion": "string",
     * 		"awsPartnerEventSource": "string"
     * 	}
     * }</code></pre>
     * <h5>Azure Event Grid Stream</h5> For an <code>Azure Event Grid</code> Stream, the <code>sink</code> properties are listed in the payload below
     * Request: <pre><code>{
     * 	"name": "string",
     * 	"type": "eventgrid",
     * 	"sink": {
     * 		"azureSubscriptionId": "string",
     * 		"azureResourceGroup": "string",
     * 		"azureRegion": "string"
     * 	}
     * }</code></pre>
     * Response: <pre><code>{
     * 	"id": "string",
     * 	"name": "string",
     * 	"type": "http",
     * 	"status": "active",
     * 	"sink": {
     * 		"azureSubscriptionId": "string",
     * 		"azureResourceGroup": "string",
     * 		"azureRegion": "string",
     * 		"azurePartnerTopic": "string"
     * 	}
     * }</code></pre>
     * <h5>Datadog Stream</h5> For a <code>Datadog</code> Stream, the <code>sink</code> properties are listed in the payload below
     * Request: <pre><code>{
     * 	"name": "string",
     * 	"type": "datadog",
     * 	"sink": {
     * 		"datadogRegion": "string",
     * 		"datadogApiKey": "string"
     * 	}
     * }</code></pre>
     * Response: <pre><code>{
     * 	"id": "string",
     * 	"name": "string",
     * 	"type": "datadog",
     * 	"status": "active",
     * 	"sink": {
     * 		"datadogRegion": "string",
     * 		"datadogApiKey": "string"
     * 	}
     * }</code></pre>
     * <h5>Splunk Stream</h5> For a <code>Splunk</code> Stream, the <code>sink</code> properties are listed in the payload below
     * Request: <pre><code>{
     * 	"name": "string",
     * 	"type": "splunk",
     * 	"sink": {
     * 		"splunkDomain": "string",
     * 		"splunkToken": "string",
     * 		"splunkPort": "string",
     * 		"splunkSecure": "boolean"
     * 	}
     * }</code></pre>
     * Response: <pre><code>{
     * 	"id": "string",
     * 	"name": "string",
     * 	"type": "splunk",
     * 	"status": "active",
     * 	"sink": {
     * 		"splunkDomain": "string",
     * 		"splunkToken": "string",
     * 		"splunkPort": "string",
     * 		"splunkSecure": "boolean"
     * 	}
     * }</code></pre>
     * <h5>Sumo Logic Stream</h5> For a <code>Sumo Logic</code> Stream, the <code>sink</code> properties are listed in the payload below
     * Request: <pre><code>{
     * 	"name": "string",
     * 	"type": "sumo",
     * 	"sink": {
     * 		"sumoSourceAddress": "string",
     * 	}
     * }</code></pre>
     * Response: <pre><code>{
     * 	"id": "string",
     * 	"name": "string",
     * 	"type": "sumo",
     * 	"status": "active",
     * 	"sink": {
     * 		"sumoSourceAddress": "string",
     * 	}
     * }</code></pre>
     *
     * @param {Management.CreateLogStreamRequestContent} request
     * @param {LogStreams.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Management.BadRequestError}
     * @throws {@link Management.UnauthorizedError}
     * @throws {@link Management.ForbiddenError}
     * @throws {@link Management.ConflictError}
     * @throws {@link Management.TooManyRequestsError}
     *
     * @example
     *     await client.logStreams.create({
     *         type: "http",
     *         sink: {
     *             httpEndpoint: "httpEndpoint"
     *         }
     *     })
     */
    public create(
        request: Management.CreateLogStreamRequestContent,
        requestOptions?: LogStreams.RequestOptions,
    ): core.HttpResponsePromise<Management.CreateLogStreamResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__create(request, requestOptions));
    }

    private async __create(
        request: Management.CreateLogStreamRequestContent,
        requestOptions?: LogStreams.RequestOptions,
    ): Promise<core.WithRawResponse<Management.CreateLogStreamResponseContent>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                "log-streams",
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Management.CreateLogStreamResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Management.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Management.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Management.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 409:
                    throw new Management.ConflictError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Management.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError("Timeout exceeded when calling POST /log-streams.");
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Retrieve a log stream configuration and status.
     * <h5>Sample responses</h5><h5>Amazon EventBridge Log Stream</h5><pre><code>{
     * 	"id": "string",
     * 	"name": "string",
     * 	"type": "eventbridge",
     * 	"status": "active|paused|suspended",
     * 	"sink": {
     * 		"awsAccountId": "string",
     * 		"awsRegion": "string",
     * 		"awsPartnerEventSource": "string"
     * 	}
     * }</code></pre> <h5>HTTP Log Stream</h5><pre><code>{
     * 	"id": "string",
     * 	"name": "string",
     * 	"type": "http",
     * 	"status": "active|paused|suspended",
     * 	"sink": {
     * 		"httpContentFormat": "JSONLINES|JSONARRAY",
     * 		"httpContentType": "string",
     * 		"httpEndpoint": "string",
     * 		"httpAuthorization": "string"
     * 	}
     * }</code></pre> <h5>Datadog Log Stream</h5><pre><code>{
     * 	"id": "string",
     * 	"name": "string",
     * 	"type": "datadog",
     * 	"status": "active|paused|suspended",
     * 	"sink": {
     * 		"datadogRegion": "string",
     * 		"datadogApiKey": "string"
     * 	}
     *
     * }</code></pre><h5>Mixpanel</h5>
     *
     * 	Request: <pre><code>{
     * 	  "name": "string",
     * 	  "type": "mixpanel",
     * 	  "sink": {
     * 		"mixpanelRegion": "string", // "us" | "eu",
     * 		"mixpanelProjectId": "string",
     * 		"mixpanelServiceAccountUsername": "string",
     * 		"mixpanelServiceAccountPassword": "string"
     * 	  }
     * 	} </code></pre>
     *
     *
     * 	Response: <pre><code>{
     * 		"id": "string",
     * 		"name": "string",
     * 		"type": "mixpanel",
     * 		"status": "active",
     * 		"sink": {
     * 		  "mixpanelRegion": "string", // "us" | "eu",
     * 		  "mixpanelProjectId": "string",
     * 		  "mixpanelServiceAccountUsername": "string",
     * 		  "mixpanelServiceAccountPassword": "string" // the following is redacted on return
     * 		}
     * 	  } </code></pre>
     *
     * 	<h5>Segment</h5>
     *
     * 	Request: <pre><code> {
     * 	  "name": "string",
     * 	  "type": "segment",
     * 	  "sink": {
     * 		"segmentWriteKey": "string"
     * 	  }
     * 	}</code></pre>
     *
     * 	Response: <pre><code>{
     * 	  "id": "string",
     * 	  "name": "string",
     * 	  "type": "segment",
     * 	  "status": "active",
     * 	  "sink": {
     * 		"segmentWriteKey": "string"
     * 	  }
     * 	} </code></pre>
     *
     * <h5>Splunk Log Stream</h5><pre><code>{
     * 	"id": "string",
     * 	"name": "string",
     * 	"type": "splunk",
     * 	"status": "active|paused|suspended",
     * 	"sink": {
     * 		"splunkDomain": "string",
     * 		"splunkToken": "string",
     * 		"splunkPort": "string",
     * 		"splunkSecure": "boolean"
     * 	}
     * }</code></pre> <h5>Sumo Logic Log Stream</h5><pre><code>{
     * 	"id": "string",
     * 	"name": "string",
     * 	"type": "sumo",
     * 	"status": "active|paused|suspended",
     * 	"sink": {
     * 		"sumoSourceAddress": "string",
     * 	}
     * }</code></pre> <h5>Status</h5> The <code>status</code> of a log stream maybe any of the following:
     * 1. <code>active</code> - Stream is currently enabled.
     * 2. <code>paused</code> - Stream is currently user disabled and will not attempt log delivery.
     * 3. <code>suspended</code> - Stream is currently disabled because of errors and will not attempt log delivery.
     *
     * @param {string} id - The id of the log stream to get
     * @param {LogStreams.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Management.UnauthorizedError}
     * @throws {@link Management.ForbiddenError}
     * @throws {@link Management.NotFoundError}
     * @throws {@link Management.TooManyRequestsError}
     *
     * @example
     *     await client.logStreams.get("id")
     */
    public get(
        id: string,
        requestOptions?: LogStreams.RequestOptions,
    ): core.HttpResponsePromise<Management.GetLogStreamResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__get(id, requestOptions));
    }

    private async __get(
        id: string,
        requestOptions?: LogStreams.RequestOptions,
    ): Promise<core.WithRawResponse<Management.GetLogStreamResponseContent>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                `log-streams/${encodeURIComponent(id)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Management.GetLogStreamResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 401:
                    throw new Management.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Management.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Management.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Management.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError("Timeout exceeded when calling GET /log-streams/{id}.");
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Delete a log stream.
     *
     * @param {string} id - The id of the log stream to delete
     * @param {LogStreams.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Management.BadRequestError}
     * @throws {@link Management.UnauthorizedError}
     * @throws {@link Management.ForbiddenError}
     * @throws {@link Management.NotFoundError}
     * @throws {@link Management.TooManyRequestsError}
     *
     * @example
     *     await client.logStreams.delete("id")
     */
    public delete(id: string, requestOptions?: LogStreams.RequestOptions): core.HttpResponsePromise<void> {
        return core.HttpResponsePromise.fromPromise(this.__delete(id, requestOptions));
    }

    private async __delete(
        id: string,
        requestOptions?: LogStreams.RequestOptions,
    ): Promise<core.WithRawResponse<void>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                `log-streams/${encodeURIComponent(id)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            queryParameters: requestOptions?.queryParams,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: undefined, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Management.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Management.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Management.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 404:
                    throw new Management.NotFoundError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Management.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError("Timeout exceeded when calling DELETE /log-streams/{id}.");
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Update a log stream.
     * <h4>Examples of how to use the PATCH endpoint.</h4> The following fields may be updated in a PATCH operation: <ul><li>name</li><li>status</li><li>sink</li></ul> Note: For log streams of type <code>eventbridge</code> and <code>eventgrid</code>, updating the <code>sink</code> is not permitted.
     * <h5>Update the status of a log stream</h5><pre><code>{
     * 	"status": "active|paused"
     * }</code></pre>
     * <h5>Update the name of a log stream</h5><pre><code>{
     * 	"name": "string"
     * }</code></pre>
     * <h5>Update the sink properties of a stream of type <code>http</code></h5><pre><code>{
     *   "sink": {
     *     "httpEndpoint": "string",
     *     "httpContentType": "string",
     *     "httpContentFormat": "JSONARRAY|JSONLINES",
     *     "httpAuthorization": "string"
     *   }
     * }</code></pre>
     * <h5>Update the sink properties of a stream of type <code>datadog</code></h5><pre><code>{
     *   "sink": {
     * 		"datadogRegion": "string",
     * 		"datadogApiKey": "string"
     *   }
     * }</code></pre>
     * <h5>Update the sink properties of a stream of type <code>splunk</code></h5><pre><code>{
     *   "sink": {
     *     "splunkDomain": "string",
     *     "splunkToken": "string",
     *     "splunkPort": "string",
     *     "splunkSecure": "boolean"
     *   }
     * }</code></pre>
     * <h5>Update the sink properties of a stream of type <code>sumo</code></h5><pre><code>{
     *   "sink": {
     *     "sumoSourceAddress": "string"
     *   }
     * }</code></pre>
     *
     * @param {string} id - The id of the log stream to get
     * @param {Management.UpdateLogStreamRequestContent} request
     * @param {LogStreams.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Management.BadRequestError}
     * @throws {@link Management.UnauthorizedError}
     * @throws {@link Management.ForbiddenError}
     * @throws {@link Management.TooManyRequestsError}
     *
     * @example
     *     await client.logStreams.update("id")
     */
    public update(
        id: string,
        request: Management.UpdateLogStreamRequestContent = {},
        requestOptions?: LogStreams.RequestOptions,
    ): core.HttpResponsePromise<Management.UpdateLogStreamResponseContent> {
        return core.HttpResponsePromise.fromPromise(this.__update(id, request, requestOptions));
    }

    private async __update(
        id: string,
        request: Management.UpdateLogStreamRequestContent = {},
        requestOptions?: LogStreams.RequestOptions,
    ): Promise<core.WithRawResponse<Management.UpdateLogStreamResponseContent>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ManagementEnvironment.Default,
                `log-streams/${encodeURIComponent(id)}`,
            ),
            method: "PATCH",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ Authorization: await this._getAuthorizationHeader() }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            queryParameters: requestOptions?.queryParams,
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return {
                data: _response.body as Management.UpdateLogStreamResponseContent,
                rawResponse: _response.rawResponse,
            };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Management.BadRequestError(_response.error.body as unknown, _response.rawResponse);
                case 401:
                    throw new Management.UnauthorizedError(_response.error.body as unknown, _response.rawResponse);
                case 403:
                    throw new Management.ForbiddenError(_response.error.body as unknown, _response.rawResponse);
                case 429:
                    throw new Management.TooManyRequestsError(_response.error.body as unknown, _response.rawResponse);
                default:
                    throw new errors.ManagementError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ManagementError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ManagementTimeoutError("Timeout exceeded when calling PATCH /log-streams/{id}.");
            case "unknown":
                throw new errors.ManagementError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getAuthorizationHeader(): Promise<string> {
        return `Bearer ${await core.Supplier.get(this._options.token)}`;
    }
}
