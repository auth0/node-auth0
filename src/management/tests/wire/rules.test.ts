/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { ManagementClient } from "../../Client.js";

describe("Rules", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name", script: "script" };
        const rawResponseBody = { name: "name", id: "id", enabled: true, script: "script", order: 1.1, stage: "stage" };
        server
            .mockEndpoint()
            .post("/rules")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.rules.create({
            name: "name",
            script: "script",
        });
        expect(response).toEqual({
            name: "name",
            id: "id",
            enabled: true,
            script: "script",
            order: 1.1,
            stage: "stage",
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { name: "name", id: "id", enabled: true, script: "script", order: 1.1, stage: "stage" };
        server.mockEndpoint().get("/rules/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.rules.get("id");
        expect(response).toEqual({
            name: "name",
            id: "id",
            enabled: true,
            script: "script",
            order: 1.1,
            stage: "stage",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/rules/id").respondWith().statusCode(200).build();

        const response = await client.rules.delete("id");
        expect(response).toEqual(undefined);
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { name: "name", id: "id", enabled: true, script: "script", order: 1.1, stage: "stage" };
        server
            .mockEndpoint()
            .patch("/rules/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.rules.update("id");
        expect(response).toEqual({
            name: "name",
            id: "id",
            enabled: true,
            script: "script",
            order: 1.1,
            stage: "stage",
        });
    });
});
