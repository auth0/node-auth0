// This file was auto-generated by Fern from our API Definition.

import * as Management from "../../../../api/index";
import { ManagementClient } from "../../../../Client";
import { mockServerPool } from "../../../mock-server/MockServerPool";

describe("Bindings", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            total: 1.1,
            page: 1.1,
            per_page: 1.1,
            bindings: [
                {
                    id: "id",
                    trigger_id: "trigger_id",
                    display_name: "display_name",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/actions/triggers/triggerId/bindings")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            total: 1.1,
            page: 1.1,
            per_page: 1.1,
            bindings: [
                {
                    id: "id",
                    trigger_id: "trigger_id",
                    display_name: "display_name",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
        };
        const page = await client.actions.triggers.bindings.list("triggerId", {
            page: 1,
            per_page: 1,
        });

        expect(expected.bindings).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.bindings).toEqual(nextPage.data);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/actions/triggers/triggerId/bindings")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.triggers.bindings.list("triggerId");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/actions/triggers/triggerId/bindings")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.triggers.bindings.list("triggerId");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/actions/triggers/triggerId/bindings")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.triggers.bindings.list("triggerId");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("list (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/actions/triggers/triggerId/bindings")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.triggers.bindings.list("triggerId");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("updateMany (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            bindings: [
                {
                    id: "id",
                    trigger_id: "trigger_id",
                    display_name: "display_name",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
        };
        server
            .mockEndpoint()
            .patch("/actions/triggers/triggerId/bindings")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.actions.triggers.bindings.updateMany("triggerId");
        expect(response).toEqual({
            bindings: [
                {
                    id: "id",
                    trigger_id: "trigger_id",
                    display_name: "display_name",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
        });
    });

    test("updateMany (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/actions/triggers/triggerId/bindings")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.triggers.bindings.updateMany("triggerId");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("updateMany (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/actions/triggers/triggerId/bindings")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.triggers.bindings.updateMany("triggerId");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("updateMany (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/actions/triggers/triggerId/bindings")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.triggers.bindings.updateMany("triggerId");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("updateMany (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/actions/triggers/triggerId/bindings")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.triggers.bindings.updateMany("triggerId");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });
});
