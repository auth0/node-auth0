/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../../Client.js";
import * as Management from "../../../../api/index.js";

describe("Bindings", () => {
    test("list (156a812f)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            total: 1.1,
            page: 1.1,
            per_page: 1.1,
            bindings: [
                {
                    id: "id",
                    trigger_id: "trigger_id",
                    display_name: "display_name",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/actions/triggers/triggerId/bindings")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            total: 1.1,
            page: 1.1,
            per_page: 1.1,
            bindings: [
                {
                    id: "id",
                    trigger_id: "trigger_id",
                    display_name: "display_name",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
        };
        const page = await client.actions.triggers.bindings.list("triggerId");
        expect(expected.bindings).toEqual(page.data);

        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.bindings).toEqual(nextPage.data);
    });

    test("list (c6a4d09b)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/actions/triggers/triggerId/bindings")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.triggers.bindings.list("triggerId");
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("list (ab956d4b)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/actions/triggers/triggerId/bindings")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.triggers.bindings.list("triggerId");
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("list (435174f7)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/actions/triggers/triggerId/bindings")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.triggers.bindings.list("triggerId");
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("list (6443ac9f)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/actions/triggers/triggerId/bindings")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.triggers.bindings.list("triggerId");
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });

    test("updateMany (2ea09f96)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            bindings: [
                {
                    id: "id",
                    trigger_id: "trigger_id",
                    display_name: "display_name",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
        };
        server
            .mockEndpoint()
            .patch("/actions/triggers/triggerId/bindings")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.actions.triggers.bindings.updateMany("triggerId");
        expect(response).toEqual({
            bindings: [
                {
                    id: "id",
                    trigger_id: "trigger_id",
                    display_name: "display_name",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
        });
    });

    test("updateMany (effc6602)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { bindings: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/actions/triggers/triggerId/bindings")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.triggers.bindings.updateMany("triggerId", {
                bindings: undefined,
            });
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("updateMany (8fd2f49a)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { bindings: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/actions/triggers/triggerId/bindings")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.triggers.bindings.updateMany("triggerId", {
                bindings: undefined,
            });
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("updateMany (47f2615e)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { bindings: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/actions/triggers/triggerId/bindings")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.triggers.bindings.updateMany("triggerId", {
                bindings: undefined,
            });
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("updateMany (b41a216a)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { bindings: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/actions/triggers/triggerId/bindings")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.triggers.bindings.updateMany("triggerId", {
                bindings: undefined,
            });
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });
});
