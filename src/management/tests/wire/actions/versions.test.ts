// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ManagementClient } from "../../../Client";
import * as Management from "../../../api/index";

describe("Versions", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            total: 1.1,
            page: 1.1,
            per_page: 1.1,
            versions: [
                {
                    id: "id",
                    action_id: "action_id",
                    code: "code",
                    dependencies: [{}],
                    deployed: true,
                    runtime: "runtime",
                    secrets: [{}],
                    status: "pending",
                    number: 1.1,
                    errors: [{}],
                    built_at: "2024-01-15T09:30:00Z",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    supported_triggers: [{ id: "id" }],
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/actions/actions/actionId/versions")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            total: 1.1,
            page: 1.1,
            per_page: 1.1,
            versions: [
                {
                    id: "id",
                    action_id: "action_id",
                    code: "code",
                    dependencies: [{}],
                    deployed: true,
                    runtime: "runtime",
                    secrets: [{}],
                    status: "pending",
                    number: 1.1,
                    errors: [{}],
                    built_at: "2024-01-15T09:30:00Z",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    supported_triggers: [
                        {
                            id: "id",
                        },
                    ],
                },
            ],
        };
        const page = await client.actions.versions.list("actionId", {
            page: 1,
            per_page: 1,
        });

        expect(expected.versions).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.versions).toEqual(nextPage.data);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/actions/actions/actionId/versions")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.versions.list("actionId");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/actions/actions/actionId/versions")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.versions.list("actionId");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/actions/actions/actionId/versions")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.versions.list("actionId");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("list (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/actions/actions/actionId/versions")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.versions.list("actionId");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            action_id: "action_id",
            code: "code",
            dependencies: [{ name: "name", version: "version", registry_url: "registry_url" }],
            deployed: true,
            runtime: "runtime",
            secrets: [{ name: "name", updated_at: "2024-01-15T09:30:00Z" }],
            status: "pending",
            number: 1.1,
            errors: [{ id: "id", msg: "msg", url: "url" }],
            action: {
                id: "id",
                name: "name",
                supported_triggers: [{ id: "id" }],
                all_changes_deployed: true,
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
            },
            built_at: "2024-01-15T09:30:00Z",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            supported_triggers: [
                {
                    id: "id",
                    version: "version",
                    status: "status",
                    runtimes: ["runtimes"],
                    default_runtime: "default_runtime",
                    compatible_triggers: [{ id: "id", version: "version" }],
                    binding_policy: "trigger-bound",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/actions/actions/actionId/versions/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.actions.versions.get("actionId", "id");
        expect(response).toEqual({
            id: "id",
            action_id: "action_id",
            code: "code",
            dependencies: [
                {
                    name: "name",
                    version: "version",
                    registry_url: "registry_url",
                },
            ],
            deployed: true,
            runtime: "runtime",
            secrets: [
                {
                    name: "name",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            status: "pending",
            number: 1.1,
            errors: [
                {
                    id: "id",
                    msg: "msg",
                    url: "url",
                },
            ],
            action: {
                id: "id",
                name: "name",
                supported_triggers: [
                    {
                        id: "id",
                    },
                ],
                all_changes_deployed: true,
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
            },
            built_at: "2024-01-15T09:30:00Z",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            supported_triggers: [
                {
                    id: "id",
                    version: "version",
                    status: "status",
                    runtimes: ["runtimes"],
                    default_runtime: "default_runtime",
                    compatible_triggers: [
                        {
                            id: "id",
                            version: "version",
                        },
                    ],
                    binding_policy: "trigger-bound",
                },
            ],
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/actions/actions/actionId/versions/id")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.versions.get("actionId", "id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/actions/actions/actionId/versions/id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.versions.get("actionId", "id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/actions/actions/actionId/versions/id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.versions.get("actionId", "id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("get (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/actions/actions/actionId/versions/id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.versions.get("actionId", "id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("get (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/actions/actions/actionId/versions/id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.versions.get("actionId", "id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("deploy (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            action_id: "action_id",
            code: "code",
            dependencies: [{ name: "name", version: "version", registry_url: "registry_url" }],
            deployed: true,
            runtime: "runtime",
            secrets: [{ name: "name", updated_at: "2024-01-15T09:30:00Z" }],
            status: "pending",
            number: 1.1,
            errors: [{ id: "id", msg: "msg", url: "url" }],
            action: {
                id: "id",
                name: "name",
                supported_triggers: [{ id: "id" }],
                all_changes_deployed: true,
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
            },
            built_at: "2024-01-15T09:30:00Z",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            supported_triggers: [
                {
                    id: "id",
                    version: "version",
                    status: "status",
                    runtimes: ["runtimes"],
                    default_runtime: "default_runtime",
                    compatible_triggers: [{ id: "id", version: "version" }],
                    binding_policy: "trigger-bound",
                },
            ],
        };
        server
            .mockEndpoint()
            .post("/actions/actions/actionId/versions/id/deploy")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.actions.versions.deploy("actionId", "id");
        expect(response).toEqual({
            id: "id",
            action_id: "action_id",
            code: "code",
            dependencies: [
                {
                    name: "name",
                    version: "version",
                    registry_url: "registry_url",
                },
            ],
            deployed: true,
            runtime: "runtime",
            secrets: [
                {
                    name: "name",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            status: "pending",
            number: 1.1,
            errors: [
                {
                    id: "id",
                    msg: "msg",
                    url: "url",
                },
            ],
            action: {
                id: "id",
                name: "name",
                supported_triggers: [
                    {
                        id: "id",
                    },
                ],
                all_changes_deployed: true,
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
            },
            built_at: "2024-01-15T09:30:00Z",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            supported_triggers: [
                {
                    id: "id",
                    version: "version",
                    status: "status",
                    runtimes: ["runtimes"],
                    default_runtime: "default_runtime",
                    compatible_triggers: [
                        {
                            id: "id",
                            version: "version",
                        },
                    ],
                    binding_policy: "trigger-bound",
                },
            ],
        });
    });

    test("deploy (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/actions/actions/actionId/versions/id/deploy")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.versions.deploy("actionId", "id", undefined);
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("deploy (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/actions/actions/actionId/versions/id/deploy")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.versions.deploy("actionId", "id", undefined);
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("deploy (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/actions/actions/actionId/versions/id/deploy")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.versions.deploy("actionId", "id", undefined);
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("deploy (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/actions/actions/actionId/versions/id/deploy")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.versions.deploy("actionId", "id", undefined);
        }).rejects.toThrow(Management.TooManyRequestsError);
    });
});
