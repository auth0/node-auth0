/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../Client.js";
import * as Management from "../../../api/index.js";

describe("Versions", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            total: 1.1,
            page: 1.1,
            per_page: 1.1,
            versions: [
                {
                    id: "id",
                    action_id: "action_id",
                    code: "code",
                    dependencies: [{}],
                    deployed: true,
                    runtime: "runtime",
                    secrets: [{}],
                    status: "pending",
                    number: 1.1,
                    errors: [{}],
                    built_at: "2024-01-15T09:30:00Z",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    supported_triggers: [{ id: "id" }],
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/actions/actions/actionId/versions")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            total: 1.1,
            page: 1.1,
            per_page: 1.1,
            versions: [
                {
                    id: "id",
                    action_id: "action_id",
                    code: "code",
                    dependencies: [{}],
                    deployed: true,
                    runtime: "runtime",
                    secrets: [{}],
                    status: "pending",
                    number: 1.1,
                    errors: [{}],
                    built_at: "2024-01-15T09:30:00Z",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    supported_triggers: [
                        {
                            id: "id",
                        },
                    ],
                },
            ],
        };
        const page = await client.actions.versions.list("actionId");
        expect(expected.versions).toEqual(page.data);

        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.versions).toEqual(nextPage.data);
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            action_id: "action_id",
            code: "code",
            dependencies: [{ name: "name", version: "version", registry_url: "registry_url" }],
            deployed: true,
            runtime: "runtime",
            secrets: [{ name: "name", updated_at: "2024-01-15T09:30:00Z" }],
            status: "pending",
            number: 1.1,
            errors: [{ id: "id", msg: "msg", url: "url" }],
            action: {
                id: "id",
                name: "name",
                supported_triggers: [{ id: "id" }],
                all_changes_deployed: true,
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
            },
            built_at: "2024-01-15T09:30:00Z",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            supported_triggers: [
                {
                    id: "id",
                    version: "version",
                    status: "status",
                    runtimes: ["runtimes"],
                    default_runtime: "default_runtime",
                    compatible_triggers: [{ id: "id", version: "version" }],
                    binding_policy: "trigger-bound",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/actions/actions/actionId/versions/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.actions.versions.get("actionId", "id");
        expect(response).toEqual({
            id: "id",
            action_id: "action_id",
            code: "code",
            dependencies: [
                {
                    name: "name",
                    version: "version",
                    registry_url: "registry_url",
                },
            ],
            deployed: true,
            runtime: "runtime",
            secrets: [
                {
                    name: "name",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            status: "pending",
            number: 1.1,
            errors: [
                {
                    id: "id",
                    msg: "msg",
                    url: "url",
                },
            ],
            action: {
                id: "id",
                name: "name",
                supported_triggers: [
                    {
                        id: "id",
                    },
                ],
                all_changes_deployed: true,
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
            },
            built_at: "2024-01-15T09:30:00Z",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            supported_triggers: [
                {
                    id: "id",
                    version: "version",
                    status: "status",
                    runtimes: ["runtimes"],
                    default_runtime: "default_runtime",
                    compatible_triggers: [
                        {
                            id: "id",
                            version: "version",
                        },
                    ],
                    binding_policy: "trigger-bound",
                },
            ],
        });
    });

    test("deploy (5f2fffbe)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "12a3b9e6-06e6-4a29-96bf-90c82fe79a0d",
            action_id: "910b1053-577f-4d81-a8c8-020e7319a38a",
            code: "module.exports = () => {}",
            dependencies: [
                { name: "name", version: "version", registry_url: "registry_url" },
                { name: "name", version: "version", registry_url: "registry_url" },
            ],
            deployed: true,
            runtime: "node22",
            secrets: [
                { name: "mySecret", updated_at: "2024-01-15T09:30:00Z" },
                { name: "mySecret", updated_at: "2024-01-15T09:30:00Z" },
            ],
            status: "pending",
            number: 1.1,
            errors: [
                { id: "id", msg: "msg", url: "url" },
                { id: "id", msg: "msg", url: "url" },
            ],
            action: {
                id: "910b1053-577f-4d81-a8c8-020e7319a38a",
                name: "my-action",
                supported_triggers: [
                    {
                        id: "id",
                        version: "version",
                        status: "status",
                        runtimes: ["runtimes", "runtimes"],
                        default_runtime: "default_runtime",
                        compatible_triggers: [
                            { id: "id", version: "version" },
                            { id: "id", version: "version" },
                        ],
                        binding_policy: "trigger-bound",
                    },
                    {
                        id: "id",
                        version: "version",
                        status: "status",
                        runtimes: ["runtimes", "runtimes"],
                        default_runtime: "default_runtime",
                        compatible_triggers: [
                            { id: "id", version: "version" },
                            { id: "id", version: "version" },
                        ],
                        binding_policy: "trigger-bound",
                    },
                ],
                all_changes_deployed: true,
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
            },
            built_at: "2024-01-15T09:30:00Z",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            supported_triggers: [
                {
                    id: "id",
                    version: "version",
                    status: "status",
                    runtimes: ["runtimes", "runtimes"],
                    default_runtime: "default_runtime",
                    compatible_triggers: [
                        { id: "id", version: "version" },
                        { id: "id", version: "version" },
                    ],
                    binding_policy: "trigger-bound",
                },
                {
                    id: "id",
                    version: "version",
                    status: "status",
                    runtimes: ["runtimes", "runtimes"],
                    default_runtime: "default_runtime",
                    compatible_triggers: [
                        { id: "id", version: "version" },
                        { id: "id", version: "version" },
                    ],
                    binding_policy: "trigger-bound",
                },
            ],
        };
        server
            .mockEndpoint()
            .post("/actions/actions/actionId/versions/id/deploy")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.actions.versions.deploy("id", "actionId", undefined);
        expect(response).toEqual({
            id: "12a3b9e6-06e6-4a29-96bf-90c82fe79a0d",
            action_id: "910b1053-577f-4d81-a8c8-020e7319a38a",
            code: "module.exports = () => {}",
            dependencies: [
                {
                    name: "name",
                    version: "version",
                    registry_url: "registry_url",
                },
                {
                    name: "name",
                    version: "version",
                    registry_url: "registry_url",
                },
            ],
            deployed: true,
            runtime: "node22",
            secrets: [
                {
                    name: "mySecret",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                {
                    name: "mySecret",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            status: "pending",
            number: 1.1,
            errors: [
                {
                    id: "id",
                    msg: "msg",
                    url: "url",
                },
                {
                    id: "id",
                    msg: "msg",
                    url: "url",
                },
            ],
            action: {
                id: "910b1053-577f-4d81-a8c8-020e7319a38a",
                name: "my-action",
                supported_triggers: [
                    {
                        id: "id",
                        version: "version",
                        status: "status",
                        runtimes: ["runtimes", "runtimes"],
                        default_runtime: "default_runtime",
                        compatible_triggers: [
                            {
                                id: "id",
                                version: "version",
                            },
                            {
                                id: "id",
                                version: "version",
                            },
                        ],
                        binding_policy: "trigger-bound",
                    },
                    {
                        id: "id",
                        version: "version",
                        status: "status",
                        runtimes: ["runtimes", "runtimes"],
                        default_runtime: "default_runtime",
                        compatible_triggers: [
                            {
                                id: "id",
                                version: "version",
                            },
                            {
                                id: "id",
                                version: "version",
                            },
                        ],
                        binding_policy: "trigger-bound",
                    },
                ],
                all_changes_deployed: true,
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
            },
            built_at: "2024-01-15T09:30:00Z",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            supported_triggers: [
                {
                    id: "id",
                    version: "version",
                    status: "status",
                    runtimes: ["runtimes", "runtimes"],
                    default_runtime: "default_runtime",
                    compatible_triggers: [
                        {
                            id: "id",
                            version: "version",
                        },
                        {
                            id: "id",
                            version: "version",
                        },
                    ],
                    binding_policy: "trigger-bound",
                },
                {
                    id: "id",
                    version: "version",
                    status: "status",
                    runtimes: ["runtimes", "runtimes"],
                    default_runtime: "default_runtime",
                    compatible_triggers: [
                        {
                            id: "id",
                            version: "version",
                        },
                        {
                            id: "id",
                            version: "version",
                        },
                    ],
                    binding_policy: "trigger-bound",
                },
            ],
        });
    });

    test("deploy (b1a577f0)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/actions/actions/actionId/versions/id/deploy")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.versions.deploy("id", "actionId", undefined);
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("deploy (8c564298)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/actions/actions/actionId/versions/id/deploy")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.versions.deploy("id", "actionId", undefined);
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("deploy (b251bf9c)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/actions/actions/actionId/versions/id/deploy")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.versions.deploy("id", "actionId", undefined);
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("deploy (9f001568)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/actions/actions/actionId/versions/id/deploy")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.versions.deploy("id", "actionId", undefined);
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });
});
