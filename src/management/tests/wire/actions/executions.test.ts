// This file was auto-generated by Fern from our API Definition.

import * as Management from "../../../api/index";
import { ManagementClient } from "../../../Client";
import { mockServerPool } from "../../mock-server/MockServerPool";

describe("Executions", () => {
    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            trigger_id: "trigger_id",
            status: "unspecified",
            results: [
                { action_name: "action_name", started_at: "2024-01-15T09:30:00Z", ended_at: "2024-01-15T09:30:00Z" },
            ],
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .get("/actions/executions/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.actions.executions.get("id");
        expect(response).toEqual({
            id: "id",
            trigger_id: "trigger_id",
            status: "unspecified",
            results: [
                {
                    action_name: "action_name",
                    started_at: "2024-01-15T09:30:00Z",
                    ended_at: "2024-01-15T09:30:00Z",
                },
            ],
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/actions/executions/id")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.executions.get("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/actions/executions/id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.executions.get("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/actions/executions/id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.executions.get("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("get (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/actions/executions/id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.executions.get("id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("get (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/actions/executions/id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.executions.get("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });
});
