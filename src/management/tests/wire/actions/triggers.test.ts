// This file was auto-generated by Fern from our API Definition.

import * as Management from "../../../api/index";
import { ManagementClient } from "../../../Client";
import { mockServerPool } from "../../mock-server/MockServerPool";

describe("Triggers", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            triggers: [
                {
                    id: "id",
                    version: "version",
                    status: "status",
                    runtimes: ["runtimes"],
                    default_runtime: "default_runtime",
                    compatible_triggers: [{ id: "id", version: "version" }],
                    binding_policy: "trigger-bound",
                },
            ],
        };
        server.mockEndpoint().get("/actions/triggers").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.actions.triggers.list();
        expect(response).toEqual({
            triggers: [
                {
                    id: "id",
                    version: "version",
                    status: "status",
                    runtimes: ["runtimes"],
                    default_runtime: "default_runtime",
                    compatible_triggers: [
                        {
                            id: "id",
                            version: "version",
                        },
                    ],
                    binding_policy: "trigger-bound",
                },
            ],
        });
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/actions/triggers").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.actions.triggers.list();
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/actions/triggers").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.actions.triggers.list();
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/actions/triggers").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.actions.triggers.list();
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("list (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/actions/triggers").respondWith().statusCode(429).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.actions.triggers.list();
        }).rejects.toThrow(Management.TooManyRequestsError);
    });
});
