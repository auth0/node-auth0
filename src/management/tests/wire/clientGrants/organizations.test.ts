/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../Client.js";

describe("Organizations", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            next: "next",
            organizations: [
                {
                    id: "id",
                    name: "name",
                    display_name: "display_name",
                    metadata: { key: "value" },
                    token_quota: { client_credentials: {} },
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/client-grants/id/organizations")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            next: "next",
            organizations: [
                {
                    id: "id",
                    name: "name",
                    display_name: "display_name",
                    metadata: {
                        key: "value",
                    },
                    token_quota: {
                        client_credentials: {},
                    },
                },
            ],
        };
        const page = await client.clientGrants.organizations.list("id");
        expect(expected.organizations).toEqual(page.data);

        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.organizations).toEqual(nextPage.data);
    });
});
