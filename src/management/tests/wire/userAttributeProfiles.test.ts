// This file was auto-generated by Fern from our API Definition.

import * as Management from "../../api/index";
import { ManagementClient } from "../../Client";
import { mockServerPool } from "../mock-server/MockServerPool";

describe("UserAttributeProfiles", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            next: "next",
            user_attribute_profiles: [
                {
                    id: "id",
                    name: "name",
                    user_attributes: {
                        key: {
                            description: "description",
                            label: "label",
                            profile_required: true,
                            auth0_mapping: "auth0_mapping",
                        },
                    },
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/user-attribute-profiles")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            next: "next",
            user_attribute_profiles: [
                {
                    id: "id",
                    name: "name",
                    user_attributes: {
                        key: {
                            description: "description",
                            label: "label",
                            profile_required: true,
                            auth0_mapping: "auth0_mapping",
                        },
                    },
                },
            ],
        };
        const page = await client.userAttributeProfiles.list({
            from: "from",
            take: 1,
        });

        expect(expected.user_attribute_profiles).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.user_attribute_profiles).toEqual(nextPage.data);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/user-attribute-profiles")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.userAttributeProfiles.list();
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/user-attribute-profiles")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.userAttributeProfiles.list();
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/user-attribute-profiles")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.userAttributeProfiles.list();
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("list (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/user-attribute-profiles")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.userAttributeProfiles.list();
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "name",
            user_attributes: {
                key: {
                    description: "description",
                    label: "label",
                    profile_required: true,
                    auth0_mapping: "auth0_mapping",
                },
            },
        };
        const rawResponseBody = {
            id: "id",
            name: "name",
            user_id: { oidc_mapping: "sub", saml_mapping: ["saml_mapping"], scim_mapping: "scim_mapping" },
            user_attributes: {
                key: {
                    description: "description",
                    label: "label",
                    profile_required: true,
                    auth0_mapping: "auth0_mapping",
                    oidc_mapping: { mapping: "mapping" },
                    saml_mapping: ["saml_mapping"],
                    scim_mapping: "scim_mapping",
                },
            },
        };
        server
            .mockEndpoint()
            .post("/user-attribute-profiles")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.userAttributeProfiles.create({
            name: "name",
            user_attributes: {
                key: {
                    description: "description",
                    label: "label",
                    profile_required: true,
                    auth0_mapping: "auth0_mapping",
                },
            },
        });
        expect(response).toEqual({
            id: "id",
            name: "name",
            user_id: {
                oidc_mapping: "sub",
                saml_mapping: ["saml_mapping"],
                scim_mapping: "scim_mapping",
            },
            user_attributes: {
                key: {
                    description: "description",
                    label: "label",
                    profile_required: true,
                    auth0_mapping: "auth0_mapping",
                    oidc_mapping: {
                        mapping: "mapping",
                    },
                    saml_mapping: ["saml_mapping"],
                    scim_mapping: "scim_mapping",
                },
            },
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "x",
            user_attributes: {
                user_attributes: { description: "x", label: "x", profile_required: true, auth0_mapping: "x" },
            },
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/user-attribute-profiles")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.userAttributeProfiles.create({
                name: "x",
                user_attributes: {
                    user_attributes: {
                        description: "x",
                        label: "x",
                        profile_required: true,
                        auth0_mapping: "x",
                    },
                },
            });
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("create (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "x",
            user_attributes: {
                user_attributes: { description: "x", label: "x", profile_required: true, auth0_mapping: "x" },
            },
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/user-attribute-profiles")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.userAttributeProfiles.create({
                name: "x",
                user_attributes: {
                    user_attributes: {
                        description: "x",
                        label: "x",
                        profile_required: true,
                        auth0_mapping: "x",
                    },
                },
            });
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("create (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "x",
            user_attributes: {
                user_attributes: { description: "x", label: "x", profile_required: true, auth0_mapping: "x" },
            },
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/user-attribute-profiles")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.userAttributeProfiles.create({
                name: "x",
                user_attributes: {
                    user_attributes: {
                        description: "x",
                        label: "x",
                        profile_required: true,
                        auth0_mapping: "x",
                    },
                },
            });
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("create (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "x",
            user_attributes: {
                user_attributes: { description: "x", label: "x", profile_required: true, auth0_mapping: "x" },
            },
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/user-attribute-profiles")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(409)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.userAttributeProfiles.create({
                name: "x",
                user_attributes: {
                    user_attributes: {
                        description: "x",
                        label: "x",
                        profile_required: true,
                        auth0_mapping: "x",
                    },
                },
            });
        }).rejects.toThrow(Management.ConflictError);
    });

    test("create (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "x",
            user_attributes: {
                user_attributes: { description: "x", label: "x", profile_required: true, auth0_mapping: "x" },
            },
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/user-attribute-profiles")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.userAttributeProfiles.create({
                name: "x",
                user_attributes: {
                    user_attributes: {
                        description: "x",
                        label: "x",
                        profile_required: true,
                        auth0_mapping: "x",
                    },
                },
            });
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("listTemplates (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { user_attribute_profile_templates: [{ id: "id", display_name: "display_name" }] };
        server
            .mockEndpoint()
            .get("/user-attribute-profiles/templates")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.userAttributeProfiles.listTemplates();
        expect(response).toEqual({
            user_attribute_profile_templates: [
                {
                    id: "id",
                    display_name: "display_name",
                },
            ],
        });
    });

    test("listTemplates (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/user-attribute-profiles/templates")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.userAttributeProfiles.listTemplates();
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("listTemplates (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/user-attribute-profiles/templates")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.userAttributeProfiles.listTemplates();
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("listTemplates (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/user-attribute-profiles/templates")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.userAttributeProfiles.listTemplates();
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("getTemplate (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            display_name: "display_name",
            template: {
                name: "name",
                user_id: { oidc_mapping: "sub", saml_mapping: ["saml_mapping"], scim_mapping: "scim_mapping" },
                user_attributes: {
                    key: {
                        description: "description",
                        label: "label",
                        profile_required: true,
                        auth0_mapping: "auth0_mapping",
                    },
                },
            },
        };
        server
            .mockEndpoint()
            .get("/user-attribute-profiles/templates/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.userAttributeProfiles.getTemplate("id");
        expect(response).toEqual({
            id: "id",
            display_name: "display_name",
            template: {
                name: "name",
                user_id: {
                    oidc_mapping: "sub",
                    saml_mapping: ["saml_mapping"],
                    scim_mapping: "scim_mapping",
                },
                user_attributes: {
                    key: {
                        description: "description",
                        label: "label",
                        profile_required: true,
                        auth0_mapping: "auth0_mapping",
                    },
                },
            },
        });
    });

    test("getTemplate (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/user-attribute-profiles/templates/id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.userAttributeProfiles.getTemplate("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("getTemplate (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/user-attribute-profiles/templates/id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.userAttributeProfiles.getTemplate("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("getTemplate (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/user-attribute-profiles/templates/id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.userAttributeProfiles.getTemplate("id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("getTemplate (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/user-attribute-profiles/templates/id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.userAttributeProfiles.getTemplate("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            name: "name",
            user_id: { oidc_mapping: "sub", saml_mapping: ["saml_mapping"], scim_mapping: "scim_mapping" },
            user_attributes: {
                key: {
                    description: "description",
                    label: "label",
                    profile_required: true,
                    auth0_mapping: "auth0_mapping",
                    oidc_mapping: { mapping: "mapping" },
                    saml_mapping: ["saml_mapping"],
                    scim_mapping: "scim_mapping",
                },
            },
        };
        server
            .mockEndpoint()
            .get("/user-attribute-profiles/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.userAttributeProfiles.get("id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            user_id: {
                oidc_mapping: "sub",
                saml_mapping: ["saml_mapping"],
                scim_mapping: "scim_mapping",
            },
            user_attributes: {
                key: {
                    description: "description",
                    label: "label",
                    profile_required: true,
                    auth0_mapping: "auth0_mapping",
                    oidc_mapping: {
                        mapping: "mapping",
                    },
                    saml_mapping: ["saml_mapping"],
                    scim_mapping: "scim_mapping",
                },
            },
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/user-attribute-profiles/id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.userAttributeProfiles.get("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/user-attribute-profiles/id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.userAttributeProfiles.get("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/user-attribute-profiles/id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.userAttributeProfiles.get("id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("get (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/user-attribute-profiles/id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.userAttributeProfiles.get("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/user-attribute-profiles/id").respondWith().statusCode(200).build();

        const response = await client.userAttributeProfiles.delete("id");
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/user-attribute-profiles/id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.userAttributeProfiles.delete("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/user-attribute-profiles/id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.userAttributeProfiles.delete("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("delete (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/user-attribute-profiles/id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.userAttributeProfiles.delete("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("update (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            name: "name",
            user_id: { oidc_mapping: "sub", saml_mapping: ["saml_mapping"], scim_mapping: "scim_mapping" },
            user_attributes: {
                key: {
                    description: "description",
                    label: "label",
                    profile_required: true,
                    auth0_mapping: "auth0_mapping",
                    oidc_mapping: { mapping: "mapping" },
                    saml_mapping: ["saml_mapping"],
                    scim_mapping: "scim_mapping",
                },
            },
        };
        server
            .mockEndpoint()
            .patch("/user-attribute-profiles/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.userAttributeProfiles.update("id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            user_id: {
                oidc_mapping: "sub",
                saml_mapping: ["saml_mapping"],
                scim_mapping: "scim_mapping",
            },
            user_attributes: {
                key: {
                    description: "description",
                    label: "label",
                    profile_required: true,
                    auth0_mapping: "auth0_mapping",
                    oidc_mapping: {
                        mapping: "mapping",
                    },
                    saml_mapping: ["saml_mapping"],
                    scim_mapping: "scim_mapping",
                },
            },
        });
    });

    test("update (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/user-attribute-profiles/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.userAttributeProfiles.update("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("update (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/user-attribute-profiles/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.userAttributeProfiles.update("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("update (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/user-attribute-profiles/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.userAttributeProfiles.update("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("update (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/user-attribute-profiles/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.userAttributeProfiles.update("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });
});
