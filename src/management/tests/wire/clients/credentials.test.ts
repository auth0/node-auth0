/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../Client.js";
import * as Management from "../../../api/index.js";

describe("Credentials", () => {
    test("list (ec1cd2b5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "id",
                name: "name",
                kid: "kid",
                alg: "RS256",
                credential_type: "public_key",
                subject_dn: "subject_dn",
                thumbprint_sha256: "thumbprint_sha256",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                expires_at: "2024-01-15T09:30:00Z",
            },
        ];
        server
            .mockEndpoint()
            .get("/clients/client_id/credentials")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.clients.credentials.list("client_id");
        expect(response).toEqual([
            {
                id: "id",
                name: "name",
                kid: "kid",
                alg: "RS256",
                credential_type: "public_key",
                subject_dn: "subject_dn",
                thumbprint_sha256: "thumbprint_sha256",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                expires_at: "2024-01-15T09:30:00Z",
            },
        ]);
    });

    test("list (2000e0cf)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/clients/client_id/credentials")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.credentials.list("client_id");
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("list (ad07341b)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/clients/client_id/credentials")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.credentials.list("client_id");
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("list (4158c5bb)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/clients/client_id/credentials")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.credentials.list("client_id");
        }).rejects.toThrow(
            new Management.NotFoundError({
                key: "value",
            }),
        );
    });

    test("list (977688d3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/clients/client_id/credentials")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.credentials.list("client_id");
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });

    test("create (a42d9a11)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { credential_type: "public_key" };
        const rawResponseBody = {
            id: "id",
            name: "name",
            kid: "kid",
            alg: "RS256",
            credential_type: "public_key",
            subject_dn: "subject_dn",
            thumbprint_sha256: "thumbprint_sha256",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            expires_at: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .post("/clients/client_id/credentials")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.clients.credentials.create("client_id", {
            credential_type: "public_key",
        });
        expect(response).toEqual({
            id: "id",
            name: "name",
            kid: "kid",
            alg: "RS256",
            credential_type: "public_key",
            subject_dn: "subject_dn",
            thumbprint_sha256: "thumbprint_sha256",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            expires_at: "2024-01-15T09:30:00Z",
        });
    });

    test("create (816cb1e6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            credential_type: "public_key",
            name: undefined,
            subject_dn: undefined,
            pem: undefined,
            alg: undefined,
            parse_expiry_from_cert: undefined,
            expires_at: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/clients/client_id/credentials")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.credentials.create("client_id", {
                credential_type: "public_key",
                name: undefined,
                subject_dn: undefined,
                pem: undefined,
                alg: undefined,
                parse_expiry_from_cert: undefined,
                expires_at: undefined,
            });
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("create (a2f9584e)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            credential_type: "public_key",
            name: undefined,
            subject_dn: undefined,
            pem: undefined,
            alg: undefined,
            parse_expiry_from_cert: undefined,
            expires_at: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/clients/client_id/credentials")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.credentials.create("client_id", {
                credential_type: "public_key",
                name: undefined,
                subject_dn: undefined,
                pem: undefined,
                alg: undefined,
                parse_expiry_from_cert: undefined,
                expires_at: undefined,
            });
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("create (b014a0f2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            credential_type: "public_key",
            name: undefined,
            subject_dn: undefined,
            pem: undefined,
            alg: undefined,
            parse_expiry_from_cert: undefined,
            expires_at: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/clients/client_id/credentials")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.credentials.create("client_id", {
                credential_type: "public_key",
                name: undefined,
                subject_dn: undefined,
                pem: undefined,
                alg: undefined,
                parse_expiry_from_cert: undefined,
                expires_at: undefined,
            });
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("create (985718ea)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            credential_type: "public_key",
            name: undefined,
            subject_dn: undefined,
            pem: undefined,
            alg: undefined,
            parse_expiry_from_cert: undefined,
            expires_at: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/clients/client_id/credentials")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.credentials.create("client_id", {
                credential_type: "public_key",
                name: undefined,
                subject_dn: undefined,
                pem: undefined,
                alg: undefined,
                parse_expiry_from_cert: undefined,
                expires_at: undefined,
            });
        }).rejects.toThrow(
            new Management.NotFoundError({
                key: "value",
            }),
        );
    });

    test("create (403cf5ee)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            credential_type: "public_key",
            name: undefined,
            subject_dn: undefined,
            pem: undefined,
            alg: undefined,
            parse_expiry_from_cert: undefined,
            expires_at: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/clients/client_id/credentials")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.credentials.create("client_id", {
                credential_type: "public_key",
                name: undefined,
                subject_dn: undefined,
                pem: undefined,
                alg: undefined,
                parse_expiry_from_cert: undefined,
                expires_at: undefined,
            });
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });

    test("get (5863c725)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            name: "name",
            kid: "kid",
            alg: "RS256",
            credential_type: "public_key",
            subject_dn: "subject_dn",
            thumbprint_sha256: "thumbprint_sha256",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            expires_at: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .get("/clients/client_id/credentials/credential_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.clients.credentials.get("client_id", "credential_id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            kid: "kid",
            alg: "RS256",
            credential_type: "public_key",
            subject_dn: "subject_dn",
            thumbprint_sha256: "thumbprint_sha256",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            expires_at: "2024-01-15T09:30:00Z",
        });
    });

    test("get (144c20b3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/clients/client_id/credentials/credential_id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.credentials.get("client_id", "credential_id");
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("get (6e389f)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/clients/client_id/credentials/credential_id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.credentials.get("client_id", "credential_id");
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("get (8f052c4f)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/clients/client_id/credentials/credential_id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.credentials.get("client_id", "credential_id");
        }).rejects.toThrow(
            new Management.NotFoundError({
                key: "value",
            }),
        );
    });

    test("get (9820b8e7)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/clients/client_id/credentials/credential_id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.credentials.get("client_id", "credential_id");
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });

    test("delete (a6af3a93)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server
            .mockEndpoint()
            .delete("/clients/client_id/credentials/credential_id")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.clients.credentials.delete("client_id", "credential_id");
        expect(response).toEqual(undefined);
    });

    test("delete (7d8cbea3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/clients/client_id/credentials/credential_id")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.credentials.delete("client_id", "credential_id");
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("delete (144c20b3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/clients/client_id/credentials/credential_id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.credentials.delete("client_id", "credential_id");
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("delete (6e389f)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/clients/client_id/credentials/credential_id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.credentials.delete("client_id", "credential_id");
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("delete (9820b8e7)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/clients/client_id/credentials/credential_id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.credentials.delete("client_id", "credential_id");
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });

    test("update (8c223a3c)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            name: "name",
            kid: "kid",
            alg: "RS256",
            credential_type: "public_key",
            subject_dn: "subject_dn",
            thumbprint_sha256: "thumbprint_sha256",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            expires_at: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .patch("/clients/client_id/credentials/credential_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.clients.credentials.update("client_id", "credential_id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            kid: "kid",
            alg: "RS256",
            credential_type: "public_key",
            subject_dn: "subject_dn",
            thumbprint_sha256: "thumbprint_sha256",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            expires_at: "2024-01-15T09:30:00Z",
        });
    });

    test("update (e7025ec8)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { expires_at: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/clients/client_id/credentials/credential_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.credentials.update("client_id", "credential_id", {
                expires_at: undefined,
            });
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("update (2eafea30)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { expires_at: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/clients/client_id/credentials/credential_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.credentials.update("client_id", "credential_id", {
                expires_at: undefined,
            });
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("update (d931a214)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { expires_at: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/clients/client_id/credentials/credential_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.credentials.update("client_id", "credential_id", {
                expires_at: undefined,
            });
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("update (73108bbc)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { expires_at: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/clients/client_id/credentials/credential_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.credentials.update("client_id", "credential_id", {
                expires_at: undefined,
            });
        }).rejects.toThrow(
            new Management.NotFoundError({
                key: "value",
            }),
        );
    });

    test("update (89a14720)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { expires_at: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/clients/client_id/credentials/credential_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.credentials.update("client_id", "credential_id", {
                expires_at: undefined,
            });
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });
});
