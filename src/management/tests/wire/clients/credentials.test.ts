/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../Client.js";

describe("Credentials", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "id",
                name: "name",
                kid: "kid",
                alg: "RS256",
                credential_type: "public_key",
                subject_dn: "subject_dn",
                thumbprint_sha256: "thumbprint_sha256",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                expires_at: "2024-01-15T09:30:00Z",
            },
        ];
        server
            .mockEndpoint()
            .get("/clients/client_id/credentials")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.clients.credentials.list("client_id");
        expect(response).toEqual([
            {
                id: "id",
                name: "name",
                kid: "kid",
                alg: "RS256",
                credential_type: "public_key",
                subject_dn: "subject_dn",
                thumbprint_sha256: "thumbprint_sha256",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                expires_at: "2024-01-15T09:30:00Z",
            },
        ]);
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { credential_type: "public_key" };
        const rawResponseBody = {
            id: "id",
            name: "name",
            kid: "kid",
            alg: "RS256",
            credential_type: "public_key",
            subject_dn: "subject_dn",
            thumbprint_sha256: "thumbprint_sha256",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            expires_at: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .post("/clients/client_id/credentials")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.clients.credentials.create("client_id", {
            credential_type: "public_key",
        });
        expect(response).toEqual({
            id: "id",
            name: "name",
            kid: "kid",
            alg: "RS256",
            credential_type: "public_key",
            subject_dn: "subject_dn",
            thumbprint_sha256: "thumbprint_sha256",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            expires_at: "2024-01-15T09:30:00Z",
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            name: "name",
            kid: "kid",
            alg: "RS256",
            credential_type: "public_key",
            subject_dn: "subject_dn",
            thumbprint_sha256: "thumbprint_sha256",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            expires_at: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .get("/clients/client_id/credentials/credential_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.clients.credentials.get("client_id", "credential_id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            kid: "kid",
            alg: "RS256",
            credential_type: "public_key",
            subject_dn: "subject_dn",
            thumbprint_sha256: "thumbprint_sha256",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            expires_at: "2024-01-15T09:30:00Z",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server
            .mockEndpoint()
            .delete("/clients/client_id/credentials/credential_id")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.clients.credentials.delete("client_id", "credential_id");
        expect(response).toEqual(undefined);
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            name: "name",
            kid: "kid",
            alg: "RS256",
            credential_type: "public_key",
            subject_dn: "subject_dn",
            thumbprint_sha256: "thumbprint_sha256",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            expires_at: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .patch("/clients/client_id/credentials/credential_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.clients.credentials.update("client_id", "credential_id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            kid: "kid",
            alg: "RS256",
            credential_type: "public_key",
            subject_dn: "subject_dn",
            thumbprint_sha256: "thumbprint_sha256",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            expires_at: "2024-01-15T09:30:00Z",
        });
    });
});
