// This file was auto-generated by Fern from our API Definition.

import * as Management from "../../../api/index";
import { ManagementClient } from "../../../Client";
import { mockServerPool } from "../../mock-server/MockServerPool";

describe("Connections", () => {
    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            connections: [
                {
                    name: "name",
                    display_name: "display_name",
                    options: { key: "value" },
                    id: "id",
                    strategy: "strategy",
                    realms: ["realms"],
                    is_domain_connection: true,
                    show_as_button: true,
                },
            ],
            next: "next",
        };
        server
            .mockEndpoint()
            .get("/clients/id/connections")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            connections: [
                {
                    name: "name",
                    display_name: "display_name",
                    options: {
                        key: "value",
                    },
                    id: "id",
                    strategy: "strategy",
                    realms: ["realms"],
                    is_domain_connection: true,
                    show_as_button: true,
                },
            ],
            next: "next",
        };
        const page = await client.clients.connections.get("id", {
            from: "from",
            take: 1,
            fields: "fields",
            include_fields: true,
        });

        expect(expected.connections).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.connections).toEqual(nextPage.data);
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/clients/id/connections")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.connections.get("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/clients/id/connections")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.connections.get("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/clients/id/connections")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.connections.get("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("get (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/clients/id/connections")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.connections.get("id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("get (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/clients/id/connections")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.connections.get("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });
});
