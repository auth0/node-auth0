/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { ManagementClient } from "../../Client.js";

describe("Branding", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            colors: { primary: "primary", page_background: "page_background" },
            favicon_url: "favicon_url",
            logo_url: "logo_url",
            font: { url: "url" },
        };
        server.mockEndpoint().get("/branding").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.branding.get();
        expect(response).toEqual({
            colors: {
                primary: "primary",
                page_background: "page_background",
            },
            favicon_url: "favicon_url",
            logo_url: "logo_url",
            font: {
                url: "url",
            },
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            colors: { primary: "primary", page_background: "page_background" },
            favicon_url: "favicon_url",
            logo_url: "logo_url",
            font: { url: "url" },
        };
        server
            .mockEndpoint()
            .patch("/branding")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.branding.update();
        expect(response).toEqual({
            colors: {
                primary: "primary",
                page_background: "page_background",
            },
            favicon_url: "favicon_url",
            logo_url: "logo_url",
            font: {
                url: "url",
            },
        });
    });
});
