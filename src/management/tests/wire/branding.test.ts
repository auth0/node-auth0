/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { ManagementClient } from "../../Client.js";
import * as Management from "../../api/index.js";

describe("Branding", () => {
    test("get (9ea64d27)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            colors: { primary: "primary", page_background: "page_background" },
            favicon_url: "favicon_url",
            logo_url: "logo_url",
            font: { url: "url" },
        };
        server.mockEndpoint().get("/branding").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.branding.get();
        expect(response).toEqual({
            colors: {
                primary: "primary",
                page_background: "page_background",
            },
            favicon_url: "favicon_url",
            logo_url: "logo_url",
            font: {
                url: "url",
            },
        });
    });

    test("get (1e230aeb)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/branding").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.branding.get();
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("get (af841397)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/branding").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.branding.get();
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("get (ee1e23bf)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/branding").respondWith().statusCode(429).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.branding.get();
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });

    test("update (d3c5e108)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            colors: { primary: "primary", page_background: "page_background" },
            favicon_url: "favicon_url",
            logo_url: "logo_url",
            font: { url: "url" },
        };
        server
            .mockEndpoint()
            .patch("/branding")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.branding.update();
        expect(response).toEqual({
            colors: {
                primary: "primary",
                page_background: "page_background",
            },
            favicon_url: "favicon_url",
            logo_url: "logo_url",
            font: {
                url: "url",
            },
        });
    });

    test("update (5e52e217)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { colors: undefined, favicon_url: undefined, logo_url: undefined, font: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/branding")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.update({
                colors: undefined,
                favicon_url: undefined,
                logo_url: undefined,
                font: undefined,
            });
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("update (f81560e7)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { colors: undefined, favicon_url: undefined, logo_url: undefined, font: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/branding")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.update({
                colors: undefined,
                favicon_url: undefined,
                logo_url: undefined,
                font: undefined,
            });
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("update (e05fcf3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { colors: undefined, favicon_url: undefined, logo_url: undefined, font: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/branding")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.update({
                colors: undefined,
                favicon_url: undefined,
                logo_url: undefined,
                font: undefined,
            });
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("update (b6a397eb)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { colors: undefined, favicon_url: undefined, logo_url: undefined, font: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/branding")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.update({
                colors: undefined,
                favicon_url: undefined,
                logo_url: undefined,
                font: undefined,
            });
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });
});
