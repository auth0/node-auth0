// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../mock-server/MockServerPool";
import { ManagementClient } from "../../Client";
import * as Management from "../../api/index";

describe("Actions", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            total: 1.1,
            page: 1.1,
            per_page: 1.1,
            actions: [
                {
                    id: "id",
                    name: "name",
                    supported_triggers: [{ id: "id" }],
                    all_changes_deployed: true,
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    code: "code",
                    dependencies: [{}],
                    runtime: "runtime",
                    secrets: [{}],
                    installed_integration_id: "installed_integration_id",
                    status: "pending",
                    built_at: "2024-01-15T09:30:00Z",
                    deploy: true,
                },
            ],
        };
        server.mockEndpoint().get("/actions/actions").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const expected = {
            total: 1.1,
            page: 1.1,
            per_page: 1.1,
            actions: [
                {
                    id: "id",
                    name: "name",
                    supported_triggers: [
                        {
                            id: "id",
                        },
                    ],
                    all_changes_deployed: true,
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    code: "code",
                    dependencies: [{}],
                    runtime: "runtime",
                    secrets: [{}],
                    installed_integration_id: "installed_integration_id",
                    status: "pending",
                    built_at: "2024-01-15T09:30:00Z",
                    deploy: true,
                },
            ],
        };
        const page = await client.actions.list({
            triggerId: "triggerId",
            actionName: "actionName",
            deployed: true,
            page: 1,
            per_page: 1,
            installed: true,
        });

        expect(expected.actions).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.actions).toEqual(nextPage.data);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/actions/actions").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.actions.list();
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/actions/actions").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.actions.list();
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/actions/actions").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.actions.list();
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("list (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/actions/actions").respondWith().statusCode(429).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.actions.list();
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name", supported_triggers: [{ id: "id" }] };
        const rawResponseBody = {
            id: "id",
            name: "name",
            supported_triggers: [
                {
                    id: "id",
                    version: "version",
                    status: "status",
                    runtimes: ["runtimes"],
                    default_runtime: "default_runtime",
                    compatible_triggers: [{ id: "id", version: "version" }],
                    binding_policy: "trigger-bound",
                },
            ],
            all_changes_deployed: true,
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            code: "code",
            dependencies: [{ name: "name", version: "version", registry_url: "registry_url" }],
            runtime: "runtime",
            secrets: [{ name: "name", updated_at: "2024-01-15T09:30:00Z" }],
            deployed_version: {
                id: "id",
                action_id: "action_id",
                code: "code",
                dependencies: [{}],
                deployed: true,
                runtime: "runtime",
                secrets: [{}],
                status: "pending",
                number: 1.1,
                errors: [{}],
                action: {
                    id: "id",
                    name: "name",
                    supported_triggers: [{ id: "id" }],
                    all_changes_deployed: true,
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                built_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                supported_triggers: [{ id: "id" }],
            },
            installed_integration_id: "installed_integration_id",
            integration: {
                id: "id",
                catalog_id: "catalog_id",
                url_slug: "url_slug",
                partner_id: "partner_id",
                name: "name",
                description: "description",
                short_description: "short_description",
                logo: "logo",
                feature_type: "unspecified",
                terms_of_use_url: "terms_of_use_url",
                privacy_policy_url: "privacy_policy_url",
                public_support_link: "public_support_link",
                current_release: {
                    id: "id",
                    trigger: { id: "id" },
                    required_secrets: [{}],
                    required_configuration: [{}],
                },
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
            },
            status: "pending",
            built_at: "2024-01-15T09:30:00Z",
            deploy: true,
        };
        server
            .mockEndpoint()
            .post("/actions/actions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.actions.create({
            name: "name",
            supported_triggers: [
                {
                    id: "id",
                },
            ],
        });
        expect(response).toEqual({
            id: "id",
            name: "name",
            supported_triggers: [
                {
                    id: "id",
                    version: "version",
                    status: "status",
                    runtimes: ["runtimes"],
                    default_runtime: "default_runtime",
                    compatible_triggers: [
                        {
                            id: "id",
                            version: "version",
                        },
                    ],
                    binding_policy: "trigger-bound",
                },
            ],
            all_changes_deployed: true,
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            code: "code",
            dependencies: [
                {
                    name: "name",
                    version: "version",
                    registry_url: "registry_url",
                },
            ],
            runtime: "runtime",
            secrets: [
                {
                    name: "name",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            deployed_version: {
                id: "id",
                action_id: "action_id",
                code: "code",
                dependencies: [{}],
                deployed: true,
                runtime: "runtime",
                secrets: [{}],
                status: "pending",
                number: 1.1,
                errors: [{}],
                action: {
                    id: "id",
                    name: "name",
                    supported_triggers: [
                        {
                            id: "id",
                        },
                    ],
                    all_changes_deployed: true,
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                built_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                supported_triggers: [
                    {
                        id: "id",
                    },
                ],
            },
            installed_integration_id: "installed_integration_id",
            integration: {
                id: "id",
                catalog_id: "catalog_id",
                url_slug: "url_slug",
                partner_id: "partner_id",
                name: "name",
                description: "description",
                short_description: "short_description",
                logo: "logo",
                feature_type: "unspecified",
                terms_of_use_url: "terms_of_use_url",
                privacy_policy_url: "privacy_policy_url",
                public_support_link: "public_support_link",
                current_release: {
                    id: "id",
                    trigger: {
                        id: "id",
                    },
                    required_secrets: [{}],
                    required_configuration: [{}],
                },
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
            },
            status: "pending",
            built_at: "2024-01-15T09:30:00Z",
            deploy: true,
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "my-action", supported_triggers: [{ id: "id" }, { id: "id" }] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/actions/actions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.create({
                name: "my-action",
                supported_triggers: [
                    {
                        id: "id",
                    },
                    {
                        id: "id",
                    },
                ],
            });
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("create (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "my-action", supported_triggers: [{ id: "id" }, { id: "id" }] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/actions/actions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.create({
                name: "my-action",
                supported_triggers: [
                    {
                        id: "id",
                    },
                    {
                        id: "id",
                    },
                ],
            });
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("create (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "my-action", supported_triggers: [{ id: "id" }, { id: "id" }] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/actions/actions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.create({
                name: "my-action",
                supported_triggers: [
                    {
                        id: "id",
                    },
                    {
                        id: "id",
                    },
                ],
            });
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("create (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "my-action", supported_triggers: [{ id: "id" }, { id: "id" }] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/actions/actions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.create({
                name: "my-action",
                supported_triggers: [
                    {
                        id: "id",
                    },
                    {
                        id: "id",
                    },
                ],
            });
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            name: "name",
            supported_triggers: [
                {
                    id: "id",
                    version: "version",
                    status: "status",
                    runtimes: ["runtimes"],
                    default_runtime: "default_runtime",
                    compatible_triggers: [{ id: "id", version: "version" }],
                    binding_policy: "trigger-bound",
                },
            ],
            all_changes_deployed: true,
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            code: "code",
            dependencies: [{ name: "name", version: "version", registry_url: "registry_url" }],
            runtime: "runtime",
            secrets: [{ name: "name", updated_at: "2024-01-15T09:30:00Z" }],
            deployed_version: {
                id: "id",
                action_id: "action_id",
                code: "code",
                dependencies: [{}],
                deployed: true,
                runtime: "runtime",
                secrets: [{}],
                status: "pending",
                number: 1.1,
                errors: [{}],
                action: {
                    id: "id",
                    name: "name",
                    supported_triggers: [{ id: "id" }],
                    all_changes_deployed: true,
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                built_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                supported_triggers: [{ id: "id" }],
            },
            installed_integration_id: "installed_integration_id",
            integration: {
                id: "id",
                catalog_id: "catalog_id",
                url_slug: "url_slug",
                partner_id: "partner_id",
                name: "name",
                description: "description",
                short_description: "short_description",
                logo: "logo",
                feature_type: "unspecified",
                terms_of_use_url: "terms_of_use_url",
                privacy_policy_url: "privacy_policy_url",
                public_support_link: "public_support_link",
                current_release: {
                    id: "id",
                    trigger: { id: "id" },
                    required_secrets: [{}],
                    required_configuration: [{}],
                },
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
            },
            status: "pending",
            built_at: "2024-01-15T09:30:00Z",
            deploy: true,
        };
        server
            .mockEndpoint()
            .get("/actions/actions/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.actions.get("id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            supported_triggers: [
                {
                    id: "id",
                    version: "version",
                    status: "status",
                    runtimes: ["runtimes"],
                    default_runtime: "default_runtime",
                    compatible_triggers: [
                        {
                            id: "id",
                            version: "version",
                        },
                    ],
                    binding_policy: "trigger-bound",
                },
            ],
            all_changes_deployed: true,
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            code: "code",
            dependencies: [
                {
                    name: "name",
                    version: "version",
                    registry_url: "registry_url",
                },
            ],
            runtime: "runtime",
            secrets: [
                {
                    name: "name",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            deployed_version: {
                id: "id",
                action_id: "action_id",
                code: "code",
                dependencies: [{}],
                deployed: true,
                runtime: "runtime",
                secrets: [{}],
                status: "pending",
                number: 1.1,
                errors: [{}],
                action: {
                    id: "id",
                    name: "name",
                    supported_triggers: [
                        {
                            id: "id",
                        },
                    ],
                    all_changes_deployed: true,
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                built_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                supported_triggers: [
                    {
                        id: "id",
                    },
                ],
            },
            installed_integration_id: "installed_integration_id",
            integration: {
                id: "id",
                catalog_id: "catalog_id",
                url_slug: "url_slug",
                partner_id: "partner_id",
                name: "name",
                description: "description",
                short_description: "short_description",
                logo: "logo",
                feature_type: "unspecified",
                terms_of_use_url: "terms_of_use_url",
                privacy_policy_url: "privacy_policy_url",
                public_support_link: "public_support_link",
                current_release: {
                    id: "id",
                    trigger: {
                        id: "id",
                    },
                    required_secrets: [{}],
                    required_configuration: [{}],
                },
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
            },
            status: "pending",
            built_at: "2024-01-15T09:30:00Z",
            deploy: true,
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/actions/actions/id")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.get("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/actions/actions/id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.get("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/actions/actions/id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.get("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("get (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/actions/actions/id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.get("id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("get (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/actions/actions/id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.get("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/actions/actions/id").respondWith().statusCode(200).build();

        const response = await client.actions.delete("id", {
            force: true,
        });
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/actions/actions/id")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.delete("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/actions/actions/id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.delete("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("delete (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/actions/actions/id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.delete("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("delete (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/actions/actions/id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.delete("id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("delete (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/actions/actions/id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.delete("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("update (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            name: "name",
            supported_triggers: [
                {
                    id: "id",
                    version: "version",
                    status: "status",
                    runtimes: ["runtimes"],
                    default_runtime: "default_runtime",
                    compatible_triggers: [{ id: "id", version: "version" }],
                    binding_policy: "trigger-bound",
                },
            ],
            all_changes_deployed: true,
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            code: "code",
            dependencies: [{ name: "name", version: "version", registry_url: "registry_url" }],
            runtime: "runtime",
            secrets: [{ name: "name", updated_at: "2024-01-15T09:30:00Z" }],
            deployed_version: {
                id: "id",
                action_id: "action_id",
                code: "code",
                dependencies: [{}],
                deployed: true,
                runtime: "runtime",
                secrets: [{}],
                status: "pending",
                number: 1.1,
                errors: [{}],
                action: {
                    id: "id",
                    name: "name",
                    supported_triggers: [{ id: "id" }],
                    all_changes_deployed: true,
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                built_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                supported_triggers: [{ id: "id" }],
            },
            installed_integration_id: "installed_integration_id",
            integration: {
                id: "id",
                catalog_id: "catalog_id",
                url_slug: "url_slug",
                partner_id: "partner_id",
                name: "name",
                description: "description",
                short_description: "short_description",
                logo: "logo",
                feature_type: "unspecified",
                terms_of_use_url: "terms_of_use_url",
                privacy_policy_url: "privacy_policy_url",
                public_support_link: "public_support_link",
                current_release: {
                    id: "id",
                    trigger: { id: "id" },
                    required_secrets: [{}],
                    required_configuration: [{}],
                },
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
            },
            status: "pending",
            built_at: "2024-01-15T09:30:00Z",
            deploy: true,
        };
        server
            .mockEndpoint()
            .patch("/actions/actions/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.actions.update("id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            supported_triggers: [
                {
                    id: "id",
                    version: "version",
                    status: "status",
                    runtimes: ["runtimes"],
                    default_runtime: "default_runtime",
                    compatible_triggers: [
                        {
                            id: "id",
                            version: "version",
                        },
                    ],
                    binding_policy: "trigger-bound",
                },
            ],
            all_changes_deployed: true,
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            code: "code",
            dependencies: [
                {
                    name: "name",
                    version: "version",
                    registry_url: "registry_url",
                },
            ],
            runtime: "runtime",
            secrets: [
                {
                    name: "name",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            deployed_version: {
                id: "id",
                action_id: "action_id",
                code: "code",
                dependencies: [{}],
                deployed: true,
                runtime: "runtime",
                secrets: [{}],
                status: "pending",
                number: 1.1,
                errors: [{}],
                action: {
                    id: "id",
                    name: "name",
                    supported_triggers: [
                        {
                            id: "id",
                        },
                    ],
                    all_changes_deployed: true,
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                },
                built_at: "2024-01-15T09:30:00Z",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
                supported_triggers: [
                    {
                        id: "id",
                    },
                ],
            },
            installed_integration_id: "installed_integration_id",
            integration: {
                id: "id",
                catalog_id: "catalog_id",
                url_slug: "url_slug",
                partner_id: "partner_id",
                name: "name",
                description: "description",
                short_description: "short_description",
                logo: "logo",
                feature_type: "unspecified",
                terms_of_use_url: "terms_of_use_url",
                privacy_policy_url: "privacy_policy_url",
                public_support_link: "public_support_link",
                current_release: {
                    id: "id",
                    trigger: {
                        id: "id",
                    },
                    required_secrets: [{}],
                    required_configuration: [{}],
                },
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
            },
            status: "pending",
            built_at: "2024-01-15T09:30:00Z",
            deploy: true,
        });
    });

    test("update (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/actions/actions/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.update("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("update (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/actions/actions/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.update("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("update (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/actions/actions/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.update("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("update (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/actions/actions/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.update("id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("update (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/actions/actions/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.update("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("deploy (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            action_id: "action_id",
            code: "code",
            dependencies: [{ name: "name", version: "version", registry_url: "registry_url" }],
            deployed: true,
            runtime: "runtime",
            secrets: [{ name: "name", updated_at: "2024-01-15T09:30:00Z" }],
            status: "pending",
            number: 1.1,
            errors: [{ id: "id", msg: "msg", url: "url" }],
            action: {
                id: "id",
                name: "name",
                supported_triggers: [{ id: "id" }],
                all_changes_deployed: true,
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
            },
            built_at: "2024-01-15T09:30:00Z",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            supported_triggers: [
                {
                    id: "id",
                    version: "version",
                    status: "status",
                    runtimes: ["runtimes"],
                    default_runtime: "default_runtime",
                    compatible_triggers: [{ id: "id", version: "version" }],
                    binding_policy: "trigger-bound",
                },
            ],
        };
        server
            .mockEndpoint()
            .post("/actions/actions/id/deploy")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.actions.deploy("id");
        expect(response).toEqual({
            id: "id",
            action_id: "action_id",
            code: "code",
            dependencies: [
                {
                    name: "name",
                    version: "version",
                    registry_url: "registry_url",
                },
            ],
            deployed: true,
            runtime: "runtime",
            secrets: [
                {
                    name: "name",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
            status: "pending",
            number: 1.1,
            errors: [
                {
                    id: "id",
                    msg: "msg",
                    url: "url",
                },
            ],
            action: {
                id: "id",
                name: "name",
                supported_triggers: [
                    {
                        id: "id",
                    },
                ],
                all_changes_deployed: true,
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
            },
            built_at: "2024-01-15T09:30:00Z",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            supported_triggers: [
                {
                    id: "id",
                    version: "version",
                    status: "status",
                    runtimes: ["runtimes"],
                    default_runtime: "default_runtime",
                    compatible_triggers: [
                        {
                            id: "id",
                            version: "version",
                        },
                    ],
                    binding_policy: "trigger-bound",
                },
            ],
        });
    });

    test("deploy (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/actions/actions/id/deploy")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.deploy("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("deploy (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/actions/actions/id/deploy")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.deploy("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("deploy (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/actions/actions/id/deploy")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.deploy("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("deploy (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/actions/actions/id/deploy")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.deploy("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("test (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { payload: { key: "value" } };
        const rawResponseBody = { payload: { key: "value" } };
        server
            .mockEndpoint()
            .post("/actions/actions/id/test")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.actions.test("id", {
            payload: {
                key: "value",
            },
        });
        expect(response).toEqual({
            payload: {
                key: "value",
            },
        });
    });

    test("test (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { payload: { payload: { key: "value" } } };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/actions/actions/id/test")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.test("id", {
                payload: {
                    payload: {
                        key: "value",
                    },
                },
            });
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("test (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { payload: { payload: { key: "value" } } };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/actions/actions/id/test")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.test("id", {
                payload: {
                    payload: {
                        key: "value",
                    },
                },
            });
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("test (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { payload: { payload: { key: "value" } } };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/actions/actions/id/test")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.test("id", {
                payload: {
                    payload: {
                        key: "value",
                    },
                },
            });
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("test (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { payload: { payload: { key: "value" } } };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/actions/actions/id/test")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.actions.test("id", {
                payload: {
                    payload: {
                        key: "value",
                    },
                },
            });
        }).rejects.toThrow(Management.TooManyRequestsError);
    });
});
