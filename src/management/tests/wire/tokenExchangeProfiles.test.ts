/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { ManagementClient } from "../../Client.js";

describe("TokenExchangeProfiles", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "name",
            subject_token_type: "subject_token_type",
            action_id: "action_id",
            type: "custom_authentication",
        };
        const rawResponseBody = {
            id: "id",
            name: "name",
            subject_token_type: "subject_token_type",
            action_id: "action_id",
            type: "custom_authentication",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .post("/token-exchange-profiles")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tokenExchangeProfiles.create({
            name: "name",
            subject_token_type: "subject_token_type",
            action_id: "action_id",
        });
        expect(response).toEqual({
            id: "id",
            name: "name",
            subject_token_type: "subject_token_type",
            action_id: "action_id",
            type: "custom_authentication",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            name: "name",
            subject_token_type: "subject_token_type",
            action_id: "action_id",
            type: "custom_authentication",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .get("/token-exchange-profiles/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tokenExchangeProfiles.get("id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            subject_token_type: "subject_token_type",
            action_id: "action_id",
            type: "custom_authentication",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/token-exchange-profiles/id").respondWith().statusCode(200).build();

        const response = await client.tokenExchangeProfiles.delete("id");
        expect(response).toEqual(undefined);
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};

        server
            .mockEndpoint()
            .patch("/token-exchange-profiles/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.tokenExchangeProfiles.update("id");
        expect(response).toEqual(undefined);
    });
});
