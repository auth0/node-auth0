/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../Client.js";

describe("Members", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            next: "next",
            members: [{ user_id: "user_id", picture: "picture", name: "name", email: "email", roles: [{}] }],
        };
        server
            .mockEndpoint()
            .get("/organizations/id/members")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            next: "next",
            members: [
                {
                    user_id: "user_id",
                    picture: "picture",
                    name: "name",
                    email: "email",
                    roles: [{}],
                },
            ],
        };
        const page = await client.organizations.members.list("id");
        expect(expected.members).toEqual(page.data);

        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.members).toEqual(nextPage.data);
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { members: ["members"] };

        server
            .mockEndpoint()
            .post("/organizations/id/members")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.organizations.members.create("id", {
            members: ["members"],
        });
        expect(response).toEqual(undefined);
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { members: ["members"] };

        server
            .mockEndpoint()
            .delete("/organizations/id/members")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.organizations.members.delete("id", {
            members: ["members"],
        });
        expect(response).toEqual(undefined);
    });
});
