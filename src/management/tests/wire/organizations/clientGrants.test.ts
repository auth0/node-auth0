// This file was auto-generated by Fern from our API Definition.

import * as Management from "../../../api/index";
import { ManagementClient } from "../../../Client";
import { mockServerPool } from "../../mock-server/MockServerPool";

describe("ClientGrants", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            start: 1.1,
            limit: 1.1,
            total: 1.1,
            client_grants: [
                {
                    id: "id",
                    client_id: "client_id",
                    audience: "audience",
                    scope: ["scope"],
                    organization_usage: "deny",
                    allow_any_organization: true,
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/organizations/id/client-grants")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            start: 1.1,
            limit: 1.1,
            total: 1.1,
            client_grants: [
                {
                    id: "id",
                    client_id: "client_id",
                    audience: "audience",
                    scope: ["scope"],
                    organization_usage: "deny",
                    allow_any_organization: true,
                },
            ],
        };
        const page = await client.organizations.clientGrants.list("id", {
            audience: "audience",
            client_id: "client_id",
            page: 1,
            per_page: 1,
            include_totals: true,
        });

        expect(expected.client_grants).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.client_grants).toEqual(nextPage.data);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/organizations/id/client-grants")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizations.clientGrants.list("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/organizations/id/client-grants")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizations.clientGrants.list("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/organizations/id/client-grants")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizations.clientGrants.list("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("list (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/organizations/id/client-grants")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizations.clientGrants.list("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { grant_id: "grant_id" };
        const rawResponseBody = {
            id: "id",
            client_id: "client_id",
            audience: "audience",
            scope: ["scope"],
            organization_usage: "deny",
            allow_any_organization: true,
        };
        server
            .mockEndpoint()
            .post("/organizations/id/client-grants")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.organizations.clientGrants.create("id", {
            grant_id: "grant_id",
        });
        expect(response).toEqual({
            id: "id",
            client_id: "client_id",
            audience: "audience",
            scope: ["scope"],
            organization_usage: "deny",
            allow_any_organization: true,
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { grant_id: "grant_id" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/organizations/id/client-grants")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizations.clientGrants.create("id", {
                grant_id: "grant_id",
            });
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("create (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { grant_id: "grant_id" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/organizations/id/client-grants")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizations.clientGrants.create("id", {
                grant_id: "grant_id",
            });
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("create (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { grant_id: "grant_id" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/organizations/id/client-grants")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizations.clientGrants.create("id", {
                grant_id: "grant_id",
            });
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("create (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { grant_id: "grant_id" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/organizations/id/client-grants")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizations.clientGrants.create("id", {
                grant_id: "grant_id",
            });
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("create (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { grant_id: "grant_id" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/organizations/id/client-grants")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(409)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizations.clientGrants.create("id", {
                grant_id: "grant_id",
            });
        }).rejects.toThrow(Management.ConflictError);
    });

    test("create (7)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { grant_id: "grant_id" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/organizations/id/client-grants")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizations.clientGrants.create("id", {
                grant_id: "grant_id",
            });
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/organizations/id/client-grants/grant_id").respondWith().statusCode(200).build();

        const response = await client.organizations.clientGrants.delete("id", "grant_id");
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/organizations/id/client-grants/grant_id")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizations.clientGrants.delete("id", "grant_id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/organizations/id/client-grants/grant_id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizations.clientGrants.delete("id", "grant_id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("delete (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/organizations/id/client-grants/grant_id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizations.clientGrants.delete("id", "grant_id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("delete (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/organizations/id/client-grants/grant_id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizations.clientGrants.delete("id", "grant_id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("delete (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/organizations/id/client-grants/grant_id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizations.clientGrants.delete("id", "grant_id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });
});
