/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../Client.js";

describe("ClientGrants", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { grant_id: "grant_id" };
        const rawResponseBody = {
            id: "id",
            client_id: "client_id",
            audience: "audience",
            scope: ["scope"],
            organization_usage: "deny",
            allow_any_organization: true,
        };
        server
            .mockEndpoint()
            .post("/organizations/id/client-grants")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.organizations.clientGrants.create("id", {
            grant_id: "grant_id",
        });
        expect(response).toEqual({
            id: "id",
            client_id: "client_id",
            audience: "audience",
            scope: ["scope"],
            organization_usage: "deny",
            allow_any_organization: true,
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/organizations/id/client-grants/grant_id").respondWith().statusCode(200).build();

        const response = await client.organizations.clientGrants.delete("id", "grant_id");
        expect(response).toEqual(undefined);
    });
});
