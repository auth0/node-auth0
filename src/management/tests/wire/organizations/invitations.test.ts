// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ManagementClient } from "../../../Client";
import * as Management from "../../../api/index";

describe("Invitations", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            start: 1.1,
            limit: 1.1,
            invitations: [
                {
                    id: "id",
                    organization_id: "organization_id",
                    inviter: { name: "name" },
                    invitee: { email: "email" },
                    invitation_url: "invitation_url",
                    created_at: "2024-01-15T09:30:00Z",
                    expires_at: "2024-01-15T09:30:00Z",
                    client_id: "client_id",
                    connection_id: "connection_id",
                    app_metadata: { key: "value" },
                    user_metadata: { key: "value" },
                    roles: ["roles"],
                    ticket_id: "ticket_id",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/organizations/id/invitations")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            start: 1.1,
            limit: 1.1,
            invitations: [
                {
                    id: "id",
                    organization_id: "organization_id",
                    inviter: {
                        name: "name",
                    },
                    invitee: {
                        email: "email",
                    },
                    invitation_url: "invitation_url",
                    created_at: "2024-01-15T09:30:00Z",
                    expires_at: "2024-01-15T09:30:00Z",
                    client_id: "client_id",
                    connection_id: "connection_id",
                    app_metadata: {
                        key: "value",
                    },
                    user_metadata: {
                        key: "value",
                    },
                    roles: ["roles"],
                    ticket_id: "ticket_id",
                },
            ],
        };
        const page = await client.organizations.invitations.list("id", {
            page: 1,
            per_page: 1,
            include_totals: true,
            fields: "fields",
            include_fields: true,
            sort: "sort",
        });

        expect(expected.invitations).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.invitations).toEqual(nextPage.data);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/organizations/id/invitations")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizations.invitations.list("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/organizations/id/invitations")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizations.invitations.list("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/organizations/id/invitations")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizations.invitations.list("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("list (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/organizations/id/invitations")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizations.invitations.list("id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("list (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/organizations/id/invitations")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizations.invitations.list("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { inviter: { name: "name" }, invitee: { email: "email" }, client_id: "client_id" };
        const rawResponseBody = {
            id: "id",
            organization_id: "organization_id",
            inviter: { name: "name" },
            invitee: { email: "email" },
            invitation_url: "invitation_url",
            created_at: "2024-01-15T09:30:00Z",
            expires_at: "2024-01-15T09:30:00Z",
            client_id: "client_id",
            connection_id: "connection_id",
            app_metadata: { key: "value" },
            user_metadata: { key: "value" },
            roles: ["roles"],
            ticket_id: "ticket_id",
        };
        server
            .mockEndpoint()
            .post("/organizations/id/invitations")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.organizations.invitations.create("id", {
            inviter: {
                name: "name",
            },
            invitee: {
                email: "email",
            },
            client_id: "client_id",
        });
        expect(response).toEqual({
            id: "id",
            organization_id: "organization_id",
            inviter: {
                name: "name",
            },
            invitee: {
                email: "email",
            },
            invitation_url: "invitation_url",
            created_at: "2024-01-15T09:30:00Z",
            expires_at: "2024-01-15T09:30:00Z",
            client_id: "client_id",
            connection_id: "connection_id",
            app_metadata: {
                key: "value",
            },
            user_metadata: {
                key: "value",
            },
            roles: ["roles"],
            ticket_id: "ticket_id",
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            inviter: { name: "Jane Doe" },
            invitee: { email: "john.doe@gmail.com" },
            client_id: "AaiyAPdpYdesoKnqjj8HJqRn4T5titww",
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/organizations/id/invitations")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizations.invitations.create("id", {
                inviter: {
                    name: "Jane Doe",
                },
                invitee: {
                    email: "john.doe@gmail.com",
                },
                client_id: "AaiyAPdpYdesoKnqjj8HJqRn4T5titww",
            });
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("create (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            inviter: { name: "Jane Doe" },
            invitee: { email: "john.doe@gmail.com" },
            client_id: "AaiyAPdpYdesoKnqjj8HJqRn4T5titww",
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/organizations/id/invitations")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizations.invitations.create("id", {
                inviter: {
                    name: "Jane Doe",
                },
                invitee: {
                    email: "john.doe@gmail.com",
                },
                client_id: "AaiyAPdpYdesoKnqjj8HJqRn4T5titww",
            });
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("create (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            inviter: { name: "Jane Doe" },
            invitee: { email: "john.doe@gmail.com" },
            client_id: "AaiyAPdpYdesoKnqjj8HJqRn4T5titww",
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/organizations/id/invitations")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizations.invitations.create("id", {
                inviter: {
                    name: "Jane Doe",
                },
                invitee: {
                    email: "john.doe@gmail.com",
                },
                client_id: "AaiyAPdpYdesoKnqjj8HJqRn4T5titww",
            });
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("create (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            inviter: { name: "Jane Doe" },
            invitee: { email: "john.doe@gmail.com" },
            client_id: "AaiyAPdpYdesoKnqjj8HJqRn4T5titww",
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/organizations/id/invitations")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizations.invitations.create("id", {
                inviter: {
                    name: "Jane Doe",
                },
                invitee: {
                    email: "john.doe@gmail.com",
                },
                client_id: "AaiyAPdpYdesoKnqjj8HJqRn4T5titww",
            });
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("create (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            inviter: { name: "Jane Doe" },
            invitee: { email: "john.doe@gmail.com" },
            client_id: "AaiyAPdpYdesoKnqjj8HJqRn4T5titww",
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/organizations/id/invitations")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizations.invitations.create("id", {
                inviter: {
                    name: "Jane Doe",
                },
                invitee: {
                    email: "john.doe@gmail.com",
                },
                client_id: "AaiyAPdpYdesoKnqjj8HJqRn4T5titww",
            });
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            organization_id: "organization_id",
            inviter: { name: "name" },
            invitee: { email: "email" },
            invitation_url: "invitation_url",
            created_at: "2024-01-15T09:30:00Z",
            expires_at: "2024-01-15T09:30:00Z",
            client_id: "client_id",
            connection_id: "connection_id",
            app_metadata: { key: "value" },
            user_metadata: { key: "value" },
            roles: ["roles"],
            ticket_id: "ticket_id",
        };
        server
            .mockEndpoint()
            .get("/organizations/id/invitations/invitation_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.organizations.invitations.get("id", "invitation_id", {
            fields: "fields",
            include_fields: true,
        });
        expect(response).toEqual({
            id: "id",
            organization_id: "organization_id",
            inviter: {
                name: "name",
            },
            invitee: {
                email: "email",
            },
            invitation_url: "invitation_url",
            created_at: "2024-01-15T09:30:00Z",
            expires_at: "2024-01-15T09:30:00Z",
            client_id: "client_id",
            connection_id: "connection_id",
            app_metadata: {
                key: "value",
            },
            user_metadata: {
                key: "value",
            },
            roles: ["roles"],
            ticket_id: "ticket_id",
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/organizations/id/invitations/invitation_id")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizations.invitations.get("id", "invitation_id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/organizations/id/invitations/invitation_id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizations.invitations.get("id", "invitation_id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/organizations/id/invitations/invitation_id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizations.invitations.get("id", "invitation_id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("get (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/organizations/id/invitations/invitation_id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizations.invitations.get("id", "invitation_id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("get (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/organizations/id/invitations/invitation_id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizations.invitations.get("id", "invitation_id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server
            .mockEndpoint()
            .delete("/organizations/id/invitations/invitation_id")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.organizations.invitations.delete("id", "invitation_id");
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/organizations/id/invitations/invitation_id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizations.invitations.delete("id", "invitation_id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/organizations/id/invitations/invitation_id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizations.invitations.delete("id", "invitation_id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("delete (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/organizations/id/invitations/invitation_id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizations.invitations.delete("id", "invitation_id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("delete (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/organizations/id/invitations/invitation_id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.organizations.invitations.delete("id", "invitation_id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });
});
