/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../../Client.js";

describe("Roles", () => {
    test("assign", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { roles: ["roles"] };

        server
            .mockEndpoint()
            .post("/organizations/id/members/user_id/roles")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.organizations.members.roles.assign("id", "user_id", {
            roles: ["roles"],
        });
        expect(response).toEqual(undefined);
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { roles: ["roles"] };

        server
            .mockEndpoint()
            .delete("/organizations/id/members/user_id/roles")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.organizations.members.roles.delete("id", "user_id", {
            roles: ["roles"],
        });
        expect(response).toEqual(undefined);
    });
});
