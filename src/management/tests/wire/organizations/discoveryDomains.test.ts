/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../Client.js";

describe("DiscoveryDomains", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            domain: "domain",
            status: "pending",
            verification_txt: "verification_txt",
            verification_host: "verification_host",
        };
        server
            .mockEndpoint()
            .get("/organizations/id/discovery-domains/discovery_domain_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.organizations.discoveryDomains.get("id", "discovery_domain_id");
        expect(response).toEqual({
            id: "id",
            domain: "domain",
            status: "pending",
            verification_txt: "verification_txt",
            verification_host: "verification_host",
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { domain: "domain" };
        const rawResponseBody = {
            id: "id",
            domain: "domain",
            status: "pending",
            verification_txt: "verification_txt",
            verification_host: "verification_host",
        };
        server
            .mockEndpoint()
            .post("/organizations/id/discovery-domains")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.organizations.discoveryDomains.create("id", {
            domain: "domain",
        });
        expect(response).toEqual({
            id: "id",
            domain: "domain",
            status: "pending",
            verification_txt: "verification_txt",
            verification_host: "verification_host",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server
            .mockEndpoint()
            .delete("/organizations/id/discovery-domains/discovery_domain_id")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.organizations.discoveryDomains.delete("id", "discovery_domain_id");
        expect(response).toEqual(undefined);
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            domain: "domain",
            status: "pending",
            verification_txt: "verification_txt",
            verification_host: "verification_host",
        };
        server
            .mockEndpoint()
            .patch("/organizations/id/discovery-domains/discovery_domain_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.organizations.discoveryDomains.update("id", "discovery_domain_id");
        expect(response).toEqual({
            id: "id",
            domain: "domain",
            status: "pending",
            verification_txt: "verification_txt",
            verification_host: "verification_host",
        });
    });
});
