/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../Client.js";

describe("EnabledConnections", () => {
    test("add", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { connection_id: "connection_id" };
        const rawResponseBody = {
            connection_id: "connection_id",
            assign_membership_on_login: true,
            show_as_button: true,
            is_signup_enabled: true,
            connection: { name: "name", strategy: "strategy" },
        };
        server
            .mockEndpoint()
            .post("/organizations/id/enabled_connections")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.organizations.enabledConnections.add("id", {
            connection_id: "connection_id",
        });
        expect(response).toEqual({
            connection_id: "connection_id",
            assign_membership_on_login: true,
            show_as_button: true,
            is_signup_enabled: true,
            connection: {
                name: "name",
                strategy: "strategy",
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            connection_id: "connection_id",
            assign_membership_on_login: true,
            show_as_button: true,
            is_signup_enabled: true,
            connection: { name: "name", strategy: "strategy" },
        };
        server
            .mockEndpoint()
            .get("/organizations/id/enabled_connections/connectionId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.organizations.enabledConnections.get("id", "connectionId");
        expect(response).toEqual({
            connection_id: "connection_id",
            assign_membership_on_login: true,
            show_as_button: true,
            is_signup_enabled: true,
            connection: {
                name: "name",
                strategy: "strategy",
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server
            .mockEndpoint()
            .delete("/organizations/id/enabled_connections/connectionId")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.organizations.enabledConnections.delete("id", "connectionId");
        expect(response).toEqual(undefined);
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            connection_id: "connection_id",
            assign_membership_on_login: true,
            show_as_button: true,
            is_signup_enabled: true,
            connection: { name: "name", strategy: "strategy" },
        };
        server
            .mockEndpoint()
            .patch("/organizations/id/enabled_connections/connectionId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.organizations.enabledConnections.update("id", "connectionId");
        expect(response).toEqual({
            connection_id: "connection_id",
            assign_membership_on_login: true,
            show_as_button: true,
            is_signup_enabled: true,
            connection: {
                name: "name",
                strategy: "strategy",
            },
        });
    });
});
