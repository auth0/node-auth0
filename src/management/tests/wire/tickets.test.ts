// This file was auto-generated by Fern from our API Definition.

import * as Management from "../../api/index";
import { ManagementClient } from "../../Client";
import { mockServerPool } from "../mock-server/MockServerPool";

describe("Tickets", () => {
    test("verifyEmail (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { user_id: "user_id" };
        const rawResponseBody = { ticket: "ticket" };
        server
            .mockEndpoint()
            .post("/tickets/email-verification")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tickets.verifyEmail({
            user_id: "user_id",
        });
        expect(response).toEqual({
            ticket: "ticket",
        });
    });

    test("verifyEmail (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { user_id: "user_id" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/tickets/email-verification")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tickets.verifyEmail({
                user_id: "user_id",
            });
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("verifyEmail (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { user_id: "user_id" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/tickets/email-verification")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tickets.verifyEmail({
                user_id: "user_id",
            });
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("verifyEmail (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { user_id: "user_id" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/tickets/email-verification")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tickets.verifyEmail({
                user_id: "user_id",
            });
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("verifyEmail (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { user_id: "user_id" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/tickets/email-verification")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tickets.verifyEmail({
                user_id: "user_id",
            });
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("verifyEmail (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { user_id: "user_id" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/tickets/email-verification")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tickets.verifyEmail({
                user_id: "user_id",
            });
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("changePassword (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { ticket: "ticket" };
        server
            .mockEndpoint()
            .post("/tickets/password-change")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.tickets.changePassword();
        expect(response).toEqual({
            ticket: "ticket",
        });
    });

    test("changePassword (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/tickets/password-change")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tickets.changePassword();
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("changePassword (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/tickets/password-change")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tickets.changePassword();
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("changePassword (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/tickets/password-change")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tickets.changePassword();
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("changePassword (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/tickets/password-change")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tickets.changePassword();
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("changePassword (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/tickets/password-change")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.tickets.changePassword();
        }).rejects.toThrow(Management.TooManyRequestsError);
    });
});
