/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../Client.js";

describe("SsoTicket", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { ticket: "ticket" };
        server
            .mockEndpoint()
            .post("/self-service-profiles/id/sso-ticket")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.selfServiceProfiles.ssoTicket.create("id");
        expect(response).toEqual({
            ticket: "ticket",
        });
    });

    test("revoke", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server
            .mockEndpoint()
            .post("/self-service-profiles/profileId/sso-ticket/id/revoke")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.selfServiceProfiles.ssoTicket.revoke("profileId", "id");
        expect(response).toEqual(undefined);
    });
});
