// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ManagementClient } from "../../../Client";
import * as Management from "../../../api/index";

describe("SsoTicket", () => {
    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { ticket: "ticket" };
        server
            .mockEndpoint()
            .post("/self-service-profiles/id/sso-ticket")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.selfServiceProfiles.ssoTicket.create("id");
        expect(response).toEqual({
            ticket: "ticket",
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/self-service-profiles/id/sso-ticket")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.selfServiceProfiles.ssoTicket.create("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("create (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/self-service-profiles/id/sso-ticket")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.selfServiceProfiles.ssoTicket.create("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("create (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/self-service-profiles/id/sso-ticket")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.selfServiceProfiles.ssoTicket.create("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("create (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/self-service-profiles/id/sso-ticket")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.selfServiceProfiles.ssoTicket.create("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("revoke (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server
            .mockEndpoint()
            .post("/self-service-profiles/profileId/sso-ticket/id/revoke")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.selfServiceProfiles.ssoTicket.revoke("profileId", "id");
        expect(response).toEqual(undefined);
    });

    test("revoke (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/self-service-profiles/profileId/sso-ticket/id/revoke")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.selfServiceProfiles.ssoTicket.revoke("profileId", "id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("revoke (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/self-service-profiles/profileId/sso-ticket/id/revoke")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.selfServiceProfiles.ssoTicket.revoke("profileId", "id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("revoke (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/self-service-profiles/profileId/sso-ticket/id/revoke")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.selfServiceProfiles.ssoTicket.revoke("profileId", "id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });
});
