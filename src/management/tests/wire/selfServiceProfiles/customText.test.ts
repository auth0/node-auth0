// This file was auto-generated by Fern from our API Definition.

import * as Management from "../../../api/index";
import { ManagementClient } from "../../../Client";
import { mockServerPool } from "../../mock-server/MockServerPool";

describe("CustomText", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/self-service-profiles/id/custom-text/en/get-started")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.selfServiceProfiles.customText.list("id", "en", "get-started");
        expect(response).toEqual({
            key: "value",
        });
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/self-service-profiles/id/custom-text/en/get-started")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.selfServiceProfiles.customText.list("id", "en", "get-started");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/self-service-profiles/id/custom-text/en/get-started")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.selfServiceProfiles.customText.list("id", "en", "get-started");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/self-service-profiles/id/custom-text/en/get-started")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.selfServiceProfiles.customText.list("id", "en", "get-started");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("list (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/self-service-profiles/id/custom-text/en/get-started")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.selfServiceProfiles.customText.list("id", "en", "get-started");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("set (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { key: "value" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/self-service-profiles/id/custom-text/en/get-started")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.selfServiceProfiles.customText.set("id", "en", "get-started", {
            key: "value",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("set (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { string: "string" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/self-service-profiles/id/custom-text/en/get-started")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.selfServiceProfiles.customText.set("id", "en", "get-started", {
                string: "string",
            });
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("set (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { string: "string" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/self-service-profiles/id/custom-text/en/get-started")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.selfServiceProfiles.customText.set("id", "en", "get-started", {
                string: "string",
            });
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("set (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { string: "string" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/self-service-profiles/id/custom-text/en/get-started")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.selfServiceProfiles.customText.set("id", "en", "get-started", {
                string: "string",
            });
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("set (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { string: "string" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/self-service-profiles/id/custom-text/en/get-started")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.selfServiceProfiles.customText.set("id", "en", "get-started", {
                string: "string",
            });
        }).rejects.toThrow(Management.TooManyRequestsError);
    });
});
