// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../mock-server/MockServerPool";
import { ManagementClient } from "../../Client";
import * as Management from "../../api/index";

describe("Clients", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            start: 1.1,
            limit: 1.1,
            total: 1.1,
            clients: [
                {
                    client_id: "client_id",
                    tenant: "tenant",
                    name: "name",
                    description: "description",
                    global: true,
                    client_secret: "client_secret",
                    app_type: "native",
                    logo_uri: "logo_uri",
                    is_first_party: true,
                    oidc_conformant: true,
                    callbacks: ["callbacks"],
                    allowed_origins: ["allowed_origins"],
                    web_origins: ["web_origins"],
                    client_aliases: ["client_aliases"],
                    allowed_clients: ["allowed_clients"],
                    allowed_logout_urls: ["allowed_logout_urls"],
                    grant_types: ["grant_types"],
                    signing_keys: [{}],
                    sso: true,
                    sso_disabled: true,
                    cross_origin_authentication: true,
                    cross_origin_loc: "cross_origin_loc",
                    custom_login_page_on: true,
                    custom_login_page: "custom_login_page",
                    custom_login_page_preview: "custom_login_page_preview",
                    form_template: "form_template",
                    token_endpoint_auth_method: "none",
                    client_metadata: { key: "value" },
                    initiate_login_uri: "initiate_login_uri",
                    refresh_token: { rotation_type: "rotating", expiration_type: "expiring" },
                    default_organization: { organization_id: "organization_id", flows: ["client_credentials"] },
                    organization_usage: "deny",
                    organization_require_behavior: "no_prompt",
                    organization_discovery_methods: ["email"],
                    require_pushed_authorization_requests: true,
                    require_proof_of_possession: true,
                    compliance_level: "none",
                    par_request_expiry: 1,
                    token_quota: { client_credentials: {} },
                    resource_server_identifier: "resource_server_identifier",
                },
            ],
        };
        server.mockEndpoint().get("/clients").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const expected = {
            start: 1.1,
            limit: 1.1,
            total: 1.1,
            clients: [
                {
                    client_id: "client_id",
                    tenant: "tenant",
                    name: "name",
                    description: "description",
                    global: true,
                    client_secret: "client_secret",
                    app_type: "native",
                    logo_uri: "logo_uri",
                    is_first_party: true,
                    oidc_conformant: true,
                    callbacks: ["callbacks"],
                    allowed_origins: ["allowed_origins"],
                    web_origins: ["web_origins"],
                    client_aliases: ["client_aliases"],
                    allowed_clients: ["allowed_clients"],
                    allowed_logout_urls: ["allowed_logout_urls"],
                    grant_types: ["grant_types"],
                    signing_keys: [{}],
                    sso: true,
                    sso_disabled: true,
                    cross_origin_authentication: true,
                    cross_origin_loc: "cross_origin_loc",
                    custom_login_page_on: true,
                    custom_login_page: "custom_login_page",
                    custom_login_page_preview: "custom_login_page_preview",
                    form_template: "form_template",
                    token_endpoint_auth_method: "none",
                    client_metadata: {
                        key: "value",
                    },
                    initiate_login_uri: "initiate_login_uri",
                    refresh_token: {
                        rotation_type: "rotating",
                        expiration_type: "expiring",
                    },
                    default_organization: {
                        organization_id: "organization_id",
                        flows: ["client_credentials"],
                    },
                    organization_usage: "deny",
                    organization_require_behavior: "no_prompt",
                    organization_discovery_methods: ["email"],
                    require_pushed_authorization_requests: true,
                    require_proof_of_possession: true,
                    compliance_level: "none",
                    par_request_expiry: 1,
                    token_quota: {
                        client_credentials: {},
                    },
                    resource_server_identifier: "resource_server_identifier",
                },
            ],
        };
        const page = await client.clients.list({
            fields: "fields",
            include_fields: true,
            page: 1,
            per_page: 1,
            include_totals: true,
            is_global: true,
            is_first_party: true,
            app_type: "app_type",
            q: "q",
        });

        expect(expected.clients).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.clients).toEqual(nextPage.data);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/clients").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.clients.list();
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/clients").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.clients.list();
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/clients").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.clients.list();
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("list (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/clients").respondWith().statusCode(429).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.clients.list();
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name" };
        const rawResponseBody = {
            client_id: "client_id",
            tenant: "tenant",
            name: "name",
            description: "description",
            global: true,
            client_secret: "client_secret",
            app_type: "native",
            logo_uri: "logo_uri",
            is_first_party: true,
            oidc_conformant: true,
            callbacks: ["callbacks"],
            allowed_origins: ["allowed_origins"],
            web_origins: ["web_origins"],
            client_aliases: ["client_aliases"],
            allowed_clients: ["allowed_clients"],
            allowed_logout_urls: ["allowed_logout_urls"],
            session_transfer: {
                can_create_session_transfer_token: true,
                enforce_cascade_revocation: true,
                allowed_authentication_methods: ["cookie"],
                enforce_device_binding: "ip",
                allow_refresh_token: true,
                enforce_online_refresh_tokens: true,
            },
            oidc_logout: {
                backchannel_logout_urls: ["backchannel_logout_urls"],
                backchannel_logout_initiators: { mode: "custom", selected_initiators: ["rp-logout"] },
                backchannel_logout_session_metadata: { include: true },
            },
            grant_types: ["grant_types"],
            jwt_configuration: { lifetime_in_seconds: 1, secret_encoded: true, scopes: { key: "value" }, alg: "HS256" },
            signing_keys: [{ pkcs7: "pkcs7", cert: "cert", subject: "subject" }],
            encryption_key: { pub: "pub", cert: "cert", subject: "subject" },
            sso: true,
            sso_disabled: true,
            cross_origin_authentication: true,
            cross_origin_loc: "cross_origin_loc",
            custom_login_page_on: true,
            custom_login_page: "custom_login_page",
            custom_login_page_preview: "custom_login_page_preview",
            form_template: "form_template",
            addons: {
                aws: { principal: "principal", role: "role", lifetime_in_seconds: 1 },
                azure_blob: {
                    accountName: "accountName",
                    storageAccessKey: "storageAccessKey",
                    containerName: "containerName",
                    blobName: "blobName",
                    expiration: 1,
                    signedIdentifier: "signedIdentifier",
                    blob_read: true,
                    blob_write: true,
                    blob_delete: true,
                    container_read: true,
                    container_write: true,
                    container_delete: true,
                    container_list: true,
                },
                azure_sb: {
                    namespace: "namespace",
                    sasKeyName: "sasKeyName",
                    sasKey: "sasKey",
                    entityPath: "entityPath",
                    expiration: 1,
                },
                rms: { url: "url" },
                mscrm: { url: "url" },
                slack: { team: "team" },
                sentry: { org_slug: "org_slug", base_url: "base_url" },
                box: { key: "value" },
                cloudbees: { key: "value" },
                concur: { key: "value" },
                dropbox: { key: "value" },
                echosign: { domain: "domain" },
                egnyte: { domain: "domain" },
                firebase: {
                    secret: "secret",
                    private_key_id: "private_key_id",
                    private_key: "private_key",
                    client_email: "client_email",
                    lifetime_in_seconds: 1,
                },
                newrelic: { account: "account" },
                office365: { domain: "domain", connection: "connection" },
                salesforce: { entity_id: "entity_id" },
                salesforce_api: {
                    clientid: "clientid",
                    principal: "principal",
                    communityName: "communityName",
                    community_url_section: "community_url_section",
                },
                salesforce_sandbox_api: {
                    clientid: "clientid",
                    principal: "principal",
                    communityName: "communityName",
                    community_url_section: "community_url_section",
                },
                samlp: {
                    mappings: { key: "value" },
                    audience: "audience",
                    recipient: "recipient",
                    createUpnClaim: true,
                    mapUnknownClaimsAsIs: true,
                    passthroughClaimsWithNoMapping: true,
                    mapIdentities: true,
                    signatureAlgorithm: "signatureAlgorithm",
                    digestAlgorithm: "digestAlgorithm",
                    issuer: "issuer",
                    destination: "destination",
                    lifetimeInSeconds: 1,
                    signResponse: true,
                    nameIdentifierFormat: "nameIdentifierFormat",
                    nameIdentifierProbes: ["nameIdentifierProbes"],
                    authnContextClassRef: "authnContextClassRef",
                },
                layer: {
                    providerId: "providerId",
                    keyId: "keyId",
                    privateKey: "privateKey",
                    principal: "principal",
                    expiration: 1,
                },
                sap_api: {
                    clientid: "clientid",
                    usernameAttribute: "usernameAttribute",
                    tokenEndpointUrl: "tokenEndpointUrl",
                    scope: "scope",
                    servicePassword: "servicePassword",
                    nameIdentifierFormat: "nameIdentifierFormat",
                },
                sharepoint: { url: "url", external_url: ["external_url"] },
                springcm: { acsurl: "acsurl" },
                wams: { masterkey: "masterkey" },
                wsfed: { key: "value" },
                zendesk: { accountName: "accountName" },
                zoom: { account: "account" },
                sso_integration: { name: "name", version: "version" },
            },
            token_endpoint_auth_method: "none",
            client_metadata: { key: "value" },
            mobile: {
                android: {
                    app_package_name: "app_package_name",
                    sha256_cert_fingerprints: ["sha256_cert_fingerprints"],
                },
                ios: { team_id: "team_id", app_bundle_identifier: "app_bundle_identifier" },
            },
            initiate_login_uri: "initiate_login_uri",
            refresh_token: {
                rotation_type: "rotating",
                expiration_type: "expiring",
                leeway: 1,
                token_lifetime: 1,
                infinite_token_lifetime: true,
                idle_token_lifetime: 1,
                infinite_idle_token_lifetime: true,
            },
            default_organization: { organization_id: "organization_id", flows: ["client_credentials"] },
            organization_usage: "deny",
            organization_require_behavior: "no_prompt",
            organization_discovery_methods: ["email"],
            client_authentication_methods: {
                private_key_jwt: { credentials: [{ id: "id" }] },
                tls_client_auth: { credentials: [{ id: "id" }] },
                self_signed_tls_client_auth: { credentials: [{ id: "id" }] },
            },
            require_pushed_authorization_requests: true,
            require_proof_of_possession: true,
            signed_request_object: { required: true, credentials: [{ id: "id" }] },
            compliance_level: "none",
            par_request_expiry: 1,
            token_quota: { client_credentials: { enforce: true, per_day: 1, per_hour: 1 } },
            resource_server_identifier: "resource_server_identifier",
        };
        server
            .mockEndpoint()
            .post("/clients")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.clients.create({
            name: "name",
        });
        expect(response).toEqual({
            client_id: "client_id",
            tenant: "tenant",
            name: "name",
            description: "description",
            global: true,
            client_secret: "client_secret",
            app_type: "native",
            logo_uri: "logo_uri",
            is_first_party: true,
            oidc_conformant: true,
            callbacks: ["callbacks"],
            allowed_origins: ["allowed_origins"],
            web_origins: ["web_origins"],
            client_aliases: ["client_aliases"],
            allowed_clients: ["allowed_clients"],
            allowed_logout_urls: ["allowed_logout_urls"],
            session_transfer: {
                can_create_session_transfer_token: true,
                enforce_cascade_revocation: true,
                allowed_authentication_methods: ["cookie"],
                enforce_device_binding: "ip",
                allow_refresh_token: true,
                enforce_online_refresh_tokens: true,
            },
            oidc_logout: {
                backchannel_logout_urls: ["backchannel_logout_urls"],
                backchannel_logout_initiators: {
                    mode: "custom",
                    selected_initiators: ["rp-logout"],
                },
                backchannel_logout_session_metadata: {
                    include: true,
                },
            },
            grant_types: ["grant_types"],
            jwt_configuration: {
                lifetime_in_seconds: 1,
                secret_encoded: true,
                scopes: {
                    key: "value",
                },
                alg: "HS256",
            },
            signing_keys: [
                {
                    pkcs7: "pkcs7",
                    cert: "cert",
                    subject: "subject",
                },
            ],
            encryption_key: {
                pub: "pub",
                cert: "cert",
                subject: "subject",
            },
            sso: true,
            sso_disabled: true,
            cross_origin_authentication: true,
            cross_origin_loc: "cross_origin_loc",
            custom_login_page_on: true,
            custom_login_page: "custom_login_page",
            custom_login_page_preview: "custom_login_page_preview",
            form_template: "form_template",
            addons: {
                aws: {
                    principal: "principal",
                    role: "role",
                    lifetime_in_seconds: 1,
                },
                azure_blob: {
                    accountName: "accountName",
                    storageAccessKey: "storageAccessKey",
                    containerName: "containerName",
                    blobName: "blobName",
                    expiration: 1,
                    signedIdentifier: "signedIdentifier",
                    blob_read: true,
                    blob_write: true,
                    blob_delete: true,
                    container_read: true,
                    container_write: true,
                    container_delete: true,
                    container_list: true,
                },
                azure_sb: {
                    namespace: "namespace",
                    sasKeyName: "sasKeyName",
                    sasKey: "sasKey",
                    entityPath: "entityPath",
                    expiration: 1,
                },
                rms: {
                    url: "url",
                },
                mscrm: {
                    url: "url",
                },
                slack: {
                    team: "team",
                },
                sentry: {
                    org_slug: "org_slug",
                    base_url: "base_url",
                },
                box: {
                    key: "value",
                },
                cloudbees: {
                    key: "value",
                },
                concur: {
                    key: "value",
                },
                dropbox: {
                    key: "value",
                },
                echosign: {
                    domain: "domain",
                },
                egnyte: {
                    domain: "domain",
                },
                firebase: {
                    secret: "secret",
                    private_key_id: "private_key_id",
                    private_key: "private_key",
                    client_email: "client_email",
                    lifetime_in_seconds: 1,
                },
                newrelic: {
                    account: "account",
                },
                office365: {
                    domain: "domain",
                    connection: "connection",
                },
                salesforce: {
                    entity_id: "entity_id",
                },
                salesforce_api: {
                    clientid: "clientid",
                    principal: "principal",
                    communityName: "communityName",
                    community_url_section: "community_url_section",
                },
                salesforce_sandbox_api: {
                    clientid: "clientid",
                    principal: "principal",
                    communityName: "communityName",
                    community_url_section: "community_url_section",
                },
                samlp: {
                    mappings: {
                        key: "value",
                    },
                    audience: "audience",
                    recipient: "recipient",
                    createUpnClaim: true,
                    mapUnknownClaimsAsIs: true,
                    passthroughClaimsWithNoMapping: true,
                    mapIdentities: true,
                    signatureAlgorithm: "signatureAlgorithm",
                    digestAlgorithm: "digestAlgorithm",
                    issuer: "issuer",
                    destination: "destination",
                    lifetimeInSeconds: 1,
                    signResponse: true,
                    nameIdentifierFormat: "nameIdentifierFormat",
                    nameIdentifierProbes: ["nameIdentifierProbes"],
                    authnContextClassRef: "authnContextClassRef",
                },
                layer: {
                    providerId: "providerId",
                    keyId: "keyId",
                    privateKey: "privateKey",
                    principal: "principal",
                    expiration: 1,
                },
                sap_api: {
                    clientid: "clientid",
                    usernameAttribute: "usernameAttribute",
                    tokenEndpointUrl: "tokenEndpointUrl",
                    scope: "scope",
                    servicePassword: "servicePassword",
                    nameIdentifierFormat: "nameIdentifierFormat",
                },
                sharepoint: {
                    url: "url",
                    external_url: ["external_url"],
                },
                springcm: {
                    acsurl: "acsurl",
                },
                wams: {
                    masterkey: "masterkey",
                },
                wsfed: {
                    key: "value",
                },
                zendesk: {
                    accountName: "accountName",
                },
                zoom: {
                    account: "account",
                },
                sso_integration: {
                    name: "name",
                    version: "version",
                },
            },
            token_endpoint_auth_method: "none",
            client_metadata: {
                key: "value",
            },
            mobile: {
                android: {
                    app_package_name: "app_package_name",
                    sha256_cert_fingerprints: ["sha256_cert_fingerprints"],
                },
                ios: {
                    team_id: "team_id",
                    app_bundle_identifier: "app_bundle_identifier",
                },
            },
            initiate_login_uri: "initiate_login_uri",
            refresh_token: {
                rotation_type: "rotating",
                expiration_type: "expiring",
                leeway: 1,
                token_lifetime: 1,
                infinite_token_lifetime: true,
                idle_token_lifetime: 1,
                infinite_idle_token_lifetime: true,
            },
            default_organization: {
                organization_id: "organization_id",
                flows: ["client_credentials"],
            },
            organization_usage: "deny",
            organization_require_behavior: "no_prompt",
            organization_discovery_methods: ["email"],
            client_authentication_methods: {
                private_key_jwt: {
                    credentials: [
                        {
                            id: "id",
                        },
                    ],
                },
                tls_client_auth: {
                    credentials: [
                        {
                            id: "id",
                        },
                    ],
                },
                self_signed_tls_client_auth: {
                    credentials: [
                        {
                            id: "id",
                        },
                    ],
                },
            },
            require_pushed_authorization_requests: true,
            require_proof_of_possession: true,
            signed_request_object: {
                required: true,
                credentials: [
                    {
                        id: "id",
                    },
                ],
            },
            compliance_level: "none",
            par_request_expiry: 1,
            token_quota: {
                client_credentials: {
                    enforce: true,
                    per_day: 1,
                    per_hour: 1,
                },
            },
            resource_server_identifier: "resource_server_identifier",
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/clients")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.create({
                name: "name",
            });
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("create (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/clients")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.create({
                name: "name",
            });
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("create (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/clients")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.create({
                name: "name",
            });
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("create (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/clients")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(409)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.create({
                name: "name",
            });
        }).rejects.toThrow(Management.ConflictError);
    });

    test("create (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/clients")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.create({
                name: "name",
            });
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            client_id: "client_id",
            tenant: "tenant",
            name: "name",
            description: "description",
            global: true,
            client_secret: "client_secret",
            app_type: "native",
            logo_uri: "logo_uri",
            is_first_party: true,
            oidc_conformant: true,
            callbacks: ["callbacks"],
            allowed_origins: ["allowed_origins"],
            web_origins: ["web_origins"],
            client_aliases: ["client_aliases"],
            allowed_clients: ["allowed_clients"],
            allowed_logout_urls: ["allowed_logout_urls"],
            session_transfer: {
                can_create_session_transfer_token: true,
                enforce_cascade_revocation: true,
                allowed_authentication_methods: ["cookie"],
                enforce_device_binding: "ip",
                allow_refresh_token: true,
                enforce_online_refresh_tokens: true,
            },
            oidc_logout: {
                backchannel_logout_urls: ["backchannel_logout_urls"],
                backchannel_logout_initiators: { mode: "custom", selected_initiators: ["rp-logout"] },
                backchannel_logout_session_metadata: { include: true },
            },
            grant_types: ["grant_types"],
            jwt_configuration: { lifetime_in_seconds: 1, secret_encoded: true, scopes: { key: "value" }, alg: "HS256" },
            signing_keys: [{ pkcs7: "pkcs7", cert: "cert", subject: "subject" }],
            encryption_key: { pub: "pub", cert: "cert", subject: "subject" },
            sso: true,
            sso_disabled: true,
            cross_origin_authentication: true,
            cross_origin_loc: "cross_origin_loc",
            custom_login_page_on: true,
            custom_login_page: "custom_login_page",
            custom_login_page_preview: "custom_login_page_preview",
            form_template: "form_template",
            addons: {
                aws: { principal: "principal", role: "role", lifetime_in_seconds: 1 },
                azure_blob: {
                    accountName: "accountName",
                    storageAccessKey: "storageAccessKey",
                    containerName: "containerName",
                    blobName: "blobName",
                    expiration: 1,
                    signedIdentifier: "signedIdentifier",
                    blob_read: true,
                    blob_write: true,
                    blob_delete: true,
                    container_read: true,
                    container_write: true,
                    container_delete: true,
                    container_list: true,
                },
                azure_sb: {
                    namespace: "namespace",
                    sasKeyName: "sasKeyName",
                    sasKey: "sasKey",
                    entityPath: "entityPath",
                    expiration: 1,
                },
                rms: { url: "url" },
                mscrm: { url: "url" },
                slack: { team: "team" },
                sentry: { org_slug: "org_slug", base_url: "base_url" },
                box: { key: "value" },
                cloudbees: { key: "value" },
                concur: { key: "value" },
                dropbox: { key: "value" },
                echosign: { domain: "domain" },
                egnyte: { domain: "domain" },
                firebase: {
                    secret: "secret",
                    private_key_id: "private_key_id",
                    private_key: "private_key",
                    client_email: "client_email",
                    lifetime_in_seconds: 1,
                },
                newrelic: { account: "account" },
                office365: { domain: "domain", connection: "connection" },
                salesforce: { entity_id: "entity_id" },
                salesforce_api: {
                    clientid: "clientid",
                    principal: "principal",
                    communityName: "communityName",
                    community_url_section: "community_url_section",
                },
                salesforce_sandbox_api: {
                    clientid: "clientid",
                    principal: "principal",
                    communityName: "communityName",
                    community_url_section: "community_url_section",
                },
                samlp: {
                    mappings: { key: "value" },
                    audience: "audience",
                    recipient: "recipient",
                    createUpnClaim: true,
                    mapUnknownClaimsAsIs: true,
                    passthroughClaimsWithNoMapping: true,
                    mapIdentities: true,
                    signatureAlgorithm: "signatureAlgorithm",
                    digestAlgorithm: "digestAlgorithm",
                    issuer: "issuer",
                    destination: "destination",
                    lifetimeInSeconds: 1,
                    signResponse: true,
                    nameIdentifierFormat: "nameIdentifierFormat",
                    nameIdentifierProbes: ["nameIdentifierProbes"],
                    authnContextClassRef: "authnContextClassRef",
                },
                layer: {
                    providerId: "providerId",
                    keyId: "keyId",
                    privateKey: "privateKey",
                    principal: "principal",
                    expiration: 1,
                },
                sap_api: {
                    clientid: "clientid",
                    usernameAttribute: "usernameAttribute",
                    tokenEndpointUrl: "tokenEndpointUrl",
                    scope: "scope",
                    servicePassword: "servicePassword",
                    nameIdentifierFormat: "nameIdentifierFormat",
                },
                sharepoint: { url: "url", external_url: ["external_url"] },
                springcm: { acsurl: "acsurl" },
                wams: { masterkey: "masterkey" },
                wsfed: { key: "value" },
                zendesk: { accountName: "accountName" },
                zoom: { account: "account" },
                sso_integration: { name: "name", version: "version" },
            },
            token_endpoint_auth_method: "none",
            client_metadata: { key: "value" },
            mobile: {
                android: {
                    app_package_name: "app_package_name",
                    sha256_cert_fingerprints: ["sha256_cert_fingerprints"],
                },
                ios: { team_id: "team_id", app_bundle_identifier: "app_bundle_identifier" },
            },
            initiate_login_uri: "initiate_login_uri",
            refresh_token: {
                rotation_type: "rotating",
                expiration_type: "expiring",
                leeway: 1,
                token_lifetime: 1,
                infinite_token_lifetime: true,
                idle_token_lifetime: 1,
                infinite_idle_token_lifetime: true,
            },
            default_organization: { organization_id: "organization_id", flows: ["client_credentials"] },
            organization_usage: "deny",
            organization_require_behavior: "no_prompt",
            organization_discovery_methods: ["email"],
            client_authentication_methods: {
                private_key_jwt: { credentials: [{ id: "id" }] },
                tls_client_auth: { credentials: [{ id: "id" }] },
                self_signed_tls_client_auth: { credentials: [{ id: "id" }] },
            },
            require_pushed_authorization_requests: true,
            require_proof_of_possession: true,
            signed_request_object: { required: true, credentials: [{ id: "id" }] },
            compliance_level: "none",
            par_request_expiry: 1,
            token_quota: { client_credentials: { enforce: true, per_day: 1, per_hour: 1 } },
            resource_server_identifier: "resource_server_identifier",
        };
        server.mockEndpoint().get("/clients/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.clients.get("id", {
            fields: "fields",
            include_fields: true,
        });
        expect(response).toEqual({
            client_id: "client_id",
            tenant: "tenant",
            name: "name",
            description: "description",
            global: true,
            client_secret: "client_secret",
            app_type: "native",
            logo_uri: "logo_uri",
            is_first_party: true,
            oidc_conformant: true,
            callbacks: ["callbacks"],
            allowed_origins: ["allowed_origins"],
            web_origins: ["web_origins"],
            client_aliases: ["client_aliases"],
            allowed_clients: ["allowed_clients"],
            allowed_logout_urls: ["allowed_logout_urls"],
            session_transfer: {
                can_create_session_transfer_token: true,
                enforce_cascade_revocation: true,
                allowed_authentication_methods: ["cookie"],
                enforce_device_binding: "ip",
                allow_refresh_token: true,
                enforce_online_refresh_tokens: true,
            },
            oidc_logout: {
                backchannel_logout_urls: ["backchannel_logout_urls"],
                backchannel_logout_initiators: {
                    mode: "custom",
                    selected_initiators: ["rp-logout"],
                },
                backchannel_logout_session_metadata: {
                    include: true,
                },
            },
            grant_types: ["grant_types"],
            jwt_configuration: {
                lifetime_in_seconds: 1,
                secret_encoded: true,
                scopes: {
                    key: "value",
                },
                alg: "HS256",
            },
            signing_keys: [
                {
                    pkcs7: "pkcs7",
                    cert: "cert",
                    subject: "subject",
                },
            ],
            encryption_key: {
                pub: "pub",
                cert: "cert",
                subject: "subject",
            },
            sso: true,
            sso_disabled: true,
            cross_origin_authentication: true,
            cross_origin_loc: "cross_origin_loc",
            custom_login_page_on: true,
            custom_login_page: "custom_login_page",
            custom_login_page_preview: "custom_login_page_preview",
            form_template: "form_template",
            addons: {
                aws: {
                    principal: "principal",
                    role: "role",
                    lifetime_in_seconds: 1,
                },
                azure_blob: {
                    accountName: "accountName",
                    storageAccessKey: "storageAccessKey",
                    containerName: "containerName",
                    blobName: "blobName",
                    expiration: 1,
                    signedIdentifier: "signedIdentifier",
                    blob_read: true,
                    blob_write: true,
                    blob_delete: true,
                    container_read: true,
                    container_write: true,
                    container_delete: true,
                    container_list: true,
                },
                azure_sb: {
                    namespace: "namespace",
                    sasKeyName: "sasKeyName",
                    sasKey: "sasKey",
                    entityPath: "entityPath",
                    expiration: 1,
                },
                rms: {
                    url: "url",
                },
                mscrm: {
                    url: "url",
                },
                slack: {
                    team: "team",
                },
                sentry: {
                    org_slug: "org_slug",
                    base_url: "base_url",
                },
                box: {
                    key: "value",
                },
                cloudbees: {
                    key: "value",
                },
                concur: {
                    key: "value",
                },
                dropbox: {
                    key: "value",
                },
                echosign: {
                    domain: "domain",
                },
                egnyte: {
                    domain: "domain",
                },
                firebase: {
                    secret: "secret",
                    private_key_id: "private_key_id",
                    private_key: "private_key",
                    client_email: "client_email",
                    lifetime_in_seconds: 1,
                },
                newrelic: {
                    account: "account",
                },
                office365: {
                    domain: "domain",
                    connection: "connection",
                },
                salesforce: {
                    entity_id: "entity_id",
                },
                salesforce_api: {
                    clientid: "clientid",
                    principal: "principal",
                    communityName: "communityName",
                    community_url_section: "community_url_section",
                },
                salesforce_sandbox_api: {
                    clientid: "clientid",
                    principal: "principal",
                    communityName: "communityName",
                    community_url_section: "community_url_section",
                },
                samlp: {
                    mappings: {
                        key: "value",
                    },
                    audience: "audience",
                    recipient: "recipient",
                    createUpnClaim: true,
                    mapUnknownClaimsAsIs: true,
                    passthroughClaimsWithNoMapping: true,
                    mapIdentities: true,
                    signatureAlgorithm: "signatureAlgorithm",
                    digestAlgorithm: "digestAlgorithm",
                    issuer: "issuer",
                    destination: "destination",
                    lifetimeInSeconds: 1,
                    signResponse: true,
                    nameIdentifierFormat: "nameIdentifierFormat",
                    nameIdentifierProbes: ["nameIdentifierProbes"],
                    authnContextClassRef: "authnContextClassRef",
                },
                layer: {
                    providerId: "providerId",
                    keyId: "keyId",
                    privateKey: "privateKey",
                    principal: "principal",
                    expiration: 1,
                },
                sap_api: {
                    clientid: "clientid",
                    usernameAttribute: "usernameAttribute",
                    tokenEndpointUrl: "tokenEndpointUrl",
                    scope: "scope",
                    servicePassword: "servicePassword",
                    nameIdentifierFormat: "nameIdentifierFormat",
                },
                sharepoint: {
                    url: "url",
                    external_url: ["external_url"],
                },
                springcm: {
                    acsurl: "acsurl",
                },
                wams: {
                    masterkey: "masterkey",
                },
                wsfed: {
                    key: "value",
                },
                zendesk: {
                    accountName: "accountName",
                },
                zoom: {
                    account: "account",
                },
                sso_integration: {
                    name: "name",
                    version: "version",
                },
            },
            token_endpoint_auth_method: "none",
            client_metadata: {
                key: "value",
            },
            mobile: {
                android: {
                    app_package_name: "app_package_name",
                    sha256_cert_fingerprints: ["sha256_cert_fingerprints"],
                },
                ios: {
                    team_id: "team_id",
                    app_bundle_identifier: "app_bundle_identifier",
                },
            },
            initiate_login_uri: "initiate_login_uri",
            refresh_token: {
                rotation_type: "rotating",
                expiration_type: "expiring",
                leeway: 1,
                token_lifetime: 1,
                infinite_token_lifetime: true,
                idle_token_lifetime: 1,
                infinite_idle_token_lifetime: true,
            },
            default_organization: {
                organization_id: "organization_id",
                flows: ["client_credentials"],
            },
            organization_usage: "deny",
            organization_require_behavior: "no_prompt",
            organization_discovery_methods: ["email"],
            client_authentication_methods: {
                private_key_jwt: {
                    credentials: [
                        {
                            id: "id",
                        },
                    ],
                },
                tls_client_auth: {
                    credentials: [
                        {
                            id: "id",
                        },
                    ],
                },
                self_signed_tls_client_auth: {
                    credentials: [
                        {
                            id: "id",
                        },
                    ],
                },
            },
            require_pushed_authorization_requests: true,
            require_proof_of_possession: true,
            signed_request_object: {
                required: true,
                credentials: [
                    {
                        id: "id",
                    },
                ],
            },
            compliance_level: "none",
            par_request_expiry: 1,
            token_quota: {
                client_credentials: {
                    enforce: true,
                    per_day: 1,
                    per_hour: 1,
                },
            },
            resource_server_identifier: "resource_server_identifier",
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/clients/id").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.clients.get("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/clients/id").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.clients.get("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/clients/id").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.clients.get("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("get (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/clients/id").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.clients.get("id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("get (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/clients/id").respondWith().statusCode(429).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.clients.get("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/clients/id").respondWith().statusCode(200).build();

        const response = await client.clients.delete("id");
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/clients/id").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.clients.delete("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/clients/id").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.clients.delete("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("delete (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/clients/id").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.clients.delete("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("delete (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/clients/id").respondWith().statusCode(429).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.clients.delete("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("update (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            client_id: "client_id",
            tenant: "tenant",
            name: "name",
            description: "description",
            global: true,
            client_secret: "client_secret",
            app_type: "native",
            logo_uri: "logo_uri",
            is_first_party: true,
            oidc_conformant: true,
            callbacks: ["callbacks"],
            allowed_origins: ["allowed_origins"],
            web_origins: ["web_origins"],
            client_aliases: ["client_aliases"],
            allowed_clients: ["allowed_clients"],
            allowed_logout_urls: ["allowed_logout_urls"],
            session_transfer: {
                can_create_session_transfer_token: true,
                enforce_cascade_revocation: true,
                allowed_authentication_methods: ["cookie"],
                enforce_device_binding: "ip",
                allow_refresh_token: true,
                enforce_online_refresh_tokens: true,
            },
            oidc_logout: {
                backchannel_logout_urls: ["backchannel_logout_urls"],
                backchannel_logout_initiators: { mode: "custom", selected_initiators: ["rp-logout"] },
                backchannel_logout_session_metadata: { include: true },
            },
            grant_types: ["grant_types"],
            jwt_configuration: { lifetime_in_seconds: 1, secret_encoded: true, scopes: { key: "value" }, alg: "HS256" },
            signing_keys: [{ pkcs7: "pkcs7", cert: "cert", subject: "subject" }],
            encryption_key: { pub: "pub", cert: "cert", subject: "subject" },
            sso: true,
            sso_disabled: true,
            cross_origin_authentication: true,
            cross_origin_loc: "cross_origin_loc",
            custom_login_page_on: true,
            custom_login_page: "custom_login_page",
            custom_login_page_preview: "custom_login_page_preview",
            form_template: "form_template",
            addons: {
                aws: { principal: "principal", role: "role", lifetime_in_seconds: 1 },
                azure_blob: {
                    accountName: "accountName",
                    storageAccessKey: "storageAccessKey",
                    containerName: "containerName",
                    blobName: "blobName",
                    expiration: 1,
                    signedIdentifier: "signedIdentifier",
                    blob_read: true,
                    blob_write: true,
                    blob_delete: true,
                    container_read: true,
                    container_write: true,
                    container_delete: true,
                    container_list: true,
                },
                azure_sb: {
                    namespace: "namespace",
                    sasKeyName: "sasKeyName",
                    sasKey: "sasKey",
                    entityPath: "entityPath",
                    expiration: 1,
                },
                rms: { url: "url" },
                mscrm: { url: "url" },
                slack: { team: "team" },
                sentry: { org_slug: "org_slug", base_url: "base_url" },
                box: { key: "value" },
                cloudbees: { key: "value" },
                concur: { key: "value" },
                dropbox: { key: "value" },
                echosign: { domain: "domain" },
                egnyte: { domain: "domain" },
                firebase: {
                    secret: "secret",
                    private_key_id: "private_key_id",
                    private_key: "private_key",
                    client_email: "client_email",
                    lifetime_in_seconds: 1,
                },
                newrelic: { account: "account" },
                office365: { domain: "domain", connection: "connection" },
                salesforce: { entity_id: "entity_id" },
                salesforce_api: {
                    clientid: "clientid",
                    principal: "principal",
                    communityName: "communityName",
                    community_url_section: "community_url_section",
                },
                salesforce_sandbox_api: {
                    clientid: "clientid",
                    principal: "principal",
                    communityName: "communityName",
                    community_url_section: "community_url_section",
                },
                samlp: {
                    mappings: { key: "value" },
                    audience: "audience",
                    recipient: "recipient",
                    createUpnClaim: true,
                    mapUnknownClaimsAsIs: true,
                    passthroughClaimsWithNoMapping: true,
                    mapIdentities: true,
                    signatureAlgorithm: "signatureAlgorithm",
                    digestAlgorithm: "digestAlgorithm",
                    issuer: "issuer",
                    destination: "destination",
                    lifetimeInSeconds: 1,
                    signResponse: true,
                    nameIdentifierFormat: "nameIdentifierFormat",
                    nameIdentifierProbes: ["nameIdentifierProbes"],
                    authnContextClassRef: "authnContextClassRef",
                },
                layer: {
                    providerId: "providerId",
                    keyId: "keyId",
                    privateKey: "privateKey",
                    principal: "principal",
                    expiration: 1,
                },
                sap_api: {
                    clientid: "clientid",
                    usernameAttribute: "usernameAttribute",
                    tokenEndpointUrl: "tokenEndpointUrl",
                    scope: "scope",
                    servicePassword: "servicePassword",
                    nameIdentifierFormat: "nameIdentifierFormat",
                },
                sharepoint: { url: "url", external_url: ["external_url"] },
                springcm: { acsurl: "acsurl" },
                wams: { masterkey: "masterkey" },
                wsfed: { key: "value" },
                zendesk: { accountName: "accountName" },
                zoom: { account: "account" },
                sso_integration: { name: "name", version: "version" },
            },
            token_endpoint_auth_method: "none",
            client_metadata: { key: "value" },
            mobile: {
                android: {
                    app_package_name: "app_package_name",
                    sha256_cert_fingerprints: ["sha256_cert_fingerprints"],
                },
                ios: { team_id: "team_id", app_bundle_identifier: "app_bundle_identifier" },
            },
            initiate_login_uri: "initiate_login_uri",
            refresh_token: {
                rotation_type: "rotating",
                expiration_type: "expiring",
                leeway: 1,
                token_lifetime: 1,
                infinite_token_lifetime: true,
                idle_token_lifetime: 1,
                infinite_idle_token_lifetime: true,
            },
            default_organization: { organization_id: "organization_id", flows: ["client_credentials"] },
            organization_usage: "deny",
            organization_require_behavior: "no_prompt",
            organization_discovery_methods: ["email"],
            client_authentication_methods: {
                private_key_jwt: { credentials: [{ id: "id" }] },
                tls_client_auth: { credentials: [{ id: "id" }] },
                self_signed_tls_client_auth: { credentials: [{ id: "id" }] },
            },
            require_pushed_authorization_requests: true,
            require_proof_of_possession: true,
            signed_request_object: { required: true, credentials: [{ id: "id" }] },
            compliance_level: "none",
            par_request_expiry: 1,
            token_quota: { client_credentials: { enforce: true, per_day: 1, per_hour: 1 } },
            resource_server_identifier: "resource_server_identifier",
        };
        server
            .mockEndpoint()
            .patch("/clients/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.clients.update("id");
        expect(response).toEqual({
            client_id: "client_id",
            tenant: "tenant",
            name: "name",
            description: "description",
            global: true,
            client_secret: "client_secret",
            app_type: "native",
            logo_uri: "logo_uri",
            is_first_party: true,
            oidc_conformant: true,
            callbacks: ["callbacks"],
            allowed_origins: ["allowed_origins"],
            web_origins: ["web_origins"],
            client_aliases: ["client_aliases"],
            allowed_clients: ["allowed_clients"],
            allowed_logout_urls: ["allowed_logout_urls"],
            session_transfer: {
                can_create_session_transfer_token: true,
                enforce_cascade_revocation: true,
                allowed_authentication_methods: ["cookie"],
                enforce_device_binding: "ip",
                allow_refresh_token: true,
                enforce_online_refresh_tokens: true,
            },
            oidc_logout: {
                backchannel_logout_urls: ["backchannel_logout_urls"],
                backchannel_logout_initiators: {
                    mode: "custom",
                    selected_initiators: ["rp-logout"],
                },
                backchannel_logout_session_metadata: {
                    include: true,
                },
            },
            grant_types: ["grant_types"],
            jwt_configuration: {
                lifetime_in_seconds: 1,
                secret_encoded: true,
                scopes: {
                    key: "value",
                },
                alg: "HS256",
            },
            signing_keys: [
                {
                    pkcs7: "pkcs7",
                    cert: "cert",
                    subject: "subject",
                },
            ],
            encryption_key: {
                pub: "pub",
                cert: "cert",
                subject: "subject",
            },
            sso: true,
            sso_disabled: true,
            cross_origin_authentication: true,
            cross_origin_loc: "cross_origin_loc",
            custom_login_page_on: true,
            custom_login_page: "custom_login_page",
            custom_login_page_preview: "custom_login_page_preview",
            form_template: "form_template",
            addons: {
                aws: {
                    principal: "principal",
                    role: "role",
                    lifetime_in_seconds: 1,
                },
                azure_blob: {
                    accountName: "accountName",
                    storageAccessKey: "storageAccessKey",
                    containerName: "containerName",
                    blobName: "blobName",
                    expiration: 1,
                    signedIdentifier: "signedIdentifier",
                    blob_read: true,
                    blob_write: true,
                    blob_delete: true,
                    container_read: true,
                    container_write: true,
                    container_delete: true,
                    container_list: true,
                },
                azure_sb: {
                    namespace: "namespace",
                    sasKeyName: "sasKeyName",
                    sasKey: "sasKey",
                    entityPath: "entityPath",
                    expiration: 1,
                },
                rms: {
                    url: "url",
                },
                mscrm: {
                    url: "url",
                },
                slack: {
                    team: "team",
                },
                sentry: {
                    org_slug: "org_slug",
                    base_url: "base_url",
                },
                box: {
                    key: "value",
                },
                cloudbees: {
                    key: "value",
                },
                concur: {
                    key: "value",
                },
                dropbox: {
                    key: "value",
                },
                echosign: {
                    domain: "domain",
                },
                egnyte: {
                    domain: "domain",
                },
                firebase: {
                    secret: "secret",
                    private_key_id: "private_key_id",
                    private_key: "private_key",
                    client_email: "client_email",
                    lifetime_in_seconds: 1,
                },
                newrelic: {
                    account: "account",
                },
                office365: {
                    domain: "domain",
                    connection: "connection",
                },
                salesforce: {
                    entity_id: "entity_id",
                },
                salesforce_api: {
                    clientid: "clientid",
                    principal: "principal",
                    communityName: "communityName",
                    community_url_section: "community_url_section",
                },
                salesforce_sandbox_api: {
                    clientid: "clientid",
                    principal: "principal",
                    communityName: "communityName",
                    community_url_section: "community_url_section",
                },
                samlp: {
                    mappings: {
                        key: "value",
                    },
                    audience: "audience",
                    recipient: "recipient",
                    createUpnClaim: true,
                    mapUnknownClaimsAsIs: true,
                    passthroughClaimsWithNoMapping: true,
                    mapIdentities: true,
                    signatureAlgorithm: "signatureAlgorithm",
                    digestAlgorithm: "digestAlgorithm",
                    issuer: "issuer",
                    destination: "destination",
                    lifetimeInSeconds: 1,
                    signResponse: true,
                    nameIdentifierFormat: "nameIdentifierFormat",
                    nameIdentifierProbes: ["nameIdentifierProbes"],
                    authnContextClassRef: "authnContextClassRef",
                },
                layer: {
                    providerId: "providerId",
                    keyId: "keyId",
                    privateKey: "privateKey",
                    principal: "principal",
                    expiration: 1,
                },
                sap_api: {
                    clientid: "clientid",
                    usernameAttribute: "usernameAttribute",
                    tokenEndpointUrl: "tokenEndpointUrl",
                    scope: "scope",
                    servicePassword: "servicePassword",
                    nameIdentifierFormat: "nameIdentifierFormat",
                },
                sharepoint: {
                    url: "url",
                    external_url: ["external_url"],
                },
                springcm: {
                    acsurl: "acsurl",
                },
                wams: {
                    masterkey: "masterkey",
                },
                wsfed: {
                    key: "value",
                },
                zendesk: {
                    accountName: "accountName",
                },
                zoom: {
                    account: "account",
                },
                sso_integration: {
                    name: "name",
                    version: "version",
                },
            },
            token_endpoint_auth_method: "none",
            client_metadata: {
                key: "value",
            },
            mobile: {
                android: {
                    app_package_name: "app_package_name",
                    sha256_cert_fingerprints: ["sha256_cert_fingerprints"],
                },
                ios: {
                    team_id: "team_id",
                    app_bundle_identifier: "app_bundle_identifier",
                },
            },
            initiate_login_uri: "initiate_login_uri",
            refresh_token: {
                rotation_type: "rotating",
                expiration_type: "expiring",
                leeway: 1,
                token_lifetime: 1,
                infinite_token_lifetime: true,
                idle_token_lifetime: 1,
                infinite_idle_token_lifetime: true,
            },
            default_organization: {
                organization_id: "organization_id",
                flows: ["client_credentials"],
            },
            organization_usage: "deny",
            organization_require_behavior: "no_prompt",
            organization_discovery_methods: ["email"],
            client_authentication_methods: {
                private_key_jwt: {
                    credentials: [
                        {
                            id: "id",
                        },
                    ],
                },
                tls_client_auth: {
                    credentials: [
                        {
                            id: "id",
                        },
                    ],
                },
                self_signed_tls_client_auth: {
                    credentials: [
                        {
                            id: "id",
                        },
                    ],
                },
            },
            require_pushed_authorization_requests: true,
            require_proof_of_possession: true,
            signed_request_object: {
                required: true,
                credentials: [
                    {
                        id: "id",
                    },
                ],
            },
            compliance_level: "none",
            par_request_expiry: 1,
            token_quota: {
                client_credentials: {
                    enforce: true,
                    per_day: 1,
                    per_hour: 1,
                },
            },
            resource_server_identifier: "resource_server_identifier",
        });
    });

    test("update (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/clients/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.update("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("update (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/clients/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.update("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("update (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/clients/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.update("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("update (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/clients/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.update("id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("update (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/clients/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.update("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("rotateSecret (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            client_id: "client_id",
            tenant: "tenant",
            name: "name",
            description: "description",
            global: true,
            client_secret: "client_secret",
            app_type: "native",
            logo_uri: "logo_uri",
            is_first_party: true,
            oidc_conformant: true,
            callbacks: ["callbacks"],
            allowed_origins: ["allowed_origins"],
            web_origins: ["web_origins"],
            client_aliases: ["client_aliases"],
            allowed_clients: ["allowed_clients"],
            allowed_logout_urls: ["allowed_logout_urls"],
            session_transfer: {
                can_create_session_transfer_token: true,
                enforce_cascade_revocation: true,
                allowed_authentication_methods: ["cookie"],
                enforce_device_binding: "ip",
                allow_refresh_token: true,
                enforce_online_refresh_tokens: true,
            },
            oidc_logout: {
                backchannel_logout_urls: ["backchannel_logout_urls"],
                backchannel_logout_initiators: { mode: "custom", selected_initiators: ["rp-logout"] },
                backchannel_logout_session_metadata: { include: true },
            },
            grant_types: ["grant_types"],
            jwt_configuration: { lifetime_in_seconds: 1, secret_encoded: true, scopes: { key: "value" }, alg: "HS256" },
            signing_keys: [{ pkcs7: "pkcs7", cert: "cert", subject: "subject" }],
            encryption_key: { pub: "pub", cert: "cert", subject: "subject" },
            sso: true,
            sso_disabled: true,
            cross_origin_authentication: true,
            cross_origin_loc: "cross_origin_loc",
            custom_login_page_on: true,
            custom_login_page: "custom_login_page",
            custom_login_page_preview: "custom_login_page_preview",
            form_template: "form_template",
            addons: {
                aws: { principal: "principal", role: "role", lifetime_in_seconds: 1 },
                azure_blob: {
                    accountName: "accountName",
                    storageAccessKey: "storageAccessKey",
                    containerName: "containerName",
                    blobName: "blobName",
                    expiration: 1,
                    signedIdentifier: "signedIdentifier",
                    blob_read: true,
                    blob_write: true,
                    blob_delete: true,
                    container_read: true,
                    container_write: true,
                    container_delete: true,
                    container_list: true,
                },
                azure_sb: {
                    namespace: "namespace",
                    sasKeyName: "sasKeyName",
                    sasKey: "sasKey",
                    entityPath: "entityPath",
                    expiration: 1,
                },
                rms: { url: "url" },
                mscrm: { url: "url" },
                slack: { team: "team" },
                sentry: { org_slug: "org_slug", base_url: "base_url" },
                box: { key: "value" },
                cloudbees: { key: "value" },
                concur: { key: "value" },
                dropbox: { key: "value" },
                echosign: { domain: "domain" },
                egnyte: { domain: "domain" },
                firebase: {
                    secret: "secret",
                    private_key_id: "private_key_id",
                    private_key: "private_key",
                    client_email: "client_email",
                    lifetime_in_seconds: 1,
                },
                newrelic: { account: "account" },
                office365: { domain: "domain", connection: "connection" },
                salesforce: { entity_id: "entity_id" },
                salesforce_api: {
                    clientid: "clientid",
                    principal: "principal",
                    communityName: "communityName",
                    community_url_section: "community_url_section",
                },
                salesforce_sandbox_api: {
                    clientid: "clientid",
                    principal: "principal",
                    communityName: "communityName",
                    community_url_section: "community_url_section",
                },
                samlp: {
                    mappings: { key: "value" },
                    audience: "audience",
                    recipient: "recipient",
                    createUpnClaim: true,
                    mapUnknownClaimsAsIs: true,
                    passthroughClaimsWithNoMapping: true,
                    mapIdentities: true,
                    signatureAlgorithm: "signatureAlgorithm",
                    digestAlgorithm: "digestAlgorithm",
                    issuer: "issuer",
                    destination: "destination",
                    lifetimeInSeconds: 1,
                    signResponse: true,
                    nameIdentifierFormat: "nameIdentifierFormat",
                    nameIdentifierProbes: ["nameIdentifierProbes"],
                    authnContextClassRef: "authnContextClassRef",
                },
                layer: {
                    providerId: "providerId",
                    keyId: "keyId",
                    privateKey: "privateKey",
                    principal: "principal",
                    expiration: 1,
                },
                sap_api: {
                    clientid: "clientid",
                    usernameAttribute: "usernameAttribute",
                    tokenEndpointUrl: "tokenEndpointUrl",
                    scope: "scope",
                    servicePassword: "servicePassword",
                    nameIdentifierFormat: "nameIdentifierFormat",
                },
                sharepoint: { url: "url", external_url: ["external_url"] },
                springcm: { acsurl: "acsurl" },
                wams: { masterkey: "masterkey" },
                wsfed: { key: "value" },
                zendesk: { accountName: "accountName" },
                zoom: { account: "account" },
                sso_integration: { name: "name", version: "version" },
            },
            token_endpoint_auth_method: "none",
            client_metadata: { key: "value" },
            mobile: {
                android: {
                    app_package_name: "app_package_name",
                    sha256_cert_fingerprints: ["sha256_cert_fingerprints"],
                },
                ios: { team_id: "team_id", app_bundle_identifier: "app_bundle_identifier" },
            },
            initiate_login_uri: "initiate_login_uri",
            refresh_token: {
                rotation_type: "rotating",
                expiration_type: "expiring",
                leeway: 1,
                token_lifetime: 1,
                infinite_token_lifetime: true,
                idle_token_lifetime: 1,
                infinite_idle_token_lifetime: true,
            },
            default_organization: { organization_id: "organization_id", flows: ["client_credentials"] },
            organization_usage: "deny",
            organization_require_behavior: "no_prompt",
            organization_discovery_methods: ["email"],
            client_authentication_methods: {
                private_key_jwt: { credentials: [{ id: "id" }] },
                tls_client_auth: { credentials: [{ id: "id" }] },
                self_signed_tls_client_auth: { credentials: [{ id: "id" }] },
            },
            require_pushed_authorization_requests: true,
            require_proof_of_possession: true,
            signed_request_object: { required: true, credentials: [{ id: "id" }] },
            compliance_level: "none",
            par_request_expiry: 1,
            token_quota: { client_credentials: { enforce: true, per_day: 1, per_hour: 1 } },
            resource_server_identifier: "resource_server_identifier",
        };
        server
            .mockEndpoint()
            .post("/clients/id/rotate-secret")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.clients.rotateSecret("id");
        expect(response).toEqual({
            client_id: "client_id",
            tenant: "tenant",
            name: "name",
            description: "description",
            global: true,
            client_secret: "client_secret",
            app_type: "native",
            logo_uri: "logo_uri",
            is_first_party: true,
            oidc_conformant: true,
            callbacks: ["callbacks"],
            allowed_origins: ["allowed_origins"],
            web_origins: ["web_origins"],
            client_aliases: ["client_aliases"],
            allowed_clients: ["allowed_clients"],
            allowed_logout_urls: ["allowed_logout_urls"],
            session_transfer: {
                can_create_session_transfer_token: true,
                enforce_cascade_revocation: true,
                allowed_authentication_methods: ["cookie"],
                enforce_device_binding: "ip",
                allow_refresh_token: true,
                enforce_online_refresh_tokens: true,
            },
            oidc_logout: {
                backchannel_logout_urls: ["backchannel_logout_urls"],
                backchannel_logout_initiators: {
                    mode: "custom",
                    selected_initiators: ["rp-logout"],
                },
                backchannel_logout_session_metadata: {
                    include: true,
                },
            },
            grant_types: ["grant_types"],
            jwt_configuration: {
                lifetime_in_seconds: 1,
                secret_encoded: true,
                scopes: {
                    key: "value",
                },
                alg: "HS256",
            },
            signing_keys: [
                {
                    pkcs7: "pkcs7",
                    cert: "cert",
                    subject: "subject",
                },
            ],
            encryption_key: {
                pub: "pub",
                cert: "cert",
                subject: "subject",
            },
            sso: true,
            sso_disabled: true,
            cross_origin_authentication: true,
            cross_origin_loc: "cross_origin_loc",
            custom_login_page_on: true,
            custom_login_page: "custom_login_page",
            custom_login_page_preview: "custom_login_page_preview",
            form_template: "form_template",
            addons: {
                aws: {
                    principal: "principal",
                    role: "role",
                    lifetime_in_seconds: 1,
                },
                azure_blob: {
                    accountName: "accountName",
                    storageAccessKey: "storageAccessKey",
                    containerName: "containerName",
                    blobName: "blobName",
                    expiration: 1,
                    signedIdentifier: "signedIdentifier",
                    blob_read: true,
                    blob_write: true,
                    blob_delete: true,
                    container_read: true,
                    container_write: true,
                    container_delete: true,
                    container_list: true,
                },
                azure_sb: {
                    namespace: "namespace",
                    sasKeyName: "sasKeyName",
                    sasKey: "sasKey",
                    entityPath: "entityPath",
                    expiration: 1,
                },
                rms: {
                    url: "url",
                },
                mscrm: {
                    url: "url",
                },
                slack: {
                    team: "team",
                },
                sentry: {
                    org_slug: "org_slug",
                    base_url: "base_url",
                },
                box: {
                    key: "value",
                },
                cloudbees: {
                    key: "value",
                },
                concur: {
                    key: "value",
                },
                dropbox: {
                    key: "value",
                },
                echosign: {
                    domain: "domain",
                },
                egnyte: {
                    domain: "domain",
                },
                firebase: {
                    secret: "secret",
                    private_key_id: "private_key_id",
                    private_key: "private_key",
                    client_email: "client_email",
                    lifetime_in_seconds: 1,
                },
                newrelic: {
                    account: "account",
                },
                office365: {
                    domain: "domain",
                    connection: "connection",
                },
                salesforce: {
                    entity_id: "entity_id",
                },
                salesforce_api: {
                    clientid: "clientid",
                    principal: "principal",
                    communityName: "communityName",
                    community_url_section: "community_url_section",
                },
                salesforce_sandbox_api: {
                    clientid: "clientid",
                    principal: "principal",
                    communityName: "communityName",
                    community_url_section: "community_url_section",
                },
                samlp: {
                    mappings: {
                        key: "value",
                    },
                    audience: "audience",
                    recipient: "recipient",
                    createUpnClaim: true,
                    mapUnknownClaimsAsIs: true,
                    passthroughClaimsWithNoMapping: true,
                    mapIdentities: true,
                    signatureAlgorithm: "signatureAlgorithm",
                    digestAlgorithm: "digestAlgorithm",
                    issuer: "issuer",
                    destination: "destination",
                    lifetimeInSeconds: 1,
                    signResponse: true,
                    nameIdentifierFormat: "nameIdentifierFormat",
                    nameIdentifierProbes: ["nameIdentifierProbes"],
                    authnContextClassRef: "authnContextClassRef",
                },
                layer: {
                    providerId: "providerId",
                    keyId: "keyId",
                    privateKey: "privateKey",
                    principal: "principal",
                    expiration: 1,
                },
                sap_api: {
                    clientid: "clientid",
                    usernameAttribute: "usernameAttribute",
                    tokenEndpointUrl: "tokenEndpointUrl",
                    scope: "scope",
                    servicePassword: "servicePassword",
                    nameIdentifierFormat: "nameIdentifierFormat",
                },
                sharepoint: {
                    url: "url",
                    external_url: ["external_url"],
                },
                springcm: {
                    acsurl: "acsurl",
                },
                wams: {
                    masterkey: "masterkey",
                },
                wsfed: {
                    key: "value",
                },
                zendesk: {
                    accountName: "accountName",
                },
                zoom: {
                    account: "account",
                },
                sso_integration: {
                    name: "name",
                    version: "version",
                },
            },
            token_endpoint_auth_method: "none",
            client_metadata: {
                key: "value",
            },
            mobile: {
                android: {
                    app_package_name: "app_package_name",
                    sha256_cert_fingerprints: ["sha256_cert_fingerprints"],
                },
                ios: {
                    team_id: "team_id",
                    app_bundle_identifier: "app_bundle_identifier",
                },
            },
            initiate_login_uri: "initiate_login_uri",
            refresh_token: {
                rotation_type: "rotating",
                expiration_type: "expiring",
                leeway: 1,
                token_lifetime: 1,
                infinite_token_lifetime: true,
                idle_token_lifetime: 1,
                infinite_idle_token_lifetime: true,
            },
            default_organization: {
                organization_id: "organization_id",
                flows: ["client_credentials"],
            },
            organization_usage: "deny",
            organization_require_behavior: "no_prompt",
            organization_discovery_methods: ["email"],
            client_authentication_methods: {
                private_key_jwt: {
                    credentials: [
                        {
                            id: "id",
                        },
                    ],
                },
                tls_client_auth: {
                    credentials: [
                        {
                            id: "id",
                        },
                    ],
                },
                self_signed_tls_client_auth: {
                    credentials: [
                        {
                            id: "id",
                        },
                    ],
                },
            },
            require_pushed_authorization_requests: true,
            require_proof_of_possession: true,
            signed_request_object: {
                required: true,
                credentials: [
                    {
                        id: "id",
                    },
                ],
            },
            compliance_level: "none",
            par_request_expiry: 1,
            token_quota: {
                client_credentials: {
                    enforce: true,
                    per_day: 1,
                    per_hour: 1,
                },
            },
            resource_server_identifier: "resource_server_identifier",
        });
    });

    test("rotateSecret (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/clients/id/rotate-secret")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.rotateSecret("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("rotateSecret (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/clients/id/rotate-secret")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.rotateSecret("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("rotateSecret (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/clients/id/rotate-secret")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.rotateSecret("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("rotateSecret (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/clients/id/rotate-secret")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.rotateSecret("id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("rotateSecret (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/clients/id/rotate-secret")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.clients.rotateSecret("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });
});
