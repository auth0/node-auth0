/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { ManagementClient } from "../../Client.js";

describe("SupplementalSignals", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { akamai_enabled: true };
        server
            .mockEndpoint()
            .get("/supplemental-signals")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.supplementalSignals.get();
        expect(response).toEqual({
            akamai_enabled: true,
        });
    });

    test("patch", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { akamai_enabled: true };
        const rawResponseBody = { akamai_enabled: true };
        server
            .mockEndpoint()
            .patch("/supplemental-signals")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.supplementalSignals.patch({
            akamai_enabled: true,
        });
        expect(response).toEqual({
            akamai_enabled: true,
        });
    });
});
