// This file was auto-generated by Fern from our API Definition.

import * as Management from "../../api/index";
import { ManagementClient } from "../../Client";
import { mockServerPool } from "../mock-server/MockServerPool";

describe("SupplementalSignals", () => {
    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { akamai_enabled: true };
        server
            .mockEndpoint()
            .get("/supplemental-signals")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.supplementalSignals.get();
        expect(response).toEqual({
            akamai_enabled: true,
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/supplemental-signals")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.supplementalSignals.get();
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/supplemental-signals")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.supplementalSignals.get();
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/supplemental-signals")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.supplementalSignals.get();
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("get (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/supplemental-signals")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.supplementalSignals.get();
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("patch (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { akamai_enabled: true };
        const rawResponseBody = { akamai_enabled: true };
        server
            .mockEndpoint()
            .patch("/supplemental-signals")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.supplementalSignals.patch({
            akamai_enabled: true,
        });
        expect(response).toEqual({
            akamai_enabled: true,
        });
    });

    test("patch (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { akamai_enabled: true };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/supplemental-signals")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.supplementalSignals.patch({
                akamai_enabled: true,
            });
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("patch (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { akamai_enabled: true };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/supplemental-signals")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.supplementalSignals.patch({
                akamai_enabled: true,
            });
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("patch (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { akamai_enabled: true };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/supplemental-signals")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.supplementalSignals.patch({
                akamai_enabled: true,
            });
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("patch (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { akamai_enabled: true };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/supplemental-signals")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.supplementalSignals.patch({
                akamai_enabled: true,
            });
        }).rejects.toThrow(Management.TooManyRequestsError);
    });
});
