/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../Client.js";

describe("Permissions", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            permissions: [
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
            ],
        };

        server
            .mockEndpoint()
            .post("/users/id/permissions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.users.permissions.create("id", {
            permissions: [
                {
                    resource_server_identifier: "resource_server_identifier",
                    permission_name: "permission_name",
                },
            ],
        });
        expect(response).toEqual(undefined);
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            permissions: [
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
            ],
        };

        server
            .mockEndpoint()
            .delete("/users/id/permissions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.users.permissions.delete("id", {
            permissions: [
                {
                    resource_server_identifier: "resource_server_identifier",
                    permission_name: "permission_name",
                },
            ],
        });
        expect(response).toEqual(undefined);
    });
});
