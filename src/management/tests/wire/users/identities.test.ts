/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../Client.js";
import * as Management from "../../../api/index.js";

describe("Identities", () => {
    test("link (e5a12ebf)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = [
            {
                connection: "connection",
                user_id: "user_id",
                provider: "provider",
                profileData: {
                    email: "email",
                    email_verified: true,
                    name: "name",
                    username: "username",
                    given_name: "given_name",
                    phone_number: "phone_number",
                    phone_verified: true,
                    family_name: "family_name",
                },
                isSocial: true,
                access_token: "access_token",
                access_token_secret: "access_token_secret",
                refresh_token: "refresh_token",
            },
        ];
        server
            .mockEndpoint()
            .post("/users/id/identities")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.users.identities.link("id");
        expect(response).toEqual([
            {
                connection: "connection",
                user_id: "user_id",
                provider: "provider",
                profileData: {
                    email: "email",
                    email_verified: true,
                    name: "name",
                    username: "username",
                    given_name: "given_name",
                    phone_number: "phone_number",
                    phone_verified: true,
                    family_name: "family_name",
                },
                isSocial: true,
                access_token: "access_token",
                access_token_secret: "access_token_secret",
                refresh_token: "refresh_token",
            },
        ]);
    });

    test("link (e4f14932)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            provider: undefined,
            connection_id: undefined,
            user_id: undefined,
            link_with: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/users/id/identities")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.identities.link("id", {
                provider: undefined,
                connection_id: undefined,
                user_id: undefined,
                link_with: undefined,
            });
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("link (a6f6708a)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            provider: undefined,
            connection_id: undefined,
            user_id: undefined,
            link_with: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/users/id/identities")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.identities.link("id", {
                provider: undefined,
                connection_id: undefined,
                user_id: undefined,
                link_with: undefined,
            });
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("link (ea0bba4e)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            provider: undefined,
            connection_id: undefined,
            user_id: undefined,
            link_with: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/users/id/identities")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.identities.link("id", {
                provider: undefined,
                connection_id: undefined,
                user_id: undefined,
                link_with: undefined,
            });
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("link (5a1f3346)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            provider: undefined,
            connection_id: undefined,
            user_id: undefined,
            link_with: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/users/id/identities")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(409)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.identities.link("id", {
                provider: undefined,
                connection_id: undefined,
                user_id: undefined,
                link_with: undefined,
            });
        }).rejects.toThrow(
            new Management.ConflictError({
                key: "value",
            }),
        );
    });

    test("link (871206da)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            provider: undefined,
            connection_id: undefined,
            user_id: undefined,
            link_with: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/users/id/identities")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.identities.link("id", {
                provider: undefined,
                connection_id: undefined,
                user_id: undefined,
                link_with: undefined,
            });
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });

    test("delete (b7f67dbe)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                connection: "connection",
                user_id: "user_id",
                provider: "provider",
                isSocial: true,
                access_token: "access_token",
                access_token_secret: "access_token_secret",
                refresh_token: "refresh_token",
                profileData: {
                    email: "email",
                    email_verified: true,
                    name: "name",
                    username: "username",
                    given_name: "given_name",
                    phone_number: "phone_number",
                    phone_verified: true,
                    family_name: "family_name",
                },
            },
        ];
        server
            .mockEndpoint()
            .delete("/users/id/identities/ad/user_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.users.identities.delete("id", "ad", "user_id");
        expect(response).toEqual([
            {
                connection: "connection",
                user_id: "user_id",
                provider: "provider",
                isSocial: true,
                access_token: "access_token",
                access_token_secret: "access_token_secret",
                refresh_token: "refresh_token",
                profileData: {
                    email: "email",
                    email_verified: true,
                    name: "name",
                    username: "username",
                    given_name: "given_name",
                    phone_number: "phone_number",
                    phone_verified: true,
                    family_name: "family_name",
                },
            },
        ]);
    });

    test("delete (7a3438de)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/users/id/identities/ad/user_id")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.identities.delete("id", "ad", "user_id");
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("delete (29a566e6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/users/id/identities/ad/user_id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.identities.delete("id", "ad", "user_id");
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("delete (e7eb4aa)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/users/id/identities/ad/user_id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.identities.delete("id", "ad", "user_id");
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("delete (f04618c6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/users/id/identities/ad/user_id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.identities.delete("id", "ad", "user_id");
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });
});
