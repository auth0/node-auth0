/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../Client.js";

describe("Identities", () => {
    test("link", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = [
            {
                connection: "connection",
                user_id: "user_id",
                provider: "provider",
                profileData: {
                    email: "email",
                    email_verified: true,
                    name: "name",
                    username: "username",
                    given_name: "given_name",
                    phone_number: "phone_number",
                    phone_verified: true,
                    family_name: "family_name",
                },
                isSocial: true,
                access_token: "access_token",
                access_token_secret: "access_token_secret",
                refresh_token: "refresh_token",
            },
        ];
        server
            .mockEndpoint()
            .post("/users/id/identities")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.users.identities.link("id");
        expect(response).toEqual([
            {
                connection: "connection",
                user_id: "user_id",
                provider: "provider",
                profileData: {
                    email: "email",
                    email_verified: true,
                    name: "name",
                    username: "username",
                    given_name: "given_name",
                    phone_number: "phone_number",
                    phone_verified: true,
                    family_name: "family_name",
                },
                isSocial: true,
                access_token: "access_token",
                access_token_secret: "access_token_secret",
                refresh_token: "refresh_token",
            },
        ]);
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                connection: "connection",
                user_id: "user_id",
                provider: "provider",
                isSocial: true,
                access_token: "access_token",
                access_token_secret: "access_token_secret",
                refresh_token: "refresh_token",
                profileData: {
                    email: "email",
                    email_verified: true,
                    name: "name",
                    username: "username",
                    given_name: "given_name",
                    phone_number: "phone_number",
                    phone_verified: true,
                    family_name: "family_name",
                },
            },
        ];
        server
            .mockEndpoint()
            .delete("/users/id/identities/ad/user_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.users.identities.delete("id", "ad", "user_id");
        expect(response).toEqual([
            {
                connection: "connection",
                user_id: "user_id",
                provider: "provider",
                isSocial: true,
                access_token: "access_token",
                access_token_secret: "access_token_secret",
                refresh_token: "refresh_token",
                profileData: {
                    email: "email",
                    email_verified: true,
                    name: "name",
                    username: "username",
                    given_name: "given_name",
                    phone_number: "phone_number",
                    phone_verified: true,
                    family_name: "family_name",
                },
            },
        ]);
    });
});
