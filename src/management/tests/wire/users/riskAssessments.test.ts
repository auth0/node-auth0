/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../Client.js";
import * as Management from "../../../api/index.js";

describe("RiskAssessments", () => {
    test("clear (f8a5c1d1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { connection: "connection", assessors: ["new-device"] };

        server
            .mockEndpoint()
            .post("/users/id/risk-assessments/clear")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.users.riskAssessments.clear("id", {
            connection: "connection",
            assessors: ["new-device"],
        });
        expect(response).toEqual(undefined);
    });

    test("clear (eab02ea2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { connection: "x", assessors: ["new-device", "new-device"] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/users/id/risk-assessments/clear")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.riskAssessments.clear("id", {
                connection: "x",
                assessors: ["new-device", "new-device"],
            });
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("clear (9ffb75ba)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { connection: "x", assessors: ["new-device", "new-device"] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/users/id/risk-assessments/clear")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.riskAssessments.clear("id", {
                connection: "x",
                assessors: ["new-device", "new-device"],
            });
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("clear (ad2ba27e)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { connection: "x", assessors: ["new-device", "new-device"] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/users/id/risk-assessments/clear")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.riskAssessments.clear("id", {
                connection: "x",
                assessors: ["new-device", "new-device"],
            });
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("clear (f671b98a)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { connection: "x", assessors: ["new-device", "new-device"] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/users/id/risk-assessments/clear")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.riskAssessments.clear("id", {
                connection: "x",
                assessors: ["new-device", "new-device"],
            });
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });
});
