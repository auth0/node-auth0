// This file was auto-generated by Fern from our API Definition.

import * as Management from "../../../api/index";
import { ManagementClient } from "../../../Client";
import { mockServerPool } from "../../mock-server/MockServerPool";

describe("RiskAssessments", () => {
    test("clear (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { connection: "connection", assessors: ["new-device"] };

        server
            .mockEndpoint()
            .post("/users/id/risk-assessments/clear")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.users.riskAssessments.clear("id", {
            connection: "connection",
            assessors: ["new-device"],
        });
        expect(response).toEqual(undefined);
    });

    test("clear (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { connection: "x", assessors: ["new-device", "new-device"] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/users/id/risk-assessments/clear")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.riskAssessments.clear("id", {
                connection: "x",
                assessors: ["new-device", "new-device"],
            });
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("clear (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { connection: "x", assessors: ["new-device", "new-device"] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/users/id/risk-assessments/clear")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.riskAssessments.clear("id", {
                connection: "x",
                assessors: ["new-device", "new-device"],
            });
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("clear (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { connection: "x", assessors: ["new-device", "new-device"] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/users/id/risk-assessments/clear")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.riskAssessments.clear("id", {
                connection: "x",
                assessors: ["new-device", "new-device"],
            });
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("clear (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { connection: "x", assessors: ["new-device", "new-device"] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/users/id/risk-assessments/clear")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.riskAssessments.clear("id", {
                connection: "x",
                assessors: ["new-device", "new-device"],
            });
        }).rejects.toThrow(Management.TooManyRequestsError);
    });
});
