// This file was auto-generated by Fern from our API Definition.

import * as Management from "../../../api/index";
import { ManagementClient } from "../../../Client";
import { mockServerPool } from "../../mock-server/MockServerPool";

describe("ConnectedAccounts", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            connected_accounts: [
                {
                    id: "id",
                    connection: "connection",
                    connection_id: "connection_id",
                    strategy: "strategy",
                    access_type: "offline",
                    scopes: ["scopes"],
                    created_at: "2024-01-15T09:30:00Z",
                    expires_at: "2024-01-15T09:30:00Z",
                },
            ],
            next: "next",
        };
        server
            .mockEndpoint()
            .get("/users/id/connected-accounts")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            connected_accounts: [
                {
                    id: "id",
                    connection: "connection",
                    connection_id: "connection_id",
                    strategy: "strategy",
                    access_type: "offline",
                    scopes: ["scopes"],
                    created_at: "2024-01-15T09:30:00Z",
                    expires_at: "2024-01-15T09:30:00Z",
                },
            ],
            next: "next",
        };
        const page = await client.users.connectedAccounts.list("id", {
            from: "from",
            take: 1,
        });

        expect(expected.connected_accounts).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.connected_accounts).toEqual(nextPage.data);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/users/id/connected-accounts")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.connectedAccounts.list("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/users/id/connected-accounts")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.connectedAccounts.list("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/users/id/connected-accounts")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.connectedAccounts.list("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("list (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/users/id/connected-accounts")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.connectedAccounts.list("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });
});
