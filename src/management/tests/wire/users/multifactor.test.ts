// This file was auto-generated by Fern from our API Definition.

import * as Management from "../../../api/index";
import { ManagementClient } from "../../../Client";
import { mockServerPool } from "../../mock-server/MockServerPool";

describe("Multifactor", () => {
    test("invalidateRememberBrowser (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server
            .mockEndpoint()
            .post("/users/id/multifactor/actions/invalidate-remember-browser")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.users.multifactor.invalidateRememberBrowser("id");
        expect(response).toEqual(undefined);
    });

    test("invalidateRememberBrowser (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/users/id/multifactor/actions/invalidate-remember-browser")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.multifactor.invalidateRememberBrowser("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("invalidateRememberBrowser (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/users/id/multifactor/actions/invalidate-remember-browser")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.multifactor.invalidateRememberBrowser("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("invalidateRememberBrowser (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/users/id/multifactor/actions/invalidate-remember-browser")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.multifactor.invalidateRememberBrowser("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("deleteProvider (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/users/id/multifactor/duo").respondWith().statusCode(200).build();

        const response = await client.users.multifactor.deleteProvider("id", "duo");
        expect(response).toEqual(undefined);
    });

    test("deleteProvider (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/users/id/multifactor/duo")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.multifactor.deleteProvider("id", "duo");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("deleteProvider (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/users/id/multifactor/duo")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.multifactor.deleteProvider("id", "duo");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("deleteProvider (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/users/id/multifactor/duo")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.multifactor.deleteProvider("id", "duo");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("deleteProvider (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/users/id/multifactor/duo")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.multifactor.deleteProvider("id", "duo");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("deleteProvider (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/users/id/multifactor/duo")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.multifactor.deleteProvider("id", "duo");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });
});
