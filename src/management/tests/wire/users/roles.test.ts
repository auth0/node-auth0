// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ManagementClient } from "../../../Client";
import * as Management from "../../../api/index";

describe("Roles", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            start: 1.1,
            limit: 1.1,
            total: 1.1,
            roles: [{ id: "id", name: "name", description: "description" }],
        };
        server.mockEndpoint().get("/users/id/roles").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const expected = {
            start: 1.1,
            limit: 1.1,
            total: 1.1,
            roles: [
                {
                    id: "id",
                    name: "name",
                    description: "description",
                },
            ],
        };
        const page = await client.users.roles.list("id", {
            per_page: 1,
            page: 1,
            include_totals: true,
        });

        expect(expected.roles).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.roles).toEqual(nextPage.data);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/users/id/roles").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.users.roles.list("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/users/id/roles").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.users.roles.list("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/users/id/roles").respondWith().statusCode(429).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.users.roles.list("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("assign (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { roles: ["roles"] };

        server.mockEndpoint().post("/users/id/roles").jsonBody(rawRequestBody).respondWith().statusCode(200).build();

        const response = await client.users.roles.assign("id", {
            roles: ["roles"],
        });
        expect(response).toEqual(undefined);
    });

    test("assign (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { roles: ["roles", "roles"] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/users/id/roles")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.roles.assign("id", {
                roles: ["roles", "roles"],
            });
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("assign (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { roles: ["roles", "roles"] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/users/id/roles")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.roles.assign("id", {
                roles: ["roles", "roles"],
            });
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("assign (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { roles: ["roles", "roles"] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/users/id/roles")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.roles.assign("id", {
                roles: ["roles", "roles"],
            });
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("assign (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { roles: ["roles", "roles"] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/users/id/roles")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.roles.assign("id", {
                roles: ["roles", "roles"],
            });
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { roles: ["roles"] };

        server.mockEndpoint().delete("/users/id/roles").jsonBody(rawRequestBody).respondWith().statusCode(200).build();

        const response = await client.users.roles.delete("id", {
            roles: ["roles"],
        });
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { roles: ["roles", "roles"] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/users/id/roles")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.roles.delete("id", {
                roles: ["roles", "roles"],
            });
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { roles: ["roles", "roles"] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/users/id/roles")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.roles.delete("id", {
                roles: ["roles", "roles"],
            });
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("delete (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { roles: ["roles", "roles"] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/users/id/roles")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.roles.delete("id", {
                roles: ["roles", "roles"],
            });
        }).rejects.toThrow(Management.TooManyRequestsError);
    });
});
