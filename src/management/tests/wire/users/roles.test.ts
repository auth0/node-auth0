/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../Client.js";

describe("Roles", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            start: 1.1,
            limit: 1.1,
            total: 1.1,
            roles: [{ id: "id", name: "name", description: "description" }],
        };
        server.mockEndpoint().get("/users/id/roles").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const expected = {
            start: 1.1,
            limit: 1.1,
            total: 1.1,
            roles: [
                {
                    id: "id",
                    name: "name",
                    description: "description",
                },
            ],
        };
        const page = await client.users.roles.list("id");
        expect(expected.roles).toEqual(page.data);

        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.roles).toEqual(nextPage.data);
    });

    test("assign", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { roles: ["roles"] };

        server.mockEndpoint().post("/users/id/roles").jsonBody(rawRequestBody).respondWith().statusCode(200).build();

        const response = await client.users.roles.assign("id", {
            roles: ["roles"],
        });
        expect(response).toEqual(undefined);
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { roles: ["roles"] };

        server.mockEndpoint().delete("/users/id/roles").jsonBody(rawRequestBody).respondWith().statusCode(200).build();

        const response = await client.users.roles.delete("id", {
            roles: ["roles"],
        });
        expect(response).toEqual(undefined);
    });
});
