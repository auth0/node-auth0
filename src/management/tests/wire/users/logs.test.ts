// This file was auto-generated by Fern from our API Definition.

import * as Management from "../../../api/index";
import { ManagementClient } from "../../../Client";
import { mockServerPool } from "../../mock-server/MockServerPool";

describe("Logs", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            start: 1.1,
            limit: 1.1,
            length: 1.1,
            total: 1.1,
            logs: [
                {
                    date: "date",
                    type: "type",
                    description: "description",
                    connection: "connection",
                    connection_id: "connection_id",
                    client_id: "client_id",
                    client_name: "client_name",
                    ip: "ip",
                    hostname: "hostname",
                    user_id: "user_id",
                    user_name: "user_name",
                    audience: "audience",
                    scope: "scope",
                    strategy: "strategy",
                    strategy_type: "strategy_type",
                    log_id: "log_id",
                    isMobile: true,
                    details: { key: "value" },
                    user_agent: "user_agent",
                },
            ],
        };
        server.mockEndpoint().get("/users/id/logs").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const expected = {
            start: 1.1,
            limit: 1.1,
            length: 1.1,
            total: 1.1,
            logs: [
                {
                    date: "date",
                    type: "type",
                    description: "description",
                    connection: "connection",
                    connection_id: "connection_id",
                    client_id: "client_id",
                    client_name: "client_name",
                    ip: "ip",
                    hostname: "hostname",
                    user_id: "user_id",
                    user_name: "user_name",
                    audience: "audience",
                    scope: "scope",
                    strategy: "strategy",
                    strategy_type: "strategy_type",
                    log_id: "log_id",
                    isMobile: true,
                    details: {
                        key: "value",
                    },
                    user_agent: "user_agent",
                },
            ],
        };
        const page = await client.users.logs.list("id", {
            page: 1,
            per_page: 1,
            sort: "sort",
            include_totals: true,
        });

        expect(expected.logs).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.logs).toEqual(nextPage.data);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/users/id/logs").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.users.logs.list("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/users/id/logs").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.users.logs.list("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/users/id/logs").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.users.logs.list("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("list (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/users/id/logs").respondWith().statusCode(429).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.users.logs.list("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });
});
