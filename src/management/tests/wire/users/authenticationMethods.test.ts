// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ManagementClient } from "../../../Client";
import * as Management from "../../../api/index";

describe("AuthenticationMethods", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            start: 1.1,
            limit: 1.1,
            total: 1.1,
            authenticators: [
                {
                    id: "id",
                    type: "recovery-code",
                    confirmed: true,
                    name: "name",
                    authentication_methods: [{}],
                    preferred_authentication_method: "voice",
                    link_id: "link_id",
                    phone_number: "phone_number",
                    email: "email",
                    key_id: "key_id",
                    public_key: "public_key",
                    created_at: "2024-01-15T09:30:00Z",
                    enrolled_at: "2024-01-15T09:30:00Z",
                    last_auth_at: "2024-01-15T09:30:00Z",
                    credential_device_type: "credential_device_type",
                    credential_backed_up: true,
                    identity_user_id: "identity_user_id",
                    user_agent: "user_agent",
                    aaguid: "aaguid",
                    relying_party_identifier: "relying_party_identifier",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/users/id/authentication-methods")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            start: 1.1,
            limit: 1.1,
            total: 1.1,
            authenticators: [
                {
                    id: "id",
                    type: "recovery-code",
                    confirmed: true,
                    name: "name",
                    authentication_methods: [{}],
                    preferred_authentication_method: "voice",
                    link_id: "link_id",
                    phone_number: "phone_number",
                    email: "email",
                    key_id: "key_id",
                    public_key: "public_key",
                    created_at: "2024-01-15T09:30:00Z",
                    enrolled_at: "2024-01-15T09:30:00Z",
                    last_auth_at: "2024-01-15T09:30:00Z",
                    credential_device_type: "credential_device_type",
                    credential_backed_up: true,
                    identity_user_id: "identity_user_id",
                    user_agent: "user_agent",
                    aaguid: "aaguid",
                    relying_party_identifier: "relying_party_identifier",
                },
            ],
        };
        const page = await client.users.authenticationMethods.list("id", {
            page: 1,
            per_page: 1,
            include_totals: true,
        });

        expect(expected.authenticators).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.authenticators).toEqual(nextPage.data);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/users/id/authentication-methods")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.authenticationMethods.list("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/users/id/authentication-methods")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.authenticationMethods.list("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/users/id/authentication-methods")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.authenticationMethods.list("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("list (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/users/id/authentication-methods")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.authenticationMethods.list("id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("list (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/users/id/authentication-methods")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.authenticationMethods.list("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { type: "phone" };
        const rawResponseBody = {
            id: "id",
            type: "phone",
            name: "name",
            totp_secret: "totp_secret",
            phone_number: "phone_number",
            email: "email",
            authentication_methods: [{ type: "totp", id: "id" }],
            preferred_authentication_method: "voice",
            key_id: "key_id",
            public_key: "public_key",
            aaguid: "aaguid",
            relying_party_identifier: "relying_party_identifier",
            created_at: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .post("/users/id/authentication-methods")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.users.authenticationMethods.create("id", {
            type: "phone",
        });
        expect(response).toEqual({
            id: "id",
            type: "phone",
            name: "name",
            totp_secret: "totp_secret",
            phone_number: "phone_number",
            email: "email",
            authentication_methods: [
                {
                    type: "totp",
                    id: "id",
                },
            ],
            preferred_authentication_method: "voice",
            key_id: "key_id",
            public_key: "public_key",
            aaguid: "aaguid",
            relying_party_identifier: "relying_party_identifier",
            created_at: "2024-01-15T09:30:00Z",
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { type: "phone" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/users/id/authentication-methods")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.authenticationMethods.create("id", {
                type: "phone",
            });
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("create (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { type: "phone" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/users/id/authentication-methods")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.authenticationMethods.create("id", {
                type: "phone",
            });
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("create (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { type: "phone" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/users/id/authentication-methods")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.authenticationMethods.create("id", {
                type: "phone",
            });
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("create (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { type: "phone" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/users/id/authentication-methods")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.authenticationMethods.create("id", {
                type: "phone",
            });
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("create (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { type: "phone" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/users/id/authentication-methods")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(409)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.authenticationMethods.create("id", {
                type: "phone",
            });
        }).rejects.toThrow(Management.ConflictError);
    });

    test("create (7)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { type: "phone" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/users/id/authentication-methods")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.authenticationMethods.create("id", {
                type: "phone",
            });
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("set (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = [{ type: "phone" }];
        const rawResponseBody = [
            {
                id: "id",
                type: "phone",
                name: "name",
                totp_secret: "totp_secret",
                phone_number: "phone_number",
                email: "email",
                authentication_methods: [{}],
                preferred_authentication_method: "voice",
                key_id: "key_id",
                public_key: "public_key",
                aaguid: "aaguid",
                relying_party_identifier: "relying_party_identifier",
                created_at: "2024-01-15T09:30:00Z",
            },
        ];
        server
            .mockEndpoint()
            .put("/users/id/authentication-methods")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.users.authenticationMethods.set("id", [
            {
                type: "phone",
            },
        ]);
        expect(response).toEqual([
            {
                id: "id",
                type: "phone",
                name: "name",
                totp_secret: "totp_secret",
                phone_number: "phone_number",
                email: "email",
                authentication_methods: [{}],
                preferred_authentication_method: "voice",
                key_id: "key_id",
                public_key: "public_key",
                aaguid: "aaguid",
                relying_party_identifier: "relying_party_identifier",
                created_at: "2024-01-15T09:30:00Z",
            },
        ]);
    });

    test("set (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = [{ type: "phone" }, { type: "phone" }];
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/users/id/authentication-methods")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.authenticationMethods.set("id", [
                {
                    type: "phone",
                },
                {
                    type: "phone",
                },
            ]);
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("set (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = [{ type: "phone" }, { type: "phone" }];
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/users/id/authentication-methods")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.authenticationMethods.set("id", [
                {
                    type: "phone",
                },
                {
                    type: "phone",
                },
            ]);
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("set (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = [{ type: "phone" }, { type: "phone" }];
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/users/id/authentication-methods")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.authenticationMethods.set("id", [
                {
                    type: "phone",
                },
                {
                    type: "phone",
                },
            ]);
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("set (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = [{ type: "phone" }, { type: "phone" }];
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/users/id/authentication-methods")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(409)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.authenticationMethods.set("id", [
                {
                    type: "phone",
                },
                {
                    type: "phone",
                },
            ]);
        }).rejects.toThrow(Management.ConflictError);
    });

    test("set (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = [{ type: "phone" }, { type: "phone" }];
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/users/id/authentication-methods")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.authenticationMethods.set("id", [
                {
                    type: "phone",
                },
                {
                    type: "phone",
                },
            ]);
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("deleteAll (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/users/id/authentication-methods").respondWith().statusCode(200).build();

        const response = await client.users.authenticationMethods.deleteAll("id");
        expect(response).toEqual(undefined);
    });

    test("deleteAll (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/users/id/authentication-methods")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.authenticationMethods.deleteAll("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("deleteAll (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/users/id/authentication-methods")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.authenticationMethods.deleteAll("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("deleteAll (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/users/id/authentication-methods")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.authenticationMethods.deleteAll("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("deleteAll (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/users/id/authentication-methods")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.authenticationMethods.deleteAll("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            type: "recovery-code",
            confirmed: true,
            name: "name",
            authentication_methods: [{ type: "totp", id: "id" }],
            preferred_authentication_method: "voice",
            link_id: "link_id",
            phone_number: "phone_number",
            email: "email",
            key_id: "key_id",
            public_key: "public_key",
            created_at: "2024-01-15T09:30:00Z",
            enrolled_at: "2024-01-15T09:30:00Z",
            last_auth_at: "2024-01-15T09:30:00Z",
            credential_device_type: "credential_device_type",
            credential_backed_up: true,
            identity_user_id: "identity_user_id",
            user_agent: "user_agent",
            aaguid: "aaguid",
            relying_party_identifier: "relying_party_identifier",
        };
        server
            .mockEndpoint()
            .get("/users/id/authentication-methods/authentication_method_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.users.authenticationMethods.get("id", "authentication_method_id");
        expect(response).toEqual({
            id: "id",
            type: "recovery-code",
            confirmed: true,
            name: "name",
            authentication_methods: [
                {
                    type: "totp",
                    id: "id",
                },
            ],
            preferred_authentication_method: "voice",
            link_id: "link_id",
            phone_number: "phone_number",
            email: "email",
            key_id: "key_id",
            public_key: "public_key",
            created_at: "2024-01-15T09:30:00Z",
            enrolled_at: "2024-01-15T09:30:00Z",
            last_auth_at: "2024-01-15T09:30:00Z",
            credential_device_type: "credential_device_type",
            credential_backed_up: true,
            identity_user_id: "identity_user_id",
            user_agent: "user_agent",
            aaguid: "aaguid",
            relying_party_identifier: "relying_party_identifier",
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/users/id/authentication-methods/authentication_method_id")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.authenticationMethods.get("id", "authentication_method_id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/users/id/authentication-methods/authentication_method_id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.authenticationMethods.get("id", "authentication_method_id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/users/id/authentication-methods/authentication_method_id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.authenticationMethods.get("id", "authentication_method_id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("get (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/users/id/authentication-methods/authentication_method_id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.authenticationMethods.get("id", "authentication_method_id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("get (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/users/id/authentication-methods/authentication_method_id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.authenticationMethods.get("id", "authentication_method_id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server
            .mockEndpoint()
            .delete("/users/id/authentication-methods/authentication_method_id")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.users.authenticationMethods.delete("id", "authentication_method_id");
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/users/id/authentication-methods/authentication_method_id")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.authenticationMethods.delete("id", "authentication_method_id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/users/id/authentication-methods/authentication_method_id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.authenticationMethods.delete("id", "authentication_method_id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("delete (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/users/id/authentication-methods/authentication_method_id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.authenticationMethods.delete("id", "authentication_method_id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("delete (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/users/id/authentication-methods/authentication_method_id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.authenticationMethods.delete("id", "authentication_method_id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("delete (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/users/id/authentication-methods/authentication_method_id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.authenticationMethods.delete("id", "authentication_method_id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("update (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            type: "phone",
            name: "name",
            totp_secret: "totp_secret",
            phone_number: "phone_number",
            email: "email",
            authentication_methods: [{ type: "totp", id: "id" }],
            preferred_authentication_method: "voice",
            key_id: "key_id",
            public_key: "public_key",
            aaguid: "aaguid",
            relying_party_identifier: "relying_party_identifier",
            created_at: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .patch("/users/id/authentication-methods/authentication_method_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.users.authenticationMethods.update("id", "authentication_method_id");
        expect(response).toEqual({
            id: "id",
            type: "phone",
            name: "name",
            totp_secret: "totp_secret",
            phone_number: "phone_number",
            email: "email",
            authentication_methods: [
                {
                    type: "totp",
                    id: "id",
                },
            ],
            preferred_authentication_method: "voice",
            key_id: "key_id",
            public_key: "public_key",
            aaguid: "aaguid",
            relying_party_identifier: "relying_party_identifier",
            created_at: "2024-01-15T09:30:00Z",
        });
    });

    test("update (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/users/id/authentication-methods/authentication_method_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.authenticationMethods.update("id", "authentication_method_id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("update (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/users/id/authentication-methods/authentication_method_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.authenticationMethods.update("id", "authentication_method_id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("update (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/users/id/authentication-methods/authentication_method_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.authenticationMethods.update("id", "authentication_method_id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("update (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/users/id/authentication-methods/authentication_method_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.authenticationMethods.update("id", "authentication_method_id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("update (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/users/id/authentication-methods/authentication_method_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.users.authenticationMethods.update("id", "authentication_method_id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });
});
