/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../Client.js";

describe("AuthenticationMethods", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { type: "phone" };
        const rawResponseBody = {
            id: "id",
            type: "phone",
            name: "name",
            totp_secret: "totp_secret",
            phone_number: "phone_number",
            email: "email",
            authentication_methods: [{ type: "totp", id: "id" }],
            preferred_authentication_method: "voice",
            key_id: "key_id",
            public_key: "public_key",
            relying_party_identifier: "relying_party_identifier",
            created_at: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .post("/users/id/authentication-methods")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.users.authenticationMethods.create("id", {
            type: "phone",
        });
        expect(response).toEqual({
            id: "id",
            type: "phone",
            name: "name",
            totp_secret: "totp_secret",
            phone_number: "phone_number",
            email: "email",
            authentication_methods: [
                {
                    type: "totp",
                    id: "id",
                },
            ],
            preferred_authentication_method: "voice",
            key_id: "key_id",
            public_key: "public_key",
            relying_party_identifier: "relying_party_identifier",
            created_at: "2024-01-15T09:30:00Z",
        });
    });

    test("set", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = [{ type: "phone" }];
        const rawResponseBody = [
            {
                id: "id",
                type: "phone",
                name: "name",
                totp_secret: "totp_secret",
                phone_number: "phone_number",
                email: "email",
                authentication_methods: [{}],
                preferred_authentication_method: "voice",
                key_id: "key_id",
                public_key: "public_key",
                relying_party_identifier: "relying_party_identifier",
                created_at: "2024-01-15T09:30:00Z",
            },
        ];
        server
            .mockEndpoint()
            .put("/users/id/authentication-methods")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.users.authenticationMethods.set("id", [
            {
                type: "phone",
            },
        ]);
        expect(response).toEqual([
            {
                id: "id",
                type: "phone",
                name: "name",
                totp_secret: "totp_secret",
                phone_number: "phone_number",
                email: "email",
                authentication_methods: [{}],
                preferred_authentication_method: "voice",
                key_id: "key_id",
                public_key: "public_key",
                relying_party_identifier: "relying_party_identifier",
                created_at: "2024-01-15T09:30:00Z",
            },
        ]);
    });

    test("deleteAll", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/users/id/authentication-methods").respondWith().statusCode(200).build();

        const response = await client.users.authenticationMethods.deleteAll("id");
        expect(response).toEqual(undefined);
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            type: "recovery-code",
            confirmed: true,
            name: "name",
            authentication_methods: [{ type: "totp", id: "id" }],
            preferred_authentication_method: "voice",
            link_id: "link_id",
            phone_number: "phone_number",
            email: "email",
            key_id: "key_id",
            public_key: "public_key",
            created_at: "2024-01-15T09:30:00Z",
            enrolled_at: "2024-01-15T09:30:00Z",
            last_auth_at: "2024-01-15T09:30:00Z",
            credential_device_type: "credential_device_type",
            credential_backed_up: true,
            identity_user_id: "identity_user_id",
            user_agent: "user_agent",
        };
        server
            .mockEndpoint()
            .get("/users/id/authentication-methods/authentication_method_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.users.authenticationMethods.get("id", "authentication_method_id");
        expect(response).toEqual({
            id: "id",
            type: "recovery-code",
            confirmed: true,
            name: "name",
            authentication_methods: [
                {
                    type: "totp",
                    id: "id",
                },
            ],
            preferred_authentication_method: "voice",
            link_id: "link_id",
            phone_number: "phone_number",
            email: "email",
            key_id: "key_id",
            public_key: "public_key",
            created_at: "2024-01-15T09:30:00Z",
            enrolled_at: "2024-01-15T09:30:00Z",
            last_auth_at: "2024-01-15T09:30:00Z",
            credential_device_type: "credential_device_type",
            credential_backed_up: true,
            identity_user_id: "identity_user_id",
            user_agent: "user_agent",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server
            .mockEndpoint()
            .delete("/users/id/authentication-methods/authentication_method_id")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.users.authenticationMethods.delete("id", "authentication_method_id");
        expect(response).toEqual(undefined);
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            type: "phone",
            name: "name",
            totp_secret: "totp_secret",
            phone_number: "phone_number",
            email: "email",
            authentication_methods: [{ type: "totp", id: "id" }],
            preferred_authentication_method: "voice",
            key_id: "key_id",
            public_key: "public_key",
            relying_party_identifier: "relying_party_identifier",
            created_at: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .patch("/users/id/authentication-methods/authentication_method_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.users.authenticationMethods.update("id", "authentication_method_id");
        expect(response).toEqual({
            id: "id",
            type: "phone",
            name: "name",
            totp_secret: "totp_secret",
            phone_number: "phone_number",
            email: "email",
            authentication_methods: [
                {
                    type: "totp",
                    id: "id",
                },
            ],
            preferred_authentication_method: "voice",
            key_id: "key_id",
            public_key: "public_key",
            relying_party_identifier: "relying_party_identifier",
            created_at: "2024-01-15T09:30:00Z",
        });
    });
});
