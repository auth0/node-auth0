/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../Client.js";

describe("RefreshToken", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            tokens: [
                {
                    id: "id",
                    user_id: "user_id",
                    created_at: "2024-01-15T09:30:00Z",
                    idle_expires_at: "2024-01-15T09:30:00Z",
                    expires_at: "2024-01-15T09:30:00Z",
                    client_id: "client_id",
                    session_id: "session_id",
                    rotating: true,
                    resource_servers: [{}],
                    last_exchanged_at: "2024-01-15T09:30:00Z",
                },
            ],
            next: "next",
        };
        server
            .mockEndpoint()
            .get("/users/user_id/refresh-tokens")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            tokens: [
                {
                    id: "id",
                    user_id: "user_id",
                    created_at: "2024-01-15T09:30:00Z",
                    idle_expires_at: "2024-01-15T09:30:00Z",
                    expires_at: "2024-01-15T09:30:00Z",
                    client_id: "client_id",
                    session_id: "session_id",
                    rotating: true,
                    resource_servers: [{}],
                    last_exchanged_at: "2024-01-15T09:30:00Z",
                },
            ],
            next: "next",
        };
        const page = await client.users.refreshToken.list("user_id");
        expect(expected.tokens).toEqual(page.data);

        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.tokens).toEqual(nextPage.data);
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/users/user_id/refresh-tokens").respondWith().statusCode(200).build();

        const response = await client.users.refreshToken.delete("user_id");
        expect(response).toEqual(undefined);
    });
});
