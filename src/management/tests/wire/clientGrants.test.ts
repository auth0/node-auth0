/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { ManagementClient } from "../../Client.js";

describe("ClientGrants", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            next: "next",
            client_grants: [
                {
                    id: "id",
                    client_id: "client_id",
                    audience: "audience",
                    scope: ["scope"],
                    organization_usage: "deny",
                    allow_any_organization: true,
                    is_system: true,
                    subject_type: "client",
                    authorization_details_types: ["authorization_details_types"],
                },
            ],
        };
        server.mockEndpoint().get("/client-grants").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const expected = {
            next: "next",
            client_grants: [
                {
                    id: "id",
                    client_id: "client_id",
                    audience: "audience",
                    scope: ["scope"],
                    organization_usage: "deny",
                    allow_any_organization: true,
                    is_system: true,
                    subject_type: "client",
                    authorization_details_types: ["authorization_details_types"],
                },
            ],
        };
        const page = await client.clientGrants.list();
        expect(expected.client_grants).toEqual(page.data);

        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.client_grants).toEqual(nextPage.data);
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { client_id: "client_id", audience: "audience", scope: ["scope"] };
        const rawResponseBody = {
            id: "id",
            client_id: "client_id",
            audience: "audience",
            scope: ["scope"],
            organization_usage: "deny",
            allow_any_organization: true,
            is_system: true,
            subject_type: "client",
            authorization_details_types: ["authorization_details_types"],
        };
        server
            .mockEndpoint()
            .post("/client-grants")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.clientGrants.create({
            client_id: "client_id",
            audience: "audience",
            scope: ["scope"],
        });
        expect(response).toEqual({
            id: "id",
            client_id: "client_id",
            audience: "audience",
            scope: ["scope"],
            organization_usage: "deny",
            allow_any_organization: true,
            is_system: true,
            subject_type: "client",
            authorization_details_types: ["authorization_details_types"],
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/client-grants/id").respondWith().statusCode(200).build();

        const response = await client.clientGrants.delete("id");
        expect(response).toEqual(undefined);
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            client_id: "client_id",
            audience: "audience",
            scope: ["scope"],
            organization_usage: "deny",
            allow_any_organization: true,
            is_system: true,
            subject_type: "client",
            authorization_details_types: ["authorization_details_types"],
        };
        server
            .mockEndpoint()
            .patch("/client-grants/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.clientGrants.update("id");
        expect(response).toEqual({
            id: "id",
            client_id: "client_id",
            audience: "audience",
            scope: ["scope"],
            organization_usage: "deny",
            allow_any_organization: true,
            is_system: true,
            subject_type: "client",
            authorization_details_types: ["authorization_details_types"],
        });
    });
});
