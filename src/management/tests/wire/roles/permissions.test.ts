/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../Client.js";
import * as Management from "../../../api/index.js";

describe("Permissions", () => {
    test("list (13f93d13)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            start: 1.1,
            limit: 1.1,
            total: 1.1,
            permissions: [
                {
                    resource_server_identifier: "resource_server_identifier",
                    permission_name: "permission_name",
                    resource_server_name: "resource_server_name",
                    description: "description",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/roles/id/permissions")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            start: 1.1,
            limit: 1.1,
            total: 1.1,
            permissions: [
                {
                    resource_server_identifier: "resource_server_identifier",
                    permission_name: "permission_name",
                    resource_server_name: "resource_server_name",
                    description: "description",
                },
            ],
        };
        const page = await client.roles.permissions.list("id");
        expect(expected.permissions).toEqual(page.data);

        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.permissions).toEqual(nextPage.data);
    });

    test("list (fcf9dbd1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/roles/id/permissions")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.roles.permissions.list("id");
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("list (49d52691)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/roles/id/permissions")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.roles.permissions.list("id");
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("list (2428808d)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/roles/id/permissions")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.roles.permissions.list("id");
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("list (e55ce3fd)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/roles/id/permissions")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.roles.permissions.list("id");
        }).rejects.toThrow(
            new Management.NotFoundError({
                key: "value",
            }),
        );
    });

    test("list (27b44cb5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/roles/id/permissions")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.roles.permissions.list("id");
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });

    test("add (7044cab6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            permissions: [
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
            ],
        };

        server
            .mockEndpoint()
            .post("/roles/id/permissions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.roles.permissions.add("id", {
            permissions: [
                {
                    resource_server_identifier: "resource_server_identifier",
                    permission_name: "permission_name",
                },
            ],
        });
        expect(response).toEqual(undefined);
    });

    test("add (4cfc2db5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            permissions: [
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
            ],
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/roles/id/permissions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.roles.permissions.add("id", {
                permissions: [
                    {
                        resource_server_identifier: "resource_server_identifier",
                        permission_name: "permission_name",
                    },
                    {
                        resource_server_identifier: "resource_server_identifier",
                        permission_name: "permission_name",
                    },
                ],
            });
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("add (dd1ed2a5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            permissions: [
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
            ],
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/roles/id/permissions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.roles.permissions.add("id", {
                permissions: [
                    {
                        resource_server_identifier: "resource_server_identifier",
                        permission_name: "permission_name",
                    },
                    {
                        resource_server_identifier: "resource_server_identifier",
                        permission_name: "permission_name",
                    },
                ],
            });
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("add (9d65d271)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            permissions: [
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
            ],
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/roles/id/permissions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.roles.permissions.add("id", {
                permissions: [
                    {
                        resource_server_identifier: "resource_server_identifier",
                        permission_name: "permission_name",
                    },
                    {
                        resource_server_identifier: "resource_server_identifier",
                        permission_name: "permission_name",
                    },
                ],
            });
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("add (fa8483c9)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            permissions: [
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
            ],
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/roles/id/permissions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.roles.permissions.add("id", {
                permissions: [
                    {
                        resource_server_identifier: "resource_server_identifier",
                        permission_name: "permission_name",
                    },
                    {
                        resource_server_identifier: "resource_server_identifier",
                        permission_name: "permission_name",
                    },
                ],
            });
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });

    test("delete (7044cab6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            permissions: [
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
            ],
        };

        server
            .mockEndpoint()
            .delete("/roles/id/permissions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.roles.permissions.delete("id", {
            permissions: [
                {
                    resource_server_identifier: "resource_server_identifier",
                    permission_name: "permission_name",
                },
            ],
        });
        expect(response).toEqual(undefined);
    });

    test("delete (4cfc2db5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            permissions: [
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
            ],
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/roles/id/permissions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.roles.permissions.delete("id", {
                permissions: [
                    {
                        resource_server_identifier: "resource_server_identifier",
                        permission_name: "permission_name",
                    },
                    {
                        resource_server_identifier: "resource_server_identifier",
                        permission_name: "permission_name",
                    },
                ],
            });
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("delete (dd1ed2a5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            permissions: [
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
            ],
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/roles/id/permissions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.roles.permissions.delete("id", {
                permissions: [
                    {
                        resource_server_identifier: "resource_server_identifier",
                        permission_name: "permission_name",
                    },
                    {
                        resource_server_identifier: "resource_server_identifier",
                        permission_name: "permission_name",
                    },
                ],
            });
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("delete (9d65d271)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            permissions: [
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
            ],
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/roles/id/permissions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.roles.permissions.delete("id", {
                permissions: [
                    {
                        resource_server_identifier: "resource_server_identifier",
                        permission_name: "permission_name",
                    },
                    {
                        resource_server_identifier: "resource_server_identifier",
                        permission_name: "permission_name",
                    },
                ],
            });
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("delete (fa8483c9)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            permissions: [
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
            ],
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/roles/id/permissions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.roles.permissions.delete("id", {
                permissions: [
                    {
                        resource_server_identifier: "resource_server_identifier",
                        permission_name: "permission_name",
                    },
                    {
                        resource_server_identifier: "resource_server_identifier",
                        permission_name: "permission_name",
                    },
                ],
            });
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });
});
