// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ManagementClient } from "../../../Client";
import * as Management from "../../../api/index";

describe("Permissions", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            start: 1.1,
            limit: 1.1,
            total: 1.1,
            permissions: [
                {
                    resource_server_identifier: "resource_server_identifier",
                    permission_name: "permission_name",
                    resource_server_name: "resource_server_name",
                    description: "description",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/roles/id/permissions")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            start: 1.1,
            limit: 1.1,
            total: 1.1,
            permissions: [
                {
                    resource_server_identifier: "resource_server_identifier",
                    permission_name: "permission_name",
                    resource_server_name: "resource_server_name",
                    description: "description",
                },
            ],
        };
        const page = await client.roles.permissions.list("id", {
            per_page: 1,
            page: 1,
            include_totals: true,
        });

        expect(expected.permissions).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.permissions).toEqual(nextPage.data);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/roles/id/permissions")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.roles.permissions.list("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/roles/id/permissions")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.roles.permissions.list("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/roles/id/permissions")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.roles.permissions.list("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("list (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/roles/id/permissions")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.roles.permissions.list("id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("list (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/roles/id/permissions")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.roles.permissions.list("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("add (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            permissions: [
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
            ],
        };

        server
            .mockEndpoint()
            .post("/roles/id/permissions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.roles.permissions.add("id", {
            permissions: [
                {
                    resource_server_identifier: "resource_server_identifier",
                    permission_name: "permission_name",
                },
            ],
        });
        expect(response).toEqual(undefined);
    });

    test("add (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            permissions: [
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
            ],
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/roles/id/permissions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.roles.permissions.add("id", {
                permissions: [
                    {
                        resource_server_identifier: "resource_server_identifier",
                        permission_name: "permission_name",
                    },
                    {
                        resource_server_identifier: "resource_server_identifier",
                        permission_name: "permission_name",
                    },
                ],
            });
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("add (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            permissions: [
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
            ],
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/roles/id/permissions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.roles.permissions.add("id", {
                permissions: [
                    {
                        resource_server_identifier: "resource_server_identifier",
                        permission_name: "permission_name",
                    },
                    {
                        resource_server_identifier: "resource_server_identifier",
                        permission_name: "permission_name",
                    },
                ],
            });
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("add (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            permissions: [
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
            ],
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/roles/id/permissions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.roles.permissions.add("id", {
                permissions: [
                    {
                        resource_server_identifier: "resource_server_identifier",
                        permission_name: "permission_name",
                    },
                    {
                        resource_server_identifier: "resource_server_identifier",
                        permission_name: "permission_name",
                    },
                ],
            });
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("add (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            permissions: [
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
            ],
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/roles/id/permissions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.roles.permissions.add("id", {
                permissions: [
                    {
                        resource_server_identifier: "resource_server_identifier",
                        permission_name: "permission_name",
                    },
                    {
                        resource_server_identifier: "resource_server_identifier",
                        permission_name: "permission_name",
                    },
                ],
            });
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            permissions: [
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
            ],
        };

        server
            .mockEndpoint()
            .delete("/roles/id/permissions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.roles.permissions.delete("id", {
            permissions: [
                {
                    resource_server_identifier: "resource_server_identifier",
                    permission_name: "permission_name",
                },
            ],
        });
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            permissions: [
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
            ],
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/roles/id/permissions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.roles.permissions.delete("id", {
                permissions: [
                    {
                        resource_server_identifier: "resource_server_identifier",
                        permission_name: "permission_name",
                    },
                    {
                        resource_server_identifier: "resource_server_identifier",
                        permission_name: "permission_name",
                    },
                ],
            });
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            permissions: [
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
            ],
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/roles/id/permissions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.roles.permissions.delete("id", {
                permissions: [
                    {
                        resource_server_identifier: "resource_server_identifier",
                        permission_name: "permission_name",
                    },
                    {
                        resource_server_identifier: "resource_server_identifier",
                        permission_name: "permission_name",
                    },
                ],
            });
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("delete (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            permissions: [
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
            ],
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/roles/id/permissions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.roles.permissions.delete("id", {
                permissions: [
                    {
                        resource_server_identifier: "resource_server_identifier",
                        permission_name: "permission_name",
                    },
                    {
                        resource_server_identifier: "resource_server_identifier",
                        permission_name: "permission_name",
                    },
                ],
            });
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("delete (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            permissions: [
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
            ],
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/roles/id/permissions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.roles.permissions.delete("id", {
                permissions: [
                    {
                        resource_server_identifier: "resource_server_identifier",
                        permission_name: "permission_name",
                    },
                    {
                        resource_server_identifier: "resource_server_identifier",
                        permission_name: "permission_name",
                    },
                ],
            });
        }).rejects.toThrow(Management.TooManyRequestsError);
    });
});
