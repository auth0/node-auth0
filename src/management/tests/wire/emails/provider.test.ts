/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../Client.js";
import * as Management from "../../../api/index.js";

describe("Provider", () => {
    test("get (7673666f)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            name: "name",
            enabled: true,
            default_from_address: "default_from_address",
            credentials: {
                api_user: "api_user",
                region: "region",
                smtp_host: "smtp_host",
                smtp_port: 1,
                smtp_user: "smtp_user",
            },
            settings: { key: "value" },
        };
        server.mockEndpoint().get("/emails/provider").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.emails.provider.get();
        expect(response).toEqual({
            name: "name",
            enabled: true,
            default_from_address: "default_from_address",
            credentials: {
                api_user: "api_user",
                region: "region",
                smtp_host: "smtp_host",
                smtp_port: 1,
                smtp_user: "smtp_user",
            },
            settings: {
                key: "value",
            },
        });
    });

    test("get (c60dd33b)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/emails/provider").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.emails.provider.get();
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("get (1e230aeb)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/emails/provider").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.emails.provider.get();
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("get (af841397)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/emails/provider").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.emails.provider.get();
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("get (c29c5807)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/emails/provider").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.emails.provider.get();
        }).rejects.toThrow(
            new Management.NotFoundError({
                key: "value",
            }),
        );
    });

    test("get (ee1e23bf)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/emails/provider").respondWith().statusCode(429).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.emails.provider.get();
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });

    test("create (84659a02)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "mailgun", credentials: { api_key: "api_key" } };
        const rawResponseBody = {
            name: "name",
            enabled: true,
            default_from_address: "default_from_address",
            credentials: {
                api_user: "api_user",
                region: "region",
                smtp_host: "smtp_host",
                smtp_port: 1,
                smtp_user: "smtp_user",
            },
            settings: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/emails/provider")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.emails.provider.create({
            name: "mailgun",
            credentials: {
                api_key: "api_key",
            },
        });
        expect(response).toEqual({
            name: "name",
            enabled: true,
            default_from_address: "default_from_address",
            credentials: {
                api_user: "api_user",
                region: "region",
                smtp_host: "smtp_host",
                smtp_port: 1,
                smtp_user: "smtp_user",
            },
            settings: {
                key: "value",
            },
        });
    });

    test("create (1f714c67)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "mailgun",
            enabled: undefined,
            default_from_address: undefined,
            credentials: { api_key: "x" },
            settings: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/emails/provider")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.emails.provider.create({
                name: "mailgun",
                enabled: undefined,
                default_from_address: undefined,
                credentials: {
                    api_key: "x",
                },
                settings: undefined,
            });
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("create (5c64f77)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "mailgun",
            enabled: undefined,
            default_from_address: undefined,
            credentials: { api_key: "x" },
            settings: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/emails/provider")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.emails.provider.create({
                name: "mailgun",
                enabled: undefined,
                default_from_address: undefined,
                credentials: {
                    api_key: "x",
                },
                settings: undefined,
            });
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("create (8695dd43)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "mailgun",
            enabled: undefined,
            default_from_address: undefined,
            credentials: { api_key: "x" },
            settings: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/emails/provider")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.emails.provider.create({
                name: "mailgun",
                enabled: undefined,
                default_from_address: undefined,
                credentials: {
                    api_key: "x",
                },
                settings: undefined,
            });
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("create (ca42009b)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "mailgun",
            enabled: undefined,
            default_from_address: undefined,
            credentials: { api_key: "x" },
            settings: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/emails/provider")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(409)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.emails.provider.create({
                name: "mailgun",
                enabled: undefined,
                default_from_address: undefined,
                credentials: {
                    api_key: "x",
                },
                settings: undefined,
            });
        }).rejects.toThrow(
            new Management.ConflictError({
                key: "value",
            }),
        );
    });

    test("create (5d59403b)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "mailgun",
            enabled: undefined,
            default_from_address: undefined,
            credentials: { api_key: "x" },
            settings: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/emails/provider")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.emails.provider.create({
                name: "mailgun",
                enabled: undefined,
                default_from_address: undefined,
                credentials: {
                    api_key: "x",
                },
                settings: undefined,
            });
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });

    test("delete (5465b825)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/emails/provider").respondWith().statusCode(200).build();

        const response = await client.emails.provider.delete();
        expect(response).toEqual(undefined);
    });

    test("delete (c60dd33b)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/emails/provider")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.emails.provider.delete();
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("delete (1e230aeb)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/emails/provider")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.emails.provider.delete();
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("delete (af841397)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/emails/provider")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.emails.provider.delete();
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("delete (c29c5807)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/emails/provider")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.emails.provider.delete();
        }).rejects.toThrow(
            new Management.NotFoundError({
                key: "value",
            }),
        );
    });

    test("delete (ee1e23bf)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/emails/provider")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.emails.provider.delete();
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });

    test("update (5152da64)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            name: "name",
            enabled: true,
            default_from_address: "default_from_address",
            credentials: {
                api_user: "api_user",
                region: "region",
                smtp_host: "smtp_host",
                smtp_port: 1,
                smtp_user: "smtp_user",
            },
            settings: { key: "value" },
        };
        server
            .mockEndpoint()
            .patch("/emails/provider")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.emails.provider.update();
        expect(response).toEqual({
            name: "name",
            enabled: true,
            default_from_address: "default_from_address",
            credentials: {
                api_user: "api_user",
                region: "region",
                smtp_host: "smtp_host",
                smtp_port: 1,
                smtp_user: "smtp_user",
            },
            settings: {
                key: "value",
            },
        });
    });

    test("update (a53d6600)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: undefined,
            enabled: undefined,
            default_from_address: undefined,
            credentials: undefined,
            settings: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/emails/provider")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.emails.provider.update({
                name: undefined,
                enabled: undefined,
                default_from_address: undefined,
                credentials: undefined,
                settings: undefined,
            });
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("update (a0619168)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: undefined,
            enabled: undefined,
            default_from_address: undefined,
            credentials: undefined,
            settings: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/emails/provider")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.emails.provider.update({
                name: undefined,
                enabled: undefined,
                default_from_address: undefined,
                credentials: undefined,
                settings: undefined,
            });
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("update (6452706c)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: undefined,
            enabled: undefined,
            default_from_address: undefined,
            credentials: undefined,
            settings: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/emails/provider")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.emails.provider.update({
                name: undefined,
                enabled: undefined,
                default_from_address: undefined,
                credentials: undefined,
                settings: undefined,
            });
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("update (ced159b4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: undefined,
            enabled: undefined,
            default_from_address: undefined,
            credentials: undefined,
            settings: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/emails/provider")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.emails.provider.update({
                name: undefined,
                enabled: undefined,
                default_from_address: undefined,
                credentials: undefined,
                settings: undefined,
            });
        }).rejects.toThrow(
            new Management.NotFoundError({
                key: "value",
            }),
        );
    });

    test("update (ec70304)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: undefined,
            enabled: undefined,
            default_from_address: undefined,
            credentials: undefined,
            settings: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/emails/provider")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(409)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.emails.provider.update({
                name: undefined,
                enabled: undefined,
                default_from_address: undefined,
                credentials: undefined,
                settings: undefined,
            });
        }).rejects.toThrow(
            new Management.ConflictError({
                key: "value",
            }),
        );
    });

    test("update (e683a4b8)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: undefined,
            enabled: undefined,
            default_from_address: undefined,
            credentials: undefined,
            settings: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/emails/provider")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.emails.provider.update({
                name: undefined,
                enabled: undefined,
                default_from_address: undefined,
                credentials: undefined,
                settings: undefined,
            });
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });
});
