/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../Client.js";

describe("Provider", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            name: "name",
            enabled: true,
            default_from_address: "default_from_address",
            credentials: {
                api_user: "api_user",
                region: "region",
                smtp_host: "smtp_host",
                smtp_port: 1,
                smtp_user: "smtp_user",
            },
            settings: { key: "value" },
        };
        server.mockEndpoint().get("/emails/provider").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.emails.provider.get();
        expect(response).toEqual({
            name: "name",
            enabled: true,
            default_from_address: "default_from_address",
            credentials: {
                api_user: "api_user",
                region: "region",
                smtp_host: "smtp_host",
                smtp_port: 1,
                smtp_user: "smtp_user",
            },
            settings: {
                key: "value",
            },
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "mailgun", credentials: { api_key: "api_key" } };
        const rawResponseBody = {
            name: "name",
            enabled: true,
            default_from_address: "default_from_address",
            credentials: {
                api_user: "api_user",
                region: "region",
                smtp_host: "smtp_host",
                smtp_port: 1,
                smtp_user: "smtp_user",
            },
            settings: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/emails/provider")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.emails.provider.create({
            name: "mailgun",
            credentials: {
                api_key: "api_key",
            },
        });
        expect(response).toEqual({
            name: "name",
            enabled: true,
            default_from_address: "default_from_address",
            credentials: {
                api_user: "api_user",
                region: "region",
                smtp_host: "smtp_host",
                smtp_port: 1,
                smtp_user: "smtp_user",
            },
            settings: {
                key: "value",
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/emails/provider").respondWith().statusCode(200).build();

        const response = await client.emails.provider.delete();
        expect(response).toEqual(undefined);
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            name: "name",
            enabled: true,
            default_from_address: "default_from_address",
            credentials: {
                api_user: "api_user",
                region: "region",
                smtp_host: "smtp_host",
                smtp_port: 1,
                smtp_user: "smtp_user",
            },
            settings: { key: "value" },
        };
        server
            .mockEndpoint()
            .patch("/emails/provider")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.emails.provider.update();
        expect(response).toEqual({
            name: "name",
            enabled: true,
            default_from_address: "default_from_address",
            credentials: {
                api_user: "api_user",
                region: "region",
                smtp_host: "smtp_host",
                smtp_port: 1,
                smtp_user: "smtp_user",
            },
            settings: {
                key: "value",
            },
        });
    });
});
