/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../Client.js";

describe("Redeliveries", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            date_from: "2024-01-15T09:30:00Z",
            date_to: "2024-01-15T09:30:00Z",
            statuses: ["failed"],
            event_types: ["user.created"],
        };
        server
            .mockEndpoint()
            .post("/event-streams/id/redeliver")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.eventStreams.redeliveries.create("id");
        expect(response).toEqual({
            date_from: "2024-01-15T09:30:00Z",
            date_to: "2024-01-15T09:30:00Z",
            statuses: ["failed"],
            event_types: ["user.created"],
        });
    });

    test("createById", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().post("/event-streams/id/redeliver/event_id").respondWith().statusCode(200).build();

        const response = await client.eventStreams.redeliveries.createById("id", "event_id");
        expect(response).toEqual(undefined);
    });
});
