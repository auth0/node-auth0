/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../Client.js";

describe("Deliveries", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "id",
                event_stream_id: "event_stream_id",
                status: "failed",
                event_type: "user.created",
                attempts: [{ status: "failed", timestamp: "2024-01-15T09:30:00Z" }],
                event: {
                    id: "id",
                    source: "source",
                    specversion: "specversion",
                    type: "type",
                    time: "2024-01-15T09:30:00Z",
                    data: "data",
                },
            },
        ];
        server
            .mockEndpoint()
            .get("/event-streams/id/deliveries")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.eventStreams.deliveries.list("id");
        expect(response).toEqual([
            {
                id: "id",
                event_stream_id: "event_stream_id",
                status: "failed",
                event_type: "user.created",
                attempts: [
                    {
                        status: "failed",
                        timestamp: "2024-01-15T09:30:00Z",
                    },
                ],
                event: {
                    id: "id",
                    source: "source",
                    specversion: "specversion",
                    type: "type",
                    time: "2024-01-15T09:30:00Z",
                    data: "data",
                },
            },
        ]);
    });

    test("getHistory", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            event_stream_id: "event_stream_id",
            status: "failed",
            event_type: "user.created",
            attempts: [{ status: "failed", timestamp: "2024-01-15T09:30:00Z", error_message: "error_message" }],
            event: {
                id: "id",
                source: "source",
                specversion: "specversion",
                type: "type",
                time: "2024-01-15T09:30:00Z",
                data: "data",
            },
        };
        server
            .mockEndpoint()
            .get("/event-streams/id/deliveries/event_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.eventStreams.deliveries.getHistory("id", "event_id");
        expect(response).toEqual({
            id: "id",
            event_stream_id: "event_stream_id",
            status: "failed",
            event_type: "user.created",
            attempts: [
                {
                    status: "failed",
                    timestamp: "2024-01-15T09:30:00Z",
                    error_message: "error_message",
                },
            ],
            event: {
                id: "id",
                source: "source",
                specversion: "specversion",
                type: "type",
                time: "2024-01-15T09:30:00Z",
                data: "data",
            },
        });
    });
});
