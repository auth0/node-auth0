// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ManagementClient } from "../../../Client";
import * as Management from "../../../api/index";

describe("Deliveries", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "id",
                event_stream_id: "event_stream_id",
                status: "failed",
                event_type: "user.created",
                attempts: [{ status: "failed", timestamp: "2024-01-15T09:30:00Z" }],
                event: {
                    id: "id",
                    source: "source",
                    specversion: "specversion",
                    type: "type",
                    time: "2024-01-15T09:30:00Z",
                    data: "data",
                },
            },
        ];
        server
            .mockEndpoint()
            .get("/event-streams/id/deliveries")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.eventStreams.deliveries.list("id", {
            statuses: "statuses",
            event_types: "event_types",
            date_from: "date_from",
            date_to: "date_to",
            from: "from",
            take: 1,
        });
        expect(response).toEqual([
            {
                id: "id",
                event_stream_id: "event_stream_id",
                status: "failed",
                event_type: "user.created",
                attempts: [
                    {
                        status: "failed",
                        timestamp: "2024-01-15T09:30:00Z",
                    },
                ],
                event: {
                    id: "id",
                    source: "source",
                    specversion: "specversion",
                    type: "type",
                    time: "2024-01-15T09:30:00Z",
                    data: "data",
                },
            },
        ]);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/event-streams/id/deliveries")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.eventStreams.deliveries.list("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/event-streams/id/deliveries")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.eventStreams.deliveries.list("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/event-streams/id/deliveries")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.eventStreams.deliveries.list("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("list (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/event-streams/id/deliveries")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.eventStreams.deliveries.list("id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("list (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/event-streams/id/deliveries")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.eventStreams.deliveries.list("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("getHistory (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            event_stream_id: "event_stream_id",
            status: "failed",
            event_type: "user.created",
            attempts: [{ status: "failed", timestamp: "2024-01-15T09:30:00Z", error_message: "error_message" }],
            event: {
                id: "id",
                source: "source",
                specversion: "specversion",
                type: "type",
                time: "2024-01-15T09:30:00Z",
                data: "data",
            },
        };
        server
            .mockEndpoint()
            .get("/event-streams/id/deliveries/event_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.eventStreams.deliveries.getHistory("id", "event_id");
        expect(response).toEqual({
            id: "id",
            event_stream_id: "event_stream_id",
            status: "failed",
            event_type: "user.created",
            attempts: [
                {
                    status: "failed",
                    timestamp: "2024-01-15T09:30:00Z",
                    error_message: "error_message",
                },
            ],
            event: {
                id: "id",
                source: "source",
                specversion: "specversion",
                type: "type",
                time: "2024-01-15T09:30:00Z",
                data: "data",
            },
        });
    });

    test("getHistory (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/event-streams/id/deliveries/event_id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.eventStreams.deliveries.getHistory("id", "event_id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("getHistory (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/event-streams/id/deliveries/event_id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.eventStreams.deliveries.getHistory("id", "event_id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("getHistory (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/event-streams/id/deliveries/event_id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.eventStreams.deliveries.getHistory("id", "event_id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("getHistory (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/event-streams/id/deliveries/event_id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.eventStreams.deliveries.getHistory("id", "event_id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });
});
