/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { ManagementClient } from "../../Client.js";

describe("EmailTemplates", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { template: "verify_email" };
        const rawResponseBody = {
            template: "verify_email",
            body: "body",
            from: "from",
            resultUrl: "resultUrl",
            subject: "subject",
            syntax: "syntax",
            urlLifetimeInSeconds: 1.1,
            includeEmailInRedirect: true,
            enabled: true,
        };
        server
            .mockEndpoint()
            .post("/email-templates")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.emailTemplates.create({
            template: "verify_email",
        });
        expect(response).toEqual({
            template: "verify_email",
            body: "body",
            from: "from",
            resultUrl: "resultUrl",
            subject: "subject",
            syntax: "syntax",
            urlLifetimeInSeconds: 1.1,
            includeEmailInRedirect: true,
            enabled: true,
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            template: "verify_email",
            body: "body",
            from: "from",
            resultUrl: "resultUrl",
            subject: "subject",
            syntax: "syntax",
            urlLifetimeInSeconds: 1.1,
            includeEmailInRedirect: true,
            enabled: true,
        };
        server
            .mockEndpoint()
            .get("/email-templates/verify_email")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.emailTemplates.get("verify_email");
        expect(response).toEqual({
            template: "verify_email",
            body: "body",
            from: "from",
            resultUrl: "resultUrl",
            subject: "subject",
            syntax: "syntax",
            urlLifetimeInSeconds: 1.1,
            includeEmailInRedirect: true,
            enabled: true,
        });
    });

    test("set", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { template: "verify_email" };
        const rawResponseBody = {
            template: "verify_email",
            body: "body",
            from: "from",
            resultUrl: "resultUrl",
            subject: "subject",
            syntax: "syntax",
            urlLifetimeInSeconds: 1.1,
            includeEmailInRedirect: true,
            enabled: true,
        };
        server
            .mockEndpoint()
            .put("/email-templates/verify_email")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.emailTemplates.set("verify_email", {
            template: "verify_email",
        });
        expect(response).toEqual({
            template: "verify_email",
            body: "body",
            from: "from",
            resultUrl: "resultUrl",
            subject: "subject",
            syntax: "syntax",
            urlLifetimeInSeconds: 1.1,
            includeEmailInRedirect: true,
            enabled: true,
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            template: "verify_email",
            body: "body",
            from: "from",
            resultUrl: "resultUrl",
            subject: "subject",
            syntax: "syntax",
            urlLifetimeInSeconds: 1.1,
            includeEmailInRedirect: true,
            enabled: true,
        };
        server
            .mockEndpoint()
            .patch("/email-templates/verify_email")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.emailTemplates.update("verify_email");
        expect(response).toEqual({
            template: "verify_email",
            body: "body",
            from: "from",
            resultUrl: "resultUrl",
            subject: "subject",
            syntax: "syntax",
            urlLifetimeInSeconds: 1.1,
            includeEmailInRedirect: true,
            enabled: true,
        });
    });
});
