/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { ManagementClient } from "../../Client.js";

describe("NetworkAcls", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            description: "description",
            active: true,
            priority: 1.1,
            rule: { action: {}, scope: "management" },
        };

        server.mockEndpoint().post("/network-acls").jsonBody(rawRequestBody).respondWith().statusCode(200).build();

        const response = await client.networkAcls.create({
            description: "description",
            active: true,
            priority: 1.1,
            rule: {
                action: {},
                scope: "management",
            },
        });
        expect(response).toEqual(undefined);
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            description: "description",
            active: true,
            priority: 1.1,
            rule: {
                action: { block: true, allow: true, log: true, redirect: true, redirect_uri: "redirect_uri" },
                match: {
                    asns: [1],
                    geo_country_codes: ["geo_country_codes"],
                    geo_subdivision_codes: ["geo_subdivision_codes"],
                    ipv4_cidrs: ["ipv4_cidrs"],
                    ipv6_cidrs: ["ipv6_cidrs"],
                    ja3_fingerprints: ["ja3_fingerprints"],
                    ja4_fingerprints: ["ja4_fingerprints"],
                    user_agents: ["user_agents"],
                },
                not_match: {
                    asns: [1],
                    geo_country_codes: ["geo_country_codes"],
                    geo_subdivision_codes: ["geo_subdivision_codes"],
                    ipv4_cidrs: ["ipv4_cidrs"],
                    ipv6_cidrs: ["ipv6_cidrs"],
                    ja3_fingerprints: ["ja3_fingerprints"],
                    ja4_fingerprints: ["ja4_fingerprints"],
                    user_agents: ["user_agents"],
                },
                scope: "management",
            },
            created_at: "created_at",
            updated_at: "updated_at",
        };
        server.mockEndpoint().get("/network-acls/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.networkAcls.get("id");
        expect(response).toEqual({
            id: "id",
            description: "description",
            active: true,
            priority: 1.1,
            rule: {
                action: {
                    block: true,
                    allow: true,
                    log: true,
                    redirect: true,
                    redirect_uri: "redirect_uri",
                },
                match: {
                    asns: [1],
                    geo_country_codes: ["geo_country_codes"],
                    geo_subdivision_codes: ["geo_subdivision_codes"],
                    ipv4_cidrs: ["ipv4_cidrs"],
                    ipv6_cidrs: ["ipv6_cidrs"],
                    ja3_fingerprints: ["ja3_fingerprints"],
                    ja4_fingerprints: ["ja4_fingerprints"],
                    user_agents: ["user_agents"],
                },
                not_match: {
                    asns: [1],
                    geo_country_codes: ["geo_country_codes"],
                    geo_subdivision_codes: ["geo_subdivision_codes"],
                    ipv4_cidrs: ["ipv4_cidrs"],
                    ipv6_cidrs: ["ipv6_cidrs"],
                    ja3_fingerprints: ["ja3_fingerprints"],
                    ja4_fingerprints: ["ja4_fingerprints"],
                    user_agents: ["user_agents"],
                },
                scope: "management",
            },
            created_at: "created_at",
            updated_at: "updated_at",
        });
    });

    test("set", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            description: "description",
            active: true,
            priority: 1.1,
            rule: { action: {}, scope: "management" },
        };
        const rawResponseBody = {
            id: "id",
            description: "description",
            active: true,
            priority: 1.1,
            rule: {
                action: { block: true, allow: true, log: true, redirect: true, redirect_uri: "redirect_uri" },
                match: {
                    asns: [1],
                    geo_country_codes: ["geo_country_codes"],
                    geo_subdivision_codes: ["geo_subdivision_codes"],
                    ipv4_cidrs: ["ipv4_cidrs"],
                    ipv6_cidrs: ["ipv6_cidrs"],
                    ja3_fingerprints: ["ja3_fingerprints"],
                    ja4_fingerprints: ["ja4_fingerprints"],
                    user_agents: ["user_agents"],
                },
                not_match: {
                    asns: [1],
                    geo_country_codes: ["geo_country_codes"],
                    geo_subdivision_codes: ["geo_subdivision_codes"],
                    ipv4_cidrs: ["ipv4_cidrs"],
                    ipv6_cidrs: ["ipv6_cidrs"],
                    ja3_fingerprints: ["ja3_fingerprints"],
                    ja4_fingerprints: ["ja4_fingerprints"],
                    user_agents: ["user_agents"],
                },
                scope: "management",
            },
            created_at: "created_at",
            updated_at: "updated_at",
        };
        server
            .mockEndpoint()
            .put("/network-acls/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.networkAcls.set("id", {
            description: "description",
            active: true,
            priority: 1.1,
            rule: {
                action: {},
                scope: "management",
            },
        });
        expect(response).toEqual({
            id: "id",
            description: "description",
            active: true,
            priority: 1.1,
            rule: {
                action: {
                    block: true,
                    allow: true,
                    log: true,
                    redirect: true,
                    redirect_uri: "redirect_uri",
                },
                match: {
                    asns: [1],
                    geo_country_codes: ["geo_country_codes"],
                    geo_subdivision_codes: ["geo_subdivision_codes"],
                    ipv4_cidrs: ["ipv4_cidrs"],
                    ipv6_cidrs: ["ipv6_cidrs"],
                    ja3_fingerprints: ["ja3_fingerprints"],
                    ja4_fingerprints: ["ja4_fingerprints"],
                    user_agents: ["user_agents"],
                },
                not_match: {
                    asns: [1],
                    geo_country_codes: ["geo_country_codes"],
                    geo_subdivision_codes: ["geo_subdivision_codes"],
                    ipv4_cidrs: ["ipv4_cidrs"],
                    ipv6_cidrs: ["ipv6_cidrs"],
                    ja3_fingerprints: ["ja3_fingerprints"],
                    ja4_fingerprints: ["ja4_fingerprints"],
                    user_agents: ["user_agents"],
                },
                scope: "management",
            },
            created_at: "created_at",
            updated_at: "updated_at",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/network-acls/id").respondWith().statusCode(200).build();

        const response = await client.networkAcls.delete("id");
        expect(response).toEqual(undefined);
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            description: "description",
            active: true,
            priority: 1.1,
            rule: {
                action: { block: true, allow: true, log: true, redirect: true, redirect_uri: "redirect_uri" },
                match: {
                    asns: [1],
                    geo_country_codes: ["geo_country_codes"],
                    geo_subdivision_codes: ["geo_subdivision_codes"],
                    ipv4_cidrs: ["ipv4_cidrs"],
                    ipv6_cidrs: ["ipv6_cidrs"],
                    ja3_fingerprints: ["ja3_fingerprints"],
                    ja4_fingerprints: ["ja4_fingerprints"],
                    user_agents: ["user_agents"],
                },
                not_match: {
                    asns: [1],
                    geo_country_codes: ["geo_country_codes"],
                    geo_subdivision_codes: ["geo_subdivision_codes"],
                    ipv4_cidrs: ["ipv4_cidrs"],
                    ipv6_cidrs: ["ipv6_cidrs"],
                    ja3_fingerprints: ["ja3_fingerprints"],
                    ja4_fingerprints: ["ja4_fingerprints"],
                    user_agents: ["user_agents"],
                },
                scope: "management",
            },
            created_at: "created_at",
            updated_at: "updated_at",
        };
        server
            .mockEndpoint()
            .patch("/network-acls/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.networkAcls.update("id");
        expect(response).toEqual({
            id: "id",
            description: "description",
            active: true,
            priority: 1.1,
            rule: {
                action: {
                    block: true,
                    allow: true,
                    log: true,
                    redirect: true,
                    redirect_uri: "redirect_uri",
                },
                match: {
                    asns: [1],
                    geo_country_codes: ["geo_country_codes"],
                    geo_subdivision_codes: ["geo_subdivision_codes"],
                    ipv4_cidrs: ["ipv4_cidrs"],
                    ipv6_cidrs: ["ipv6_cidrs"],
                    ja3_fingerprints: ["ja3_fingerprints"],
                    ja4_fingerprints: ["ja4_fingerprints"],
                    user_agents: ["user_agents"],
                },
                not_match: {
                    asns: [1],
                    geo_country_codes: ["geo_country_codes"],
                    geo_subdivision_codes: ["geo_subdivision_codes"],
                    ipv4_cidrs: ["ipv4_cidrs"],
                    ipv6_cidrs: ["ipv6_cidrs"],
                    ja3_fingerprints: ["ja3_fingerprints"],
                    ja4_fingerprints: ["ja4_fingerprints"],
                    user_agents: ["user_agents"],
                },
                scope: "management",
            },
            created_at: "created_at",
            updated_at: "updated_at",
        });
    });
});
