// This file was auto-generated by Fern from our API Definition.

import * as Management from "../../api/index";
import { ManagementClient } from "../../Client";
import { mockServerPool } from "../mock-server/MockServerPool";

describe("NetworkAcls", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            network_acls: [
                {
                    id: "id",
                    description: "description",
                    active: true,
                    priority: 1.1,
                    rule: { action: {}, scope: "management" },
                    created_at: "created_at",
                    updated_at: "updated_at",
                },
            ],
            start: 1.1,
            limit: 1.1,
            total: 1.1,
        };
        server.mockEndpoint().get("/network-acls").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const expected = {
            network_acls: [
                {
                    id: "id",
                    description: "description",
                    active: true,
                    priority: 1.1,
                    rule: {
                        action: {},
                        scope: "management",
                    },
                    created_at: "created_at",
                    updated_at: "updated_at",
                },
            ],
            start: 1.1,
            limit: 1.1,
            total: 1.1,
        };
        const page = await client.networkAcls.list({
            page: 1,
            per_page: 1,
            include_totals: true,
        });

        expect(expected.network_acls).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.network_acls).toEqual(nextPage.data);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/network-acls").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.networkAcls.list();
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/network-acls").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.networkAcls.list();
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/network-acls").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.networkAcls.list();
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("list (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/network-acls").respondWith().statusCode(429).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.networkAcls.list();
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            description: "description",
            active: true,
            priority: 1.1,
            rule: { action: {}, scope: "management" },
        };

        server.mockEndpoint().post("/network-acls").jsonBody(rawRequestBody).respondWith().statusCode(200).build();

        const response = await client.networkAcls.create({
            description: "description",
            active: true,
            priority: 1.1,
            rule: {
                action: {},
                scope: "management",
            },
        });
        expect(response).toEqual(undefined);
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            description: "description",
            active: true,
            priority: 1.1,
            rule: { action: {}, scope: "management" },
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/network-acls")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkAcls.create({
                description: "description",
                active: true,
                priority: 1.1,
                rule: {
                    action: {},
                    scope: "management",
                },
            });
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("create (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            description: "description",
            active: true,
            priority: 1.1,
            rule: { action: {}, scope: "management" },
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/network-acls")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkAcls.create({
                description: "description",
                active: true,
                priority: 1.1,
                rule: {
                    action: {},
                    scope: "management",
                },
            });
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("create (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            description: "description",
            active: true,
            priority: 1.1,
            rule: { action: {}, scope: "management" },
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/network-acls")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkAcls.create({
                description: "description",
                active: true,
                priority: 1.1,
                rule: {
                    action: {},
                    scope: "management",
                },
            });
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("create (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            description: "description",
            active: true,
            priority: 1.1,
            rule: { action: {}, scope: "management" },
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/network-acls")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(409)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkAcls.create({
                description: "description",
                active: true,
                priority: 1.1,
                rule: {
                    action: {},
                    scope: "management",
                },
            });
        }).rejects.toThrow(Management.ConflictError);
    });

    test("create (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            description: "description",
            active: true,
            priority: 1.1,
            rule: { action: {}, scope: "management" },
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/network-acls")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkAcls.create({
                description: "description",
                active: true,
                priority: 1.1,
                rule: {
                    action: {},
                    scope: "management",
                },
            });
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("create (7)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            description: "description",
            active: true,
            priority: 1.1,
            rule: { action: {}, scope: "management" },
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/network-acls")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(500)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkAcls.create({
                description: "description",
                active: true,
                priority: 1.1,
                rule: {
                    action: {},
                    scope: "management",
                },
            });
        }).rejects.toThrow(Management.InternalServerError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            description: "description",
            active: true,
            priority: 1.1,
            rule: {
                action: { block: true, allow: true, log: true, redirect: true, redirect_uri: "redirect_uri" },
                match: {
                    asns: [1],
                    geo_country_codes: ["geo_country_codes"],
                    geo_subdivision_codes: ["geo_subdivision_codes"],
                    ipv4_cidrs: ["ipv4_cidrs"],
                    ipv6_cidrs: ["ipv6_cidrs"],
                    ja3_fingerprints: ["ja3_fingerprints"],
                    ja4_fingerprints: ["ja4_fingerprints"],
                    user_agents: ["user_agents"],
                },
                not_match: {
                    asns: [1],
                    geo_country_codes: ["geo_country_codes"],
                    geo_subdivision_codes: ["geo_subdivision_codes"],
                    ipv4_cidrs: ["ipv4_cidrs"],
                    ipv6_cidrs: ["ipv6_cidrs"],
                    ja3_fingerprints: ["ja3_fingerprints"],
                    ja4_fingerprints: ["ja4_fingerprints"],
                    user_agents: ["user_agents"],
                },
                scope: "management",
            },
            created_at: "created_at",
            updated_at: "updated_at",
        };
        server.mockEndpoint().get("/network-acls/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.networkAcls.get("id");
        expect(response).toEqual({
            id: "id",
            description: "description",
            active: true,
            priority: 1.1,
            rule: {
                action: {
                    block: true,
                    allow: true,
                    log: true,
                    redirect: true,
                    redirect_uri: "redirect_uri",
                },
                match: {
                    asns: [1],
                    geo_country_codes: ["geo_country_codes"],
                    geo_subdivision_codes: ["geo_subdivision_codes"],
                    ipv4_cidrs: ["ipv4_cidrs"],
                    ipv6_cidrs: ["ipv6_cidrs"],
                    ja3_fingerprints: ["ja3_fingerprints"],
                    ja4_fingerprints: ["ja4_fingerprints"],
                    user_agents: ["user_agents"],
                },
                not_match: {
                    asns: [1],
                    geo_country_codes: ["geo_country_codes"],
                    geo_subdivision_codes: ["geo_subdivision_codes"],
                    ipv4_cidrs: ["ipv4_cidrs"],
                    ipv6_cidrs: ["ipv6_cidrs"],
                    ja3_fingerprints: ["ja3_fingerprints"],
                    ja4_fingerprints: ["ja4_fingerprints"],
                    user_agents: ["user_agents"],
                },
                scope: "management",
            },
            created_at: "created_at",
            updated_at: "updated_at",
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/network-acls/id").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.networkAcls.get("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/network-acls/id").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.networkAcls.get("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/network-acls/id").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.networkAcls.get("id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("get (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/network-acls/id").respondWith().statusCode(429).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.networkAcls.get("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("set (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            description: "description",
            active: true,
            priority: 1.1,
            rule: { action: {}, scope: "management" },
        };
        const rawResponseBody = {
            id: "id",
            description: "description",
            active: true,
            priority: 1.1,
            rule: {
                action: { block: true, allow: true, log: true, redirect: true, redirect_uri: "redirect_uri" },
                match: {
                    asns: [1],
                    geo_country_codes: ["geo_country_codes"],
                    geo_subdivision_codes: ["geo_subdivision_codes"],
                    ipv4_cidrs: ["ipv4_cidrs"],
                    ipv6_cidrs: ["ipv6_cidrs"],
                    ja3_fingerprints: ["ja3_fingerprints"],
                    ja4_fingerprints: ["ja4_fingerprints"],
                    user_agents: ["user_agents"],
                },
                not_match: {
                    asns: [1],
                    geo_country_codes: ["geo_country_codes"],
                    geo_subdivision_codes: ["geo_subdivision_codes"],
                    ipv4_cidrs: ["ipv4_cidrs"],
                    ipv6_cidrs: ["ipv6_cidrs"],
                    ja3_fingerprints: ["ja3_fingerprints"],
                    ja4_fingerprints: ["ja4_fingerprints"],
                    user_agents: ["user_agents"],
                },
                scope: "management",
            },
            created_at: "created_at",
            updated_at: "updated_at",
        };
        server
            .mockEndpoint()
            .put("/network-acls/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.networkAcls.set("id", {
            description: "description",
            active: true,
            priority: 1.1,
            rule: {
                action: {},
                scope: "management",
            },
        });
        expect(response).toEqual({
            id: "id",
            description: "description",
            active: true,
            priority: 1.1,
            rule: {
                action: {
                    block: true,
                    allow: true,
                    log: true,
                    redirect: true,
                    redirect_uri: "redirect_uri",
                },
                match: {
                    asns: [1],
                    geo_country_codes: ["geo_country_codes"],
                    geo_subdivision_codes: ["geo_subdivision_codes"],
                    ipv4_cidrs: ["ipv4_cidrs"],
                    ipv6_cidrs: ["ipv6_cidrs"],
                    ja3_fingerprints: ["ja3_fingerprints"],
                    ja4_fingerprints: ["ja4_fingerprints"],
                    user_agents: ["user_agents"],
                },
                not_match: {
                    asns: [1],
                    geo_country_codes: ["geo_country_codes"],
                    geo_subdivision_codes: ["geo_subdivision_codes"],
                    ipv4_cidrs: ["ipv4_cidrs"],
                    ipv6_cidrs: ["ipv6_cidrs"],
                    ja3_fingerprints: ["ja3_fingerprints"],
                    ja4_fingerprints: ["ja4_fingerprints"],
                    user_agents: ["user_agents"],
                },
                scope: "management",
            },
            created_at: "created_at",
            updated_at: "updated_at",
        });
    });

    test("set (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            description: "description",
            active: true,
            priority: 1.1,
            rule: { action: {}, scope: "management" },
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/network-acls/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkAcls.set("id", {
                description: "description",
                active: true,
                priority: 1.1,
                rule: {
                    action: {},
                    scope: "management",
                },
            });
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("set (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            description: "description",
            active: true,
            priority: 1.1,
            rule: { action: {}, scope: "management" },
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/network-acls/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkAcls.set("id", {
                description: "description",
                active: true,
                priority: 1.1,
                rule: {
                    action: {},
                    scope: "management",
                },
            });
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("set (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            description: "description",
            active: true,
            priority: 1.1,
            rule: { action: {}, scope: "management" },
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/network-acls/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkAcls.set("id", {
                description: "description",
                active: true,
                priority: 1.1,
                rule: {
                    action: {},
                    scope: "management",
                },
            });
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("set (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            description: "description",
            active: true,
            priority: 1.1,
            rule: { action: {}, scope: "management" },
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/network-acls/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkAcls.set("id", {
                description: "description",
                active: true,
                priority: 1.1,
                rule: {
                    action: {},
                    scope: "management",
                },
            });
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("set (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            description: "description",
            active: true,
            priority: 1.1,
            rule: { action: {}, scope: "management" },
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/network-acls/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkAcls.set("id", {
                description: "description",
                active: true,
                priority: 1.1,
                rule: {
                    action: {},
                    scope: "management",
                },
            });
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/network-acls/id").respondWith().statusCode(200).build();

        const response = await client.networkAcls.delete("id");
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/network-acls/id")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkAcls.delete("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/network-acls/id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkAcls.delete("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("delete (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/network-acls/id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkAcls.delete("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("delete (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/network-acls/id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkAcls.delete("id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("delete (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/network-acls/id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkAcls.delete("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("update (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            description: "description",
            active: true,
            priority: 1.1,
            rule: {
                action: { block: true, allow: true, log: true, redirect: true, redirect_uri: "redirect_uri" },
                match: {
                    asns: [1],
                    geo_country_codes: ["geo_country_codes"],
                    geo_subdivision_codes: ["geo_subdivision_codes"],
                    ipv4_cidrs: ["ipv4_cidrs"],
                    ipv6_cidrs: ["ipv6_cidrs"],
                    ja3_fingerprints: ["ja3_fingerprints"],
                    ja4_fingerprints: ["ja4_fingerprints"],
                    user_agents: ["user_agents"],
                },
                not_match: {
                    asns: [1],
                    geo_country_codes: ["geo_country_codes"],
                    geo_subdivision_codes: ["geo_subdivision_codes"],
                    ipv4_cidrs: ["ipv4_cidrs"],
                    ipv6_cidrs: ["ipv6_cidrs"],
                    ja3_fingerprints: ["ja3_fingerprints"],
                    ja4_fingerprints: ["ja4_fingerprints"],
                    user_agents: ["user_agents"],
                },
                scope: "management",
            },
            created_at: "created_at",
            updated_at: "updated_at",
        };
        server
            .mockEndpoint()
            .patch("/network-acls/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.networkAcls.update("id");
        expect(response).toEqual({
            id: "id",
            description: "description",
            active: true,
            priority: 1.1,
            rule: {
                action: {
                    block: true,
                    allow: true,
                    log: true,
                    redirect: true,
                    redirect_uri: "redirect_uri",
                },
                match: {
                    asns: [1],
                    geo_country_codes: ["geo_country_codes"],
                    geo_subdivision_codes: ["geo_subdivision_codes"],
                    ipv4_cidrs: ["ipv4_cidrs"],
                    ipv6_cidrs: ["ipv6_cidrs"],
                    ja3_fingerprints: ["ja3_fingerprints"],
                    ja4_fingerprints: ["ja4_fingerprints"],
                    user_agents: ["user_agents"],
                },
                not_match: {
                    asns: [1],
                    geo_country_codes: ["geo_country_codes"],
                    geo_subdivision_codes: ["geo_subdivision_codes"],
                    ipv4_cidrs: ["ipv4_cidrs"],
                    ipv6_cidrs: ["ipv6_cidrs"],
                    ja3_fingerprints: ["ja3_fingerprints"],
                    ja4_fingerprints: ["ja4_fingerprints"],
                    user_agents: ["user_agents"],
                },
                scope: "management",
            },
            created_at: "created_at",
            updated_at: "updated_at",
        });
    });

    test("update (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/network-acls/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkAcls.update("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("update (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/network-acls/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkAcls.update("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("update (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/network-acls/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkAcls.update("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("update (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/network-acls/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkAcls.update("id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("update (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/network-acls/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.networkAcls.update("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });
});
