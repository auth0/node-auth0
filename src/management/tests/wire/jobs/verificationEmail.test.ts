// This file was auto-generated by Fern from our API Definition.

import * as Management from "../../../api/index";
import { ManagementClient } from "../../../Client";
import { mockServerPool } from "../../mock-server/MockServerPool";

describe("VerificationEmail", () => {
    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { user_id: "user_id" };
        const rawResponseBody = { status: "status", type: "type", created_at: "created_at", id: "id" };
        server
            .mockEndpoint()
            .post("/jobs/verification-email")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.jobs.verificationEmail.create({
            user_id: "user_id",
        });
        expect(response).toEqual({
            status: "status",
            type: "type",
            created_at: "created_at",
            id: "id",
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { user_id: "google-oauth2|1234" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/jobs/verification-email")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.jobs.verificationEmail.create({
                user_id: "google-oauth2|1234",
            });
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("create (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { user_id: "google-oauth2|1234" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/jobs/verification-email")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.jobs.verificationEmail.create({
                user_id: "google-oauth2|1234",
            });
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("create (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { user_id: "google-oauth2|1234" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/jobs/verification-email")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.jobs.verificationEmail.create({
                user_id: "google-oauth2|1234",
            });
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("create (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { user_id: "google-oauth2|1234" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/jobs/verification-email")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.jobs.verificationEmail.create({
                user_id: "google-oauth2|1234",
            });
        }).rejects.toThrow(Management.TooManyRequestsError);
    });
});
