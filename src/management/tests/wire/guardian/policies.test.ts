// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ManagementClient } from "../../../Client";
import * as Management from "../../../api/index";

describe("Policies", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = ["all-applications"];
        server.mockEndpoint().get("/guardian/policies").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.guardian.policies.list();
        expect(response).toEqual(["all-applications"]);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/guardian/policies").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.guardian.policies.list();
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/guardian/policies").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.guardian.policies.list();
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/guardian/policies").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.guardian.policies.list();
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("set (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = ["all-applications"];
        const rawResponseBody = ["all-applications"];
        server
            .mockEndpoint()
            .put("/guardian/policies")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.policies.set(["all-applications"]);
        expect(response).toEqual(["all-applications"]);
    });

    test("set (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = ["all-applications", "all-applications"];
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/policies")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.policies.set(["all-applications", "all-applications"]);
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("set (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = ["all-applications", "all-applications"];
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/policies")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.policies.set(["all-applications", "all-applications"]);
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("set (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = ["all-applications", "all-applications"];
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/policies")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.policies.set(["all-applications", "all-applications"]);
        }).rejects.toThrow(Management.ForbiddenError);
    });
});
