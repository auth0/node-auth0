/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../Client.js";

describe("Enrollments", () => {
    test("createTicket", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { user_id: "user_id" };
        const rawResponseBody = { ticket_id: "ticket_id", ticket_url: "ticket_url" };
        server
            .mockEndpoint()
            .post("/guardian/enrollments/ticket")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.enrollments.createTicket({
            user_id: "user_id",
        });
        expect(response).toEqual({
            ticket_id: "ticket_id",
            ticket_url: "ticket_url",
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            status: "pending",
            name: "name",
            identifier: "identifier",
            phone_number: "phone_number",
            enrolled_at: "enrolled_at",
            last_auth: "last_auth",
        };
        server
            .mockEndpoint()
            .get("/guardian/enrollments/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.enrollments.get("id");
        expect(response).toEqual({
            id: "id",
            status: "pending",
            name: "name",
            identifier: "identifier",
            phone_number: "phone_number",
            enrolled_at: "enrolled_at",
            last_auth: "last_auth",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/guardian/enrollments/id").respondWith().statusCode(200).build();

        const response = await client.guardian.enrollments.delete("id");
        expect(response).toEqual(undefined);
    });
});
