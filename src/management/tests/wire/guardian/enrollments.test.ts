/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../Client.js";
import * as Management from "../../../api/index.js";

describe("Enrollments", () => {
    test("createTicket (d46530e5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { user_id: "user_id" };
        const rawResponseBody = { ticket_id: "ticket_id", ticket_url: "ticket_url" };
        server
            .mockEndpoint()
            .post("/guardian/enrollments/ticket")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.enrollments.createTicket({
            user_id: "user_id",
        });
        expect(response).toEqual({
            ticket_id: "ticket_id",
            ticket_url: "ticket_url",
        });
    });

    test("createTicket (b6270a17)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            user_id: "user_id",
            email: undefined,
            send_mail: undefined,
            email_locale: undefined,
            factor: undefined,
            allow_multiple_enrollments: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/guardian/enrollments/ticket")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.enrollments.createTicket({
                user_id: "user_id",
                email: undefined,
                send_mail: undefined,
                email_locale: undefined,
                factor: undefined,
                allow_multiple_enrollments: undefined,
            });
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("createTicket (394388e7)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            user_id: "user_id",
            email: undefined,
            send_mail: undefined,
            email_locale: undefined,
            factor: undefined,
            allow_multiple_enrollments: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/guardian/enrollments/ticket")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.enrollments.createTicket({
                user_id: "user_id",
                email: undefined,
                send_mail: undefined,
                email_locale: undefined,
                factor: undefined,
                allow_multiple_enrollments: undefined,
            });
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("createTicket (93b064f3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            user_id: "user_id",
            email: undefined,
            send_mail: undefined,
            email_locale: undefined,
            factor: undefined,
            allow_multiple_enrollments: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/guardian/enrollments/ticket")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.enrollments.createTicket({
                user_id: "user_id",
                email: undefined,
                send_mail: undefined,
                email_locale: undefined,
                factor: undefined,
                allow_multiple_enrollments: undefined,
            });
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("createTicket (781ff5d3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            user_id: "user_id",
            email: undefined,
            send_mail: undefined,
            email_locale: undefined,
            factor: undefined,
            allow_multiple_enrollments: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/guardian/enrollments/ticket")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.enrollments.createTicket({
                user_id: "user_id",
                email: undefined,
                send_mail: undefined,
                email_locale: undefined,
                factor: undefined,
                allow_multiple_enrollments: undefined,
            });
        }).rejects.toThrow(
            new Management.NotFoundError({
                key: "value",
            }),
        );
    });

    test("get (cdd13147)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            status: "pending",
            name: "name",
            identifier: "identifier",
            phone_number: "phone_number",
            enrolled_at: "enrolled_at",
            last_auth: "last_auth",
        };
        server
            .mockEndpoint()
            .get("/guardian/enrollments/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.enrollments.get("id");
        expect(response).toEqual({
            id: "id",
            status: "pending",
            name: "name",
            identifier: "identifier",
            phone_number: "phone_number",
            enrolled_at: "enrolled_at",
            last_auth: "last_auth",
        });
    });

    test("get (fcf9dbd1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/guardian/enrollments/id")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.enrollments.get("id");
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("get (49d52691)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/guardian/enrollments/id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.enrollments.get("id");
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("get (2428808d)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/guardian/enrollments/id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.enrollments.get("id");
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("delete (c7f0a6bf)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/guardian/enrollments/id").respondWith().statusCode(200).build();

        const response = await client.guardian.enrollments.delete("id");
        expect(response).toEqual(undefined);
    });

    test("delete (fcf9dbd1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/guardian/enrollments/id")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.enrollments.delete("id");
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("delete (49d52691)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/guardian/enrollments/id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.enrollments.delete("id");
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("delete (2428808d)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/guardian/enrollments/id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.enrollments.delete("id");
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });
});
