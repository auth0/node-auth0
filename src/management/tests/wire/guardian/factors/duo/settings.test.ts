/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../../../Client.js";

describe("Settings", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { ikey: "ikey", skey: "skey", host: "host" };
        server
            .mockEndpoint()
            .get("/guardian/factors/duo/settings")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.duo.settings.get();
        expect(response).toEqual({
            ikey: "ikey",
            skey: "skey",
            host: "host",
        });
    });

    test("set", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { ikey: "ikey", skey: "skey", host: "host" };
        server
            .mockEndpoint()
            .put("/guardian/factors/duo/settings")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.duo.settings.set();
        expect(response).toEqual({
            ikey: "ikey",
            skey: "skey",
            host: "host",
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { ikey: "ikey", skey: "skey", host: "host" };
        server
            .mockEndpoint()
            .patch("/guardian/factors/duo/settings")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.duo.settings.update();
        expect(response).toEqual({
            ikey: "ikey",
            skey: "skey",
            host: "host",
        });
    });
});
