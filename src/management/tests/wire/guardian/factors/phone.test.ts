/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../../Client.js";
import * as Management from "../../../../api/index.js";

describe("Phone", () => {
    test("getMessageTypes (373bab06)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { message_types: ["sms"] };
        server
            .mockEndpoint()
            .get("/guardian/factors/phone/message-types")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.phone.getMessageTypes();
        expect(response).toEqual({
            message_types: ["sms"],
        });
    });

    test("getMessageTypes (c60dd33b)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/guardian/factors/phone/message-types")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.getMessageTypes();
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("getMessageTypes (1e230aeb)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/guardian/factors/phone/message-types")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.getMessageTypes();
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("getMessageTypes (af841397)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/guardian/factors/phone/message-types")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.getMessageTypes();
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("setMessageTypes (86535d57)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { message_types: ["sms"] };
        const rawResponseBody = { message_types: ["sms"] };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/message-types")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.phone.setMessageTypes({
            message_types: ["sms"],
        });
        expect(response).toEqual({
            message_types: ["sms"],
        });
    });

    test("setMessageTypes (9584c610)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { message_types: ["sms", "sms"] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/message-types")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.setMessageTypes({
                message_types: ["sms", "sms"],
            });
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("setMessageTypes (f7d88138)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { message_types: ["sms", "sms"] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/message-types")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.setMessageTypes({
                message_types: ["sms", "sms"],
            });
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("setMessageTypes (4c23db3c)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { message_types: ["sms", "sms"] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/message-types")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.setMessageTypes({
                message_types: ["sms", "sms"],
            });
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("setMessageTypes (ec7dd604)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { message_types: ["sms", "sms"] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/message-types")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.setMessageTypes({
                message_types: ["sms", "sms"],
            });
        }).rejects.toThrow(
            new Management.NotFoundError({
                key: "value",
            }),
        );
    });

    test("getTwilioProvider (86b63684)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            from: "from",
            messaging_service_sid: "messaging_service_sid",
            auth_token: "auth_token",
            sid: "sid",
        };
        server
            .mockEndpoint()
            .get("/guardian/factors/phone/providers/twilio")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.phone.getTwilioProvider();
        expect(response).toEqual({
            from: "from",
            messaging_service_sid: "messaging_service_sid",
            auth_token: "auth_token",
            sid: "sid",
        });
    });

    test("getTwilioProvider (c60dd33b)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/guardian/factors/phone/providers/twilio")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.getTwilioProvider();
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("getTwilioProvider (1e230aeb)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/guardian/factors/phone/providers/twilio")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.getTwilioProvider();
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("getTwilioProvider (af841397)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/guardian/factors/phone/providers/twilio")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.getTwilioProvider();
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("setTwilioProvider (64fae5af)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            from: "from",
            messaging_service_sid: "messaging_service_sid",
            auth_token: "auth_token",
            sid: "sid",
        };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/providers/twilio")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.phone.setTwilioProvider();
        expect(response).toEqual({
            from: "from",
            messaging_service_sid: "messaging_service_sid",
            auth_token: "auth_token",
            sid: "sid",
        });
    });

    test("setTwilioProvider (ca700db5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            from: undefined,
            messaging_service_sid: undefined,
            auth_token: undefined,
            sid: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/providers/twilio")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.setTwilioProvider({
                from: undefined,
                messaging_service_sid: undefined,
                auth_token: undefined,
                sid: undefined,
            });
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("setTwilioProvider (2f4ab2a5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            from: undefined,
            messaging_service_sid: undefined,
            auth_token: undefined,
            sid: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/providers/twilio")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.setTwilioProvider({
                from: undefined,
                messaging_service_sid: undefined,
                auth_token: undefined,
                sid: undefined,
            });
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("setTwilioProvider (6934b271)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            from: undefined,
            messaging_service_sid: undefined,
            auth_token: undefined,
            sid: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/providers/twilio")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.setTwilioProvider({
                from: undefined,
                messaging_service_sid: undefined,
                auth_token: undefined,
                sid: undefined,
            });
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("getSelectedProvider (bcb0d021)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { provider: "auth0" };
        server
            .mockEndpoint()
            .get("/guardian/factors/phone/selected-provider")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.phone.getSelectedProvider();
        expect(response).toEqual({
            provider: "auth0",
        });
    });

    test("getSelectedProvider (c60dd33b)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/guardian/factors/phone/selected-provider")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.getSelectedProvider();
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("getSelectedProvider (1e230aeb)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/guardian/factors/phone/selected-provider")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.getSelectedProvider();
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("getSelectedProvider (af841397)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/guardian/factors/phone/selected-provider")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.getSelectedProvider();
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("setProvider (c7bcf6c3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { provider: "auth0" };
        const rawResponseBody = { provider: "auth0" };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/selected-provider")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.phone.setProvider({
            provider: "auth0",
        });
        expect(response).toEqual({
            provider: "auth0",
        });
    });

    test("setProvider (6d89e675)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { provider: "auth0" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/selected-provider")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.setProvider({
                provider: "auth0",
            });
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("setProvider (e8607965)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { provider: "auth0" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/selected-provider")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.setProvider({
                provider: "auth0",
            });
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("setProvider (64b1f931)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { provider: "auth0" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/selected-provider")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.setProvider({
                provider: "auth0",
            });
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("getTemplates (e6b85352)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            enrollment_message: "enrollment_message",
            verification_message: "verification_message",
        };
        server
            .mockEndpoint()
            .get("/guardian/factors/phone/templates")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.phone.getTemplates();
        expect(response).toEqual({
            enrollment_message: "enrollment_message",
            verification_message: "verification_message",
        });
    });

    test("getTemplates (c60dd33b)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/guardian/factors/phone/templates")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.getTemplates();
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("getTemplates (1e230aeb)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/guardian/factors/phone/templates")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.getTemplates();
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("getTemplates (af841397)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/guardian/factors/phone/templates")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.getTemplates();
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("setTemplates (a5593c87)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            enrollment_message: "enrollment_message",
            verification_message: "verification_message",
        };
        const rawResponseBody = {
            enrollment_message: "enrollment_message",
            verification_message: "verification_message",
        };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/templates")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.phone.setTemplates({
            enrollment_message: "enrollment_message",
            verification_message: "verification_message",
        });
        expect(response).toEqual({
            enrollment_message: "enrollment_message",
            verification_message: "verification_message",
        });
    });

    test("setTemplates (566065d0)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            enrollment_message:
                "{{code}} is your verification code for {{tenant.friendly_name}}. Please enter this code to verify your enrollment.",
            verification_message: "{{code}} is your verification code for {{tenant.friendly_name}}",
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/templates")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.setTemplates({
                enrollment_message:
                    "{{code}} is your verification code for {{tenant.friendly_name}}. Please enter this code to verify your enrollment.",
                verification_message: "{{code}} is your verification code for {{tenant.friendly_name}}",
            });
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("setTemplates (45786cf8)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            enrollment_message:
                "{{code}} is your verification code for {{tenant.friendly_name}}. Please enter this code to verify your enrollment.",
            verification_message: "{{code}} is your verification code for {{tenant.friendly_name}}",
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/templates")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.setTemplates({
                enrollment_message:
                    "{{code}} is your verification code for {{tenant.friendly_name}}. Please enter this code to verify your enrollment.",
                verification_message: "{{code}} is your verification code for {{tenant.friendly_name}}",
            });
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("setTemplates (73d7fffc)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            enrollment_message:
                "{{code}} is your verification code for {{tenant.friendly_name}}. Please enter this code to verify your enrollment.",
            verification_message: "{{code}} is your verification code for {{tenant.friendly_name}}",
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/templates")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.setTemplates({
                enrollment_message:
                    "{{code}} is your verification code for {{tenant.friendly_name}}. Please enter this code to verify your enrollment.",
                verification_message: "{{code}} is your verification code for {{tenant.friendly_name}}",
            });
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });
});
