/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../../Client.js";

describe("Phone", () => {
    test("getMessageTypes", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { message_types: ["sms"] };
        server
            .mockEndpoint()
            .get("/guardian/factors/phone/message-types")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.phone.getMessageTypes();
        expect(response).toEqual({
            message_types: ["sms"],
        });
    });

    test("setMessageTypes", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { message_types: ["sms"] };
        const rawResponseBody = { message_types: ["sms"] };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/message-types")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.phone.setMessageTypes({
            message_types: ["sms"],
        });
        expect(response).toEqual({
            message_types: ["sms"],
        });
    });

    test("getTwilioProvider", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            from: "from",
            messaging_service_sid: "messaging_service_sid",
            auth_token: "auth_token",
            sid: "sid",
        };
        server
            .mockEndpoint()
            .get("/guardian/factors/phone/providers/twilio")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.phone.getTwilioProvider();
        expect(response).toEqual({
            from: "from",
            messaging_service_sid: "messaging_service_sid",
            auth_token: "auth_token",
            sid: "sid",
        });
    });

    test("setTwilioProvider", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            from: "from",
            messaging_service_sid: "messaging_service_sid",
            auth_token: "auth_token",
            sid: "sid",
        };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/providers/twilio")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.phone.setTwilioProvider();
        expect(response).toEqual({
            from: "from",
            messaging_service_sid: "messaging_service_sid",
            auth_token: "auth_token",
            sid: "sid",
        });
    });

    test("getSelectedProvider", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { provider: "auth0" };
        server
            .mockEndpoint()
            .get("/guardian/factors/phone/selected-provider")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.phone.getSelectedProvider();
        expect(response).toEqual({
            provider: "auth0",
        });
    });

    test("setProvider", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { provider: "auth0" };
        const rawResponseBody = { provider: "auth0" };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/selected-provider")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.phone.setProvider({
            provider: "auth0",
        });
        expect(response).toEqual({
            provider: "auth0",
        });
    });

    test("getTemplates", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            enrollment_message: "enrollment_message",
            verification_message: "verification_message",
        };
        server
            .mockEndpoint()
            .get("/guardian/factors/phone/templates")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.phone.getTemplates();
        expect(response).toEqual({
            enrollment_message: "enrollment_message",
            verification_message: "verification_message",
        });
    });

    test("setTemplates", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            enrollment_message: "enrollment_message",
            verification_message: "verification_message",
        };
        const rawResponseBody = {
            enrollment_message: "enrollment_message",
            verification_message: "verification_message",
        };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/templates")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.phone.setTemplates({
            enrollment_message: "enrollment_message",
            verification_message: "verification_message",
        });
        expect(response).toEqual({
            enrollment_message: "enrollment_message",
            verification_message: "verification_message",
        });
    });
});
