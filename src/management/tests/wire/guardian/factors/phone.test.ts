// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../../mock-server/MockServerPool";
import { ManagementClient } from "../../../../Client";
import * as Management from "../../../../api/index";

describe("Phone", () => {
    test("getMessageTypes (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { message_types: ["sms"] };
        server
            .mockEndpoint()
            .get("/guardian/factors/phone/message-types")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.phone.getMessageTypes();
        expect(response).toEqual({
            message_types: ["sms"],
        });
    });

    test("getMessageTypes (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/guardian/factors/phone/message-types")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.getMessageTypes();
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("getMessageTypes (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/guardian/factors/phone/message-types")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.getMessageTypes();
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("getMessageTypes (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/guardian/factors/phone/message-types")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.getMessageTypes();
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("setMessageTypes (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { message_types: ["sms"] };
        const rawResponseBody = { message_types: ["sms"] };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/message-types")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.phone.setMessageTypes({
            message_types: ["sms"],
        });
        expect(response).toEqual({
            message_types: ["sms"],
        });
    });

    test("setMessageTypes (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { message_types: ["sms", "sms"] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/message-types")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.setMessageTypes({
                message_types: ["sms", "sms"],
            });
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("setMessageTypes (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { message_types: ["sms", "sms"] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/message-types")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.setMessageTypes({
                message_types: ["sms", "sms"],
            });
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("setMessageTypes (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { message_types: ["sms", "sms"] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/message-types")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.setMessageTypes({
                message_types: ["sms", "sms"],
            });
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("setMessageTypes (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { message_types: ["sms", "sms"] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/message-types")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.setMessageTypes({
                message_types: ["sms", "sms"],
            });
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("getTwilioProvider (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            from: "from",
            messaging_service_sid: "messaging_service_sid",
            auth_token: "auth_token",
            sid: "sid",
        };
        server
            .mockEndpoint()
            .get("/guardian/factors/phone/providers/twilio")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.phone.getTwilioProvider();
        expect(response).toEqual({
            from: "from",
            messaging_service_sid: "messaging_service_sid",
            auth_token: "auth_token",
            sid: "sid",
        });
    });

    test("getTwilioProvider (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/guardian/factors/phone/providers/twilio")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.getTwilioProvider();
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("getTwilioProvider (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/guardian/factors/phone/providers/twilio")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.getTwilioProvider();
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("getTwilioProvider (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/guardian/factors/phone/providers/twilio")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.getTwilioProvider();
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("setTwilioProvider (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            from: "from",
            messaging_service_sid: "messaging_service_sid",
            auth_token: "auth_token",
            sid: "sid",
        };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/providers/twilio")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.phone.setTwilioProvider();
        expect(response).toEqual({
            from: "from",
            messaging_service_sid: "messaging_service_sid",
            auth_token: "auth_token",
            sid: "sid",
        });
    });

    test("setTwilioProvider (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/providers/twilio")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.setTwilioProvider();
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("setTwilioProvider (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/providers/twilio")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.setTwilioProvider();
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("setTwilioProvider (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/providers/twilio")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.setTwilioProvider();
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("getSelectedProvider (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { provider: "auth0" };
        server
            .mockEndpoint()
            .get("/guardian/factors/phone/selected-provider")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.phone.getSelectedProvider();
        expect(response).toEqual({
            provider: "auth0",
        });
    });

    test("getSelectedProvider (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/guardian/factors/phone/selected-provider")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.getSelectedProvider();
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("getSelectedProvider (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/guardian/factors/phone/selected-provider")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.getSelectedProvider();
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("getSelectedProvider (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/guardian/factors/phone/selected-provider")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.getSelectedProvider();
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("setProvider (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { provider: "auth0" };
        const rawResponseBody = { provider: "auth0" };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/selected-provider")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.phone.setProvider({
            provider: "auth0",
        });
        expect(response).toEqual({
            provider: "auth0",
        });
    });

    test("setProvider (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { provider: "auth0" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/selected-provider")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.setProvider({
                provider: "auth0",
            });
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("setProvider (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { provider: "auth0" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/selected-provider")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.setProvider({
                provider: "auth0",
            });
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("setProvider (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { provider: "auth0" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/selected-provider")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.setProvider({
                provider: "auth0",
            });
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("getTemplates (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            enrollment_message: "enrollment_message",
            verification_message: "verification_message",
        };
        server
            .mockEndpoint()
            .get("/guardian/factors/phone/templates")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.phone.getTemplates();
        expect(response).toEqual({
            enrollment_message: "enrollment_message",
            verification_message: "verification_message",
        });
    });

    test("getTemplates (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/guardian/factors/phone/templates")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.getTemplates();
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("getTemplates (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/guardian/factors/phone/templates")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.getTemplates();
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("getTemplates (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/guardian/factors/phone/templates")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.getTemplates();
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("setTemplates (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            enrollment_message: "enrollment_message",
            verification_message: "verification_message",
        };
        const rawResponseBody = {
            enrollment_message: "enrollment_message",
            verification_message: "verification_message",
        };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/templates")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.phone.setTemplates({
            enrollment_message: "enrollment_message",
            verification_message: "verification_message",
        });
        expect(response).toEqual({
            enrollment_message: "enrollment_message",
            verification_message: "verification_message",
        });
    });

    test("setTemplates (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            enrollment_message:
                "{{code}} is your verification code for {{tenant.friendly_name}}. Please enter this code to verify your enrollment.",
            verification_message: "{{code}} is your verification code for {{tenant.friendly_name}}",
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/templates")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.setTemplates({
                enrollment_message:
                    "{{code}} is your verification code for {{tenant.friendly_name}}. Please enter this code to verify your enrollment.",
                verification_message: "{{code}} is your verification code for {{tenant.friendly_name}}",
            });
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("setTemplates (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            enrollment_message:
                "{{code}} is your verification code for {{tenant.friendly_name}}. Please enter this code to verify your enrollment.",
            verification_message: "{{code}} is your verification code for {{tenant.friendly_name}}",
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/templates")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.setTemplates({
                enrollment_message:
                    "{{code}} is your verification code for {{tenant.friendly_name}}. Please enter this code to verify your enrollment.",
                verification_message: "{{code}} is your verification code for {{tenant.friendly_name}}",
            });
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("setTemplates (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            enrollment_message:
                "{{code}} is your verification code for {{tenant.friendly_name}}. Please enter this code to verify your enrollment.",
            verification_message: "{{code}} is your verification code for {{tenant.friendly_name}}",
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/factors/phone/templates")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.phone.setTemplates({
                enrollment_message:
                    "{{code}} is your verification code for {{tenant.friendly_name}}. Please enter this code to verify your enrollment.",
                verification_message: "{{code}} is your verification code for {{tenant.friendly_name}}",
            });
        }).rejects.toThrow(Management.ForbiddenError);
    });
});
