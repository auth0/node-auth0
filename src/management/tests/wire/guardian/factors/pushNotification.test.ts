// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../../mock-server/MockServerPool";
import { ManagementClient } from "../../../../Client";
import * as Management from "../../../../api/index";

describe("PushNotification", () => {
    test("getApnsProvider (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { bundle_id: "bundle_id", sandbox: true, enabled: true };
        server
            .mockEndpoint()
            .get("/guardian/factors/push-notification/providers/apns")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.pushNotification.getApnsProvider();
        expect(response).toEqual({
            bundle_id: "bundle_id",
            sandbox: true,
            enabled: true,
        });
    });

    test("getApnsProvider (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/guardian/factors/push-notification/providers/apns")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.pushNotification.getApnsProvider();
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("getApnsProvider (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/guardian/factors/push-notification/providers/apns")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.pushNotification.getApnsProvider();
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("getApnsProvider (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/guardian/factors/push-notification/providers/apns")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.pushNotification.getApnsProvider();
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("setApnsProvider (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { sandbox: true, bundle_id: "bundle_id" };
        server
            .mockEndpoint()
            .patch("/guardian/factors/push-notification/providers/apns")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.pushNotification.setApnsProvider({});
        expect(response).toEqual({
            sandbox: true,
            bundle_id: "bundle_id",
        });
    });

    test("setApnsProvider (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/guardian/factors/push-notification/providers/apns")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.pushNotification.setApnsProvider({});
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("setApnsProvider (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/guardian/factors/push-notification/providers/apns")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.pushNotification.setApnsProvider({});
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("setApnsProvider (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/guardian/factors/push-notification/providers/apns")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.pushNotification.setApnsProvider({});
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("setFcmProvider (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/guardian/factors/push-notification/providers/fcm")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.pushNotification.setFcmProvider({});
        expect(response).toEqual({
            key: "value",
        });
    });

    test("setFcmProvider (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/guardian/factors/push-notification/providers/fcm")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.pushNotification.setFcmProvider({});
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("setFcmProvider (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/guardian/factors/push-notification/providers/fcm")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.pushNotification.setFcmProvider({});
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("setFcmProvider (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/guardian/factors/push-notification/providers/fcm")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.pushNotification.setFcmProvider({});
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("setFcmv1Provider (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/guardian/factors/push-notification/providers/fcmv1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.pushNotification.setFcmv1Provider({});
        expect(response).toEqual({
            key: "value",
        });
    });

    test("setFcmv1Provider (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/guardian/factors/push-notification/providers/fcmv1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.pushNotification.setFcmv1Provider({});
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("setFcmv1Provider (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/guardian/factors/push-notification/providers/fcmv1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.pushNotification.setFcmv1Provider({});
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("setFcmv1Provider (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/guardian/factors/push-notification/providers/fcmv1")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.pushNotification.setFcmv1Provider({});
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("getSnsProvider (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            aws_access_key_id: "aws_access_key_id",
            aws_secret_access_key: "aws_secret_access_key",
            aws_region: "aws_region",
            sns_apns_platform_application_arn: "sns_apns_platform_application_arn",
            sns_gcm_platform_application_arn: "sns_gcm_platform_application_arn",
        };
        server
            .mockEndpoint()
            .get("/guardian/factors/push-notification/providers/sns")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.pushNotification.getSnsProvider();
        expect(response).toEqual({
            aws_access_key_id: "aws_access_key_id",
            aws_secret_access_key: "aws_secret_access_key",
            aws_region: "aws_region",
            sns_apns_platform_application_arn: "sns_apns_platform_application_arn",
            sns_gcm_platform_application_arn: "sns_gcm_platform_application_arn",
        });
    });

    test("getSnsProvider (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/guardian/factors/push-notification/providers/sns")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.pushNotification.getSnsProvider();
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("getSnsProvider (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/guardian/factors/push-notification/providers/sns")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.pushNotification.getSnsProvider();
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("getSnsProvider (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/guardian/factors/push-notification/providers/sns")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.pushNotification.getSnsProvider();
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("setSnsProvider (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            aws_access_key_id: "aws_access_key_id",
            aws_secret_access_key: "aws_secret_access_key",
            aws_region: "aws_region",
            sns_apns_platform_application_arn: "sns_apns_platform_application_arn",
            sns_gcm_platform_application_arn: "sns_gcm_platform_application_arn",
        };
        server
            .mockEndpoint()
            .put("/guardian/factors/push-notification/providers/sns")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.pushNotification.setSnsProvider();
        expect(response).toEqual({
            aws_access_key_id: "aws_access_key_id",
            aws_secret_access_key: "aws_secret_access_key",
            aws_region: "aws_region",
            sns_apns_platform_application_arn: "sns_apns_platform_application_arn",
            sns_gcm_platform_application_arn: "sns_gcm_platform_application_arn",
        });
    });

    test("setSnsProvider (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/factors/push-notification/providers/sns")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.pushNotification.setSnsProvider();
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("setSnsProvider (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/factors/push-notification/providers/sns")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.pushNotification.setSnsProvider();
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("setSnsProvider (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/factors/push-notification/providers/sns")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.pushNotification.setSnsProvider();
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("updateSnsProvider (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            aws_access_key_id: "aws_access_key_id",
            aws_secret_access_key: "aws_secret_access_key",
            aws_region: "aws_region",
            sns_apns_platform_application_arn: "sns_apns_platform_application_arn",
            sns_gcm_platform_application_arn: "sns_gcm_platform_application_arn",
        };
        server
            .mockEndpoint()
            .patch("/guardian/factors/push-notification/providers/sns")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.pushNotification.updateSnsProvider();
        expect(response).toEqual({
            aws_access_key_id: "aws_access_key_id",
            aws_secret_access_key: "aws_secret_access_key",
            aws_region: "aws_region",
            sns_apns_platform_application_arn: "sns_apns_platform_application_arn",
            sns_gcm_platform_application_arn: "sns_gcm_platform_application_arn",
        });
    });

    test("updateSnsProvider (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/guardian/factors/push-notification/providers/sns")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.pushNotification.updateSnsProvider();
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("updateSnsProvider (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/guardian/factors/push-notification/providers/sns")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.pushNotification.updateSnsProvider();
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("updateSnsProvider (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/guardian/factors/push-notification/providers/sns")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.pushNotification.updateSnsProvider();
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("getSelectedProvider (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { provider: "guardian" };
        server
            .mockEndpoint()
            .get("/guardian/factors/push-notification/selected-provider")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.pushNotification.getSelectedProvider();
        expect(response).toEqual({
            provider: "guardian",
        });
    });

    test("getSelectedProvider (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/guardian/factors/push-notification/selected-provider")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.pushNotification.getSelectedProvider();
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("getSelectedProvider (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/guardian/factors/push-notification/selected-provider")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.pushNotification.getSelectedProvider();
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("getSelectedProvider (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/guardian/factors/push-notification/selected-provider")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.pushNotification.getSelectedProvider();
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("setProvider (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { provider: "guardian" };
        const rawResponseBody = { provider: "guardian" };
        server
            .mockEndpoint()
            .put("/guardian/factors/push-notification/selected-provider")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.pushNotification.setProvider({
            provider: "guardian",
        });
        expect(response).toEqual({
            provider: "guardian",
        });
    });

    test("setProvider (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { provider: "guardian" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/factors/push-notification/selected-provider")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.pushNotification.setProvider({
                provider: "guardian",
            });
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("setProvider (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { provider: "guardian" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/factors/push-notification/selected-provider")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.pushNotification.setProvider({
                provider: "guardian",
            });
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("setProvider (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { provider: "guardian" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/factors/push-notification/selected-provider")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.pushNotification.setProvider({
                provider: "guardian",
            });
        }).rejects.toThrow(Management.ForbiddenError);
    });
});
