// This file was auto-generated by Fern from our API Definition.

import * as Management from "../../../api/index";
import { ManagementClient } from "../../../Client";
import { mockServerPool } from "../../mock-server/MockServerPool";

describe("Factors", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = [{ enabled: true, trial_expired: true, name: "push-notification" }];
        server.mockEndpoint().get("/guardian/factors").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.guardian.factors.list();
        expect(response).toEqual([
            {
                enabled: true,
                trial_expired: true,
                name: "push-notification",
            },
        ]);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/guardian/factors").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.guardian.factors.list();
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/guardian/factors").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.guardian.factors.list();
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/guardian/factors").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.guardian.factors.list();
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("set (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { enabled: true };
        const rawResponseBody = { enabled: true };
        server
            .mockEndpoint()
            .put("/guardian/factors/push-notification")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.set("push-notification", {
            enabled: true,
        });
        expect(response).toEqual({
            enabled: true,
        });
    });

    test("set (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { enabled: true };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/factors/push-notification")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.set("push-notification", {
                enabled: true,
            });
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("set (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { enabled: true };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/factors/push-notification")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.set("push-notification", {
                enabled: true,
            });
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("set (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { enabled: true };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/guardian/factors/push-notification")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.guardian.factors.set("push-notification", {
                enabled: true,
            });
        }).rejects.toThrow(Management.ForbiddenError);
    });
});
