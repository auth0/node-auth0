/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../Client.js";

describe("Factors", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = [{ enabled: true, trial_expired: true, name: "push-notification" }];
        server.mockEndpoint().get("/guardian/factors").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.guardian.factors.list();
        expect(response).toEqual([
            {
                enabled: true,
                trial_expired: true,
                name: "push-notification",
            },
        ]);
    });

    test("set", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { enabled: true };
        const rawResponseBody = { enabled: true };
        server
            .mockEndpoint()
            .put("/guardian/factors/push-notification")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.guardian.factors.set("push-notification", {
            enabled: true,
        });
        expect(response).toEqual({
            enabled: true,
        });
    });
});
