// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ManagementClient } from "../../../Client";
import * as Management from "../../../api/index";

describe("Executions", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            next: "next",
            executions: [
                {
                    id: "id",
                    trace_id: "trace_id",
                    journey_id: "journey_id",
                    status: "status",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    started_at: "2024-01-15T09:30:00Z",
                    ended_at: "2024-01-15T09:30:00Z",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/flows/flow_id/executions")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            next: "next",
            executions: [
                {
                    id: "id",
                    trace_id: "trace_id",
                    journey_id: "journey_id",
                    status: "status",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    started_at: "2024-01-15T09:30:00Z",
                    ended_at: "2024-01-15T09:30:00Z",
                },
            ],
        };
        const page = await client.flows.executions.list("flow_id", {
            from: "from",
            take: 1,
        });

        expect(expected.executions).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.executions).toEqual(nextPage.data);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/flows/flow_id/executions")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.flows.executions.list("flow_id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/flows/flow_id/executions")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.flows.executions.list("flow_id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/flows/flow_id/executions")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.flows.executions.list("flow_id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("list (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/flows/flow_id/executions")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.flows.executions.list("flow_id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            trace_id: "trace_id",
            journey_id: "journey_id",
            status: "status",
            debug: { key: "value" },
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            started_at: "2024-01-15T09:30:00Z",
            ended_at: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .get("/flows/flow_id/executions/execution_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.flows.executions.get("flow_id", "execution_id");
        expect(response).toEqual({
            id: "id",
            trace_id: "trace_id",
            journey_id: "journey_id",
            status: "status",
            debug: {
                key: "value",
            },
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            started_at: "2024-01-15T09:30:00Z",
            ended_at: "2024-01-15T09:30:00Z",
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/flows/flow_id/executions/execution_id")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.flows.executions.get("flow_id", "execution_id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/flows/flow_id/executions/execution_id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.flows.executions.get("flow_id", "execution_id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/flows/flow_id/executions/execution_id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.flows.executions.get("flow_id", "execution_id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("get (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/flows/flow_id/executions/execution_id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.flows.executions.get("flow_id", "execution_id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/flows/flow_id/executions/execution_id").respondWith().statusCode(200).build();

        const response = await client.flows.executions.delete("flow_id", "execution_id");
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/flows/flow_id/executions/execution_id")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.flows.executions.delete("flow_id", "execution_id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/flows/flow_id/executions/execution_id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.flows.executions.delete("flow_id", "execution_id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("delete (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/flows/flow_id/executions/execution_id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.flows.executions.delete("flow_id", "execution_id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("delete (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/flows/flow_id/executions/execution_id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.flows.executions.delete("flow_id", "execution_id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });
});
