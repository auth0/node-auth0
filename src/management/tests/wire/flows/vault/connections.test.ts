/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../../Client.js";
import * as Management from "../../../../api/index.js";

describe("Connections", () => {
    test("list (754f6e5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            start: 1.1,
            limit: 1.1,
            total: 1.1,
            connections: [
                {
                    id: "id",
                    app_id: "app_id",
                    name: "name",
                    account_name: "account_name",
                    ready: true,
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    refreshed_at: "2024-01-15T09:30:00Z",
                    fingerprint: "fingerprint",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/flows/vault/connections")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            start: 1.1,
            limit: 1.1,
            total: 1.1,
            connections: [
                {
                    id: "id",
                    app_id: "app_id",
                    name: "name",
                    account_name: "account_name",
                    ready: true,
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    refreshed_at: "2024-01-15T09:30:00Z",
                    fingerprint: "fingerprint",
                },
            ],
        };
        const page = await client.flows.vault.connections.list();
        expect(expected.connections).toEqual(page.data);

        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.connections).toEqual(nextPage.data);
    });

    test("list (c60dd33b)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/flows/vault/connections")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.flows.vault.connections.list();
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("list (1e230aeb)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/flows/vault/connections")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.flows.vault.connections.list();
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("list (af841397)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/flows/vault/connections")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.flows.vault.connections.list();
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("list (ee1e23bf)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/flows/vault/connections")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.flows.vault.connections.list();
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });

    test("create (36741920)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "name",
            app_id: "ACTIVECAMPAIGN",
            setup: { type: "API_KEY", api_key: "api_key" },
        };
        const rawResponseBody = {
            id: "id",
            app_id: "app_id",
            environment: "environment",
            name: "name",
            account_name: "account_name",
            ready: true,
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            refreshed_at: "2024-01-15T09:30:00Z",
            fingerprint: "fingerprint",
        };
        server
            .mockEndpoint()
            .post("/flows/vault/connections")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.flows.vault.connections.create({
            name: "name",
            app_id: "ACTIVECAMPAIGN",
            setup: {
                type: "API_KEY",
                api_key: "api_key",
            },
        });
        expect(response).toEqual({
            id: "id",
            app_id: "app_id",
            environment: "environment",
            name: "name",
            account_name: "account_name",
            ready: true,
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            refreshed_at: "2024-01-15T09:30:00Z",
            fingerprint: "fingerprint",
        });
    });

    test("create (36f48611)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "x",
            app_id: "ACTIVECAMPAIGN",
            setup: { type: "API_KEY", api_key: "api_key", base_url: undefined },
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/flows/vault/connections")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.flows.vault.connections.create({
                name: "x",
                app_id: "ACTIVECAMPAIGN",
                setup: {
                    type: "API_KEY",
                    api_key: "api_key",
                    base_url: undefined,
                },
            });
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("create (c3d8d3d1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "x",
            app_id: "ACTIVECAMPAIGN",
            setup: { type: "API_KEY", api_key: "api_key", base_url: undefined },
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/flows/vault/connections")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.flows.vault.connections.create({
                name: "x",
                app_id: "ACTIVECAMPAIGN",
                setup: {
                    type: "API_KEY",
                    api_key: "api_key",
                    base_url: undefined,
                },
            });
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("create (991b78cd)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "x",
            app_id: "ACTIVECAMPAIGN",
            setup: { type: "API_KEY", api_key: "api_key", base_url: undefined },
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/flows/vault/connections")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.flows.vault.connections.create({
                name: "x",
                app_id: "ACTIVECAMPAIGN",
                setup: {
                    type: "API_KEY",
                    api_key: "api_key",
                    base_url: undefined,
                },
            });
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("create (e49c76f5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "x",
            app_id: "ACTIVECAMPAIGN",
            setup: { type: "API_KEY", api_key: "api_key", base_url: undefined },
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/flows/vault/connections")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.flows.vault.connections.create({
                name: "x",
                app_id: "ACTIVECAMPAIGN",
                setup: {
                    type: "API_KEY",
                    api_key: "api_key",
                    base_url: undefined,
                },
            });
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });

    test("get (f8d72295)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            app_id: "app_id",
            environment: "environment",
            name: "name",
            account_name: "account_name",
            ready: true,
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            refreshed_at: "2024-01-15T09:30:00Z",
            fingerprint: "fingerprint",
        };
        server
            .mockEndpoint()
            .get("/flows/vault/connections/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.flows.vault.connections.get("id");
        expect(response).toEqual({
            id: "id",
            app_id: "app_id",
            environment: "environment",
            name: "name",
            account_name: "account_name",
            ready: true,
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            refreshed_at: "2024-01-15T09:30:00Z",
            fingerprint: "fingerprint",
        });
    });

    test("get (fcf9dbd1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/flows/vault/connections/id")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.flows.vault.connections.get("id");
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("get (49d52691)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/flows/vault/connections/id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.flows.vault.connections.get("id");
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("get (2428808d)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/flows/vault/connections/id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.flows.vault.connections.get("id");
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("get (e55ce3fd)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/flows/vault/connections/id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.flows.vault.connections.get("id");
        }).rejects.toThrow(
            new Management.NotFoundError({
                key: "value",
            }),
        );
    });

    test("get (27b44cb5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/flows/vault/connections/id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.flows.vault.connections.get("id");
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });

    test("delete (c7f0a6bf)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/flows/vault/connections/id").respondWith().statusCode(200).build();

        const response = await client.flows.vault.connections.delete("id");
        expect(response).toEqual(undefined);
    });

    test("delete (fcf9dbd1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/flows/vault/connections/id")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.flows.vault.connections.delete("id");
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("delete (49d52691)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/flows/vault/connections/id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.flows.vault.connections.delete("id");
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("delete (2428808d)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/flows/vault/connections/id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.flows.vault.connections.delete("id");
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("delete (27b44cb5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/flows/vault/connections/id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.flows.vault.connections.delete("id");
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });

    test("update (18536db0)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            app_id: "app_id",
            environment: "environment",
            name: "name",
            account_name: "account_name",
            ready: true,
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            refreshed_at: "2024-01-15T09:30:00Z",
            fingerprint: "fingerprint",
        };
        server
            .mockEndpoint()
            .patch("/flows/vault/connections/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.flows.vault.connections.update("id");
        expect(response).toEqual({
            id: "id",
            app_id: "app_id",
            environment: "environment",
            name: "name",
            account_name: "account_name",
            ready: true,
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            refreshed_at: "2024-01-15T09:30:00Z",
            fingerprint: "fingerprint",
        });
    });

    test("update (e746619)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: undefined, setup: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/flows/vault/connections/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.flows.vault.connections.update("id", {
                name: undefined,
                setup: undefined,
            });
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("update (fa7439)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: undefined, setup: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/flows/vault/connections/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.flows.vault.connections.update("id", {
                name: undefined,
                setup: undefined,
            });
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("update (6769c55)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: undefined, setup: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/flows/vault/connections/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.flows.vault.connections.update("id", {
                name: undefined,
                setup: undefined,
            });
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("update (53e7f325)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: undefined, setup: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/flows/vault/connections/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.flows.vault.connections.update("id", {
                name: undefined,
                setup: undefined,
            });
        }).rejects.toThrow(
            new Management.NotFoundError({
                key: "value",
            }),
        );
    });

    test("update (2f8bc75d)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: undefined, setup: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/flows/vault/connections/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.flows.vault.connections.update("id", {
                name: undefined,
                setup: undefined,
            });
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });
});
