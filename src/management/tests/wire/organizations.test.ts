/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { ManagementClient } from "../../Client.js";

describe("Organizations", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name" };
        const rawResponseBody = {
            id: "id",
            name: "name",
            display_name: "display_name",
            branding: { logo_url: "logo_url", colors: { primary: "primary", page_background: "page_background" } },
            metadata: { key: "value" },
            token_quota: { client_credentials: { enforce: true, per_day: 1, per_hour: 1 } },
            enabled_connections: [
                {
                    connection_id: "connection_id",
                    assign_membership_on_login: true,
                    show_as_button: true,
                    is_signup_enabled: true,
                },
            ],
        };
        server
            .mockEndpoint()
            .post("/organizations")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.organizations.create({
            name: "name",
        });
        expect(response).toEqual({
            id: "id",
            name: "name",
            display_name: "display_name",
            branding: {
                logo_url: "logo_url",
                colors: {
                    primary: "primary",
                    page_background: "page_background",
                },
            },
            metadata: {
                key: "value",
            },
            token_quota: {
                client_credentials: {
                    enforce: true,
                    per_day: 1,
                    per_hour: 1,
                },
            },
            enabled_connections: [
                {
                    connection_id: "connection_id",
                    assign_membership_on_login: true,
                    show_as_button: true,
                    is_signup_enabled: true,
                },
            ],
        });
    });

    test("getByName", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            name: "name",
            display_name: "display_name",
            branding: { logo_url: "logo_url", colors: { primary: "primary", page_background: "page_background" } },
            metadata: { key: "value" },
            token_quota: { client_credentials: { enforce: true, per_day: 1, per_hour: 1 } },
        };
        server
            .mockEndpoint()
            .get("/organizations/name/name")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.organizations.getByName("name");
        expect(response).toEqual({
            id: "id",
            name: "name",
            display_name: "display_name",
            branding: {
                logo_url: "logo_url",
                colors: {
                    primary: "primary",
                    page_background: "page_background",
                },
            },
            metadata: {
                key: "value",
            },
            token_quota: {
                client_credentials: {
                    enforce: true,
                    per_day: 1,
                    per_hour: 1,
                },
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            name: "name",
            display_name: "display_name",
            branding: { logo_url: "logo_url", colors: { primary: "primary", page_background: "page_background" } },
            metadata: { key: "value" },
            token_quota: { client_credentials: { enforce: true, per_day: 1, per_hour: 1 } },
        };
        server.mockEndpoint().get("/organizations/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.organizations.get("id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            display_name: "display_name",
            branding: {
                logo_url: "logo_url",
                colors: {
                    primary: "primary",
                    page_background: "page_background",
                },
            },
            metadata: {
                key: "value",
            },
            token_quota: {
                client_credentials: {
                    enforce: true,
                    per_day: 1,
                    per_hour: 1,
                },
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/organizations/id").respondWith().statusCode(200).build();

        const response = await client.organizations.delete("id");
        expect(response).toEqual(undefined);
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            name: "name",
            display_name: "display_name",
            branding: { logo_url: "logo_url", colors: { primary: "primary", page_background: "page_background" } },
            metadata: { key: "value" },
            token_quota: { client_credentials: { enforce: true, per_day: 1, per_hour: 1 } },
        };
        server
            .mockEndpoint()
            .patch("/organizations/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.organizations.update("id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            display_name: "display_name",
            branding: {
                logo_url: "logo_url",
                colors: {
                    primary: "primary",
                    page_background: "page_background",
                },
            },
            metadata: {
                key: "value",
            },
            token_quota: {
                client_credentials: {
                    enforce: true,
                    per_day: 1,
                    per_hour: 1,
                },
            },
        });
    });
});
