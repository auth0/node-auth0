/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { ManagementClient } from "../../Client.js";

describe("LogStreams", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "id",
                name: "name",
                status: "active",
                type: "http",
                isPriority: true,
                filters: [{}],
                pii_config: { log_fields: ["first_name"], method: "mask", algorithm: "xxhash" },
                sink: {
                    httpAuthorization: "httpAuthorization",
                    httpContentFormat: "JSONARRAY",
                    httpContentType: "httpContentType",
                    httpEndpoint: "httpEndpoint",
                    httpCustomHeaders: [{}],
                },
            },
        ];
        server.mockEndpoint().get("/log-streams").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.logStreams.list();
        expect(response).toEqual([
            {
                id: "id",
                name: "name",
                status: "active",
                type: "http",
                isPriority: true,
                filters: [{}],
                pii_config: {
                    log_fields: ["first_name"],
                    method: "mask",
                    algorithm: "xxhash",
                },
                sink: {
                    httpAuthorization: "httpAuthorization",
                    httpContentFormat: "JSONARRAY",
                    httpContentType: "httpContentType",
                    httpEndpoint: "httpEndpoint",
                    httpCustomHeaders: [{}],
                },
            },
        ]);
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { type: "http", sink: { httpEndpoint: "httpEndpoint" } };
        const rawResponseBody = {
            id: "id",
            name: "name",
            status: "active",
            type: "http",
            isPriority: true,
            filters: [{ type: "category", name: "auth.ancillary.fail" }],
            pii_config: { log_fields: ["first_name"], method: "mask", algorithm: "xxhash" },
            sink: {
                httpAuthorization: "httpAuthorization",
                httpContentFormat: "JSONARRAY",
                httpContentType: "httpContentType",
                httpEndpoint: "httpEndpoint",
                httpCustomHeaders: [{}],
            },
        };
        server
            .mockEndpoint()
            .post("/log-streams")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.logStreams.create({
            type: "http",
            sink: {
                httpEndpoint: "httpEndpoint",
            },
        });
        expect(response).toEqual({
            id: "id",
            name: "name",
            status: "active",
            type: "http",
            isPriority: true,
            filters: [
                {
                    type: "category",
                    name: "auth.ancillary.fail",
                },
            ],
            pii_config: {
                log_fields: ["first_name"],
                method: "mask",
                algorithm: "xxhash",
            },
            sink: {
                httpAuthorization: "httpAuthorization",
                httpContentFormat: "JSONARRAY",
                httpContentType: "httpContentType",
                httpEndpoint: "httpEndpoint",
                httpCustomHeaders: [{}],
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            name: "name",
            status: "active",
            type: "http",
            isPriority: true,
            filters: [{ type: "category", name: "auth.ancillary.fail" }],
            pii_config: { log_fields: ["first_name"], method: "mask", algorithm: "xxhash" },
            sink: {
                httpAuthorization: "httpAuthorization",
                httpContentFormat: "JSONARRAY",
                httpContentType: "httpContentType",
                httpEndpoint: "httpEndpoint",
                httpCustomHeaders: [{}],
            },
        };
        server.mockEndpoint().get("/log-streams/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.logStreams.get("id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            status: "active",
            type: "http",
            isPriority: true,
            filters: [
                {
                    type: "category",
                    name: "auth.ancillary.fail",
                },
            ],
            pii_config: {
                log_fields: ["first_name"],
                method: "mask",
                algorithm: "xxhash",
            },
            sink: {
                httpAuthorization: "httpAuthorization",
                httpContentFormat: "JSONARRAY",
                httpContentType: "httpContentType",
                httpEndpoint: "httpEndpoint",
                httpCustomHeaders: [{}],
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/log-streams/id").respondWith().statusCode(200).build();

        const response = await client.logStreams.delete("id");
        expect(response).toEqual(undefined);
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            name: "name",
            status: "active",
            type: "http",
            isPriority: true,
            filters: [{ type: "category", name: "auth.ancillary.fail" }],
            pii_config: { log_fields: ["first_name"], method: "mask", algorithm: "xxhash" },
            sink: {
                httpAuthorization: "httpAuthorization",
                httpContentFormat: "JSONARRAY",
                httpContentType: "httpContentType",
                httpEndpoint: "httpEndpoint",
                httpCustomHeaders: [{}],
            },
        };
        server
            .mockEndpoint()
            .patch("/log-streams/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.logStreams.update("id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            status: "active",
            type: "http",
            isPriority: true,
            filters: [
                {
                    type: "category",
                    name: "auth.ancillary.fail",
                },
            ],
            pii_config: {
                log_fields: ["first_name"],
                method: "mask",
                algorithm: "xxhash",
            },
            sink: {
                httpAuthorization: "httpAuthorization",
                httpContentFormat: "JSONARRAY",
                httpContentType: "httpContentType",
                httpEndpoint: "httpEndpoint",
                httpCustomHeaders: [{}],
            },
        });
    });
});
