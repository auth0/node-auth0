/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { ManagementClient } from "../../Client.js";

describe("Prompts", () => {
    test("getSettings", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            universal_login_experience: "new",
            identifier_first: true,
            webauthn_platform_first_factor: true,
        };
        server.mockEndpoint().get("/prompts").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.prompts.getSettings();
        expect(response).toEqual({
            universal_login_experience: "new",
            identifier_first: true,
            webauthn_platform_first_factor: true,
        });
    });

    test("updateSettings", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            universal_login_experience: "new",
            identifier_first: true,
            webauthn_platform_first_factor: true,
        };
        server
            .mockEndpoint()
            .patch("/prompts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.prompts.updateSettings();
        expect(response).toEqual({
            universal_login_experience: "new",
            identifier_first: true,
            webauthn_platform_first_factor: true,
        });
    });
});
