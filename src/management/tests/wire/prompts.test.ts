/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { ManagementClient } from "../../Client.js";

describe("Prompts", () => {
    test("getSettings", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            universal_login_experience: "new",
            identifier_first: true,
            webauthn_platform_first_factor: true,
        };
        server.mockEndpoint().get("/prompts").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.prompts.getSettings();
        expect(response).toEqual({
            universal_login_experience: "new",
            identifier_first: true,
            webauthn_platform_first_factor: true,
        });
    });

    test("updateSettings", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            universal_login_experience: "new",
            identifier_first: true,
            webauthn_platform_first_factor: true,
        };
        server
            .mockEndpoint()
            .patch("/prompts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.prompts.updateSettings();
        expect(response).toEqual({
            universal_login_experience: "new",
            identifier_first: true,
            webauthn_platform_first_factor: true,
        });
    });

    test("getCustomTextByLanguage", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/prompts/login/custom-text/am")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.prompts.getCustomTextByLanguage("login", "am");
        expect(response).toEqual({
            key: "value",
        });
    });

    test("setCustomTextByLanguage", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { key: "value" };

        server
            .mockEndpoint()
            .put("/prompts/login/custom-text/am")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.prompts.setCustomTextByLanguage("login", "am", {
            key: "value",
        });
        expect(response).toEqual(undefined);
    });

    test("getPartials", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/prompts/login/partials")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.prompts.getPartials("login");
        expect(response).toEqual({
            key: "value",
        });
    });

    test("setPartials", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { key: "value" };

        server
            .mockEndpoint()
            .put("/prompts/login/partials")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.prompts.setPartials("login", {
            key: "value",
        });
        expect(response).toEqual(undefined);
    });

    test("getAcul", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            tenant: "tenant",
            prompt: "prompt",
            screen: "screen",
            rendering_mode: "advanced",
            context_configuration: ["context_configuration"],
            default_head_tags_disabled: true,
            head_tags: [{ tag: "tag", content: "content" }],
        };
        server
            .mockEndpoint()
            .get("/prompts/login/screen/login/rendering")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.prompts.getAcul("login", "login");
        expect(response).toEqual({
            tenant: "tenant",
            prompt: "prompt",
            screen: "screen",
            rendering_mode: "advanced",
            context_configuration: ["context_configuration"],
            default_head_tags_disabled: true,
            head_tags: [
                {
                    tag: "tag",
                    content: "content",
                },
            ],
        });
    });

    test("updateAcul", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            rendering_mode: "advanced",
            context_configuration: ["context_configuration"],
            default_head_tags_disabled: true,
            head_tags: [{ tag: "tag", content: "content" }],
        };
        server
            .mockEndpoint()
            .patch("/prompts/login/screen/login/rendering")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.prompts.updateAcul("login", "login");
        expect(response).toEqual({
            rendering_mode: "advanced",
            context_configuration: ["context_configuration"],
            default_head_tags_disabled: true,
            head_tags: [
                {
                    tag: "tag",
                    content: "content",
                },
            ],
        });
    });
});
