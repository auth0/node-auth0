/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { ManagementClient } from "../../Client.js";
import * as Management from "../../api/index.js";

describe("Prompts", () => {
    test("getSettings (f5ddf969)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            universal_login_experience: "new",
            identifier_first: true,
            webauthn_platform_first_factor: true,
        };
        server.mockEndpoint().get("/prompts").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.prompts.getSettings();
        expect(response).toEqual({
            universal_login_experience: "new",
            identifier_first: true,
            webauthn_platform_first_factor: true,
        });
    });

    test("getSettings (1e230aeb)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/prompts").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.prompts.getSettings();
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("getSettings (af841397)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/prompts").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.prompts.getSettings();
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("getSettings (ee1e23bf)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/prompts").respondWith().statusCode(429).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.prompts.getSettings();
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });

    test("updateSettings (30a8300c)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            universal_login_experience: "new",
            identifier_first: true,
            webauthn_platform_first_factor: true,
        };
        server
            .mockEndpoint()
            .patch("/prompts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.prompts.updateSettings();
        expect(response).toEqual({
            universal_login_experience: "new",
            identifier_first: true,
            webauthn_platform_first_factor: true,
        });
    });

    test("updateSettings (7c7fd6ea)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            universal_login_experience: undefined,
            identifier_first: undefined,
            webauthn_platform_first_factor: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/prompts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.prompts.updateSettings({
                universal_login_experience: undefined,
                identifier_first: undefined,
                webauthn_platform_first_factor: undefined,
            });
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("updateSettings (a2cbc442)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            universal_login_experience: undefined,
            identifier_first: undefined,
            webauthn_platform_first_factor: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/prompts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.prompts.updateSettings({
                universal_login_experience: undefined,
                identifier_first: undefined,
                webauthn_platform_first_factor: undefined,
            });
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("updateSettings (ee1b6326)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            universal_login_experience: undefined,
            identifier_first: undefined,
            webauthn_platform_first_factor: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/prompts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.prompts.updateSettings({
                universal_login_experience: undefined,
                identifier_first: undefined,
                webauthn_platform_first_factor: undefined,
            });
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("updateSettings (150a7732)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            universal_login_experience: undefined,
            identifier_first: undefined,
            webauthn_platform_first_factor: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/prompts")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.prompts.updateSettings({
                universal_login_experience: undefined,
                identifier_first: undefined,
                webauthn_platform_first_factor: undefined,
            });
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });
});
