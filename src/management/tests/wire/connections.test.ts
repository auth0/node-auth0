/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { ManagementClient } from "../../Client.js";

describe("Connections", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name", strategy: "ad" };
        const rawResponseBody = {
            name: "name",
            display_name: "display_name",
            options: { key: "value" },
            id: "id",
            strategy: "strategy",
            realms: ["realms"],
            enabled_clients: ["enabled_clients"],
            is_domain_connection: true,
            show_as_button: true,
            metadata: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/connections")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.connections.create({
            name: "name",
            strategy: "ad",
        });
        expect(response).toEqual({
            name: "name",
            display_name: "display_name",
            options: {
                key: "value",
            },
            id: "id",
            strategy: "strategy",
            realms: ["realms"],
            enabled_clients: ["enabled_clients"],
            is_domain_connection: true,
            show_as_button: true,
            metadata: {
                key: "value",
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            name: "name",
            display_name: "display_name",
            options: { key: "value" },
            id: "id",
            strategy: "strategy",
            realms: ["realms"],
            enabled_clients: ["enabled_clients"],
            is_domain_connection: true,
            show_as_button: true,
            metadata: { key: "value" },
        };
        server.mockEndpoint().get("/connections/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.connections.get("id");
        expect(response).toEqual({
            name: "name",
            display_name: "display_name",
            options: {
                key: "value",
            },
            id: "id",
            strategy: "strategy",
            realms: ["realms"],
            enabled_clients: ["enabled_clients"],
            is_domain_connection: true,
            show_as_button: true,
            metadata: {
                key: "value",
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/connections/id").respondWith().statusCode(200).build();

        const response = await client.connections.delete("id");
        expect(response).toEqual(undefined);
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            name: "name",
            display_name: "display_name",
            options: { key: "value" },
            id: "id",
            strategy: "strategy",
            realms: ["realms"],
            enabled_clients: ["enabled_clients"],
            is_domain_connection: true,
            show_as_button: true,
            metadata: { key: "value" },
        };
        server
            .mockEndpoint()
            .patch("/connections/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.connections.update("id");
        expect(response).toEqual({
            name: "name",
            display_name: "display_name",
            options: {
                key: "value",
            },
            id: "id",
            strategy: "strategy",
            realms: ["realms"],
            enabled_clients: ["enabled_clients"],
            is_domain_connection: true,
            show_as_button: true,
            metadata: {
                key: "value",
            },
        });
    });

    test("checkStatus", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().get("/connections/id/status").respondWith().statusCode(200).build();

        const response = await client.connections.checkStatus("id");
        expect(response).toEqual(undefined);
    });
});
