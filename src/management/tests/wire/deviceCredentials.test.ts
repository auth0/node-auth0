/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { ManagementClient } from "../../Client.js";

describe("DeviceCredentials", () => {
    test("createPublicKey", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            device_name: "device_name",
            type: "public_key",
            value: "value",
            device_id: "device_id",
        };
        const rawResponseBody = { id: "id" };
        server
            .mockEndpoint()
            .post("/device-credentials")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.deviceCredentials.createPublicKey({
            device_name: "device_name",
            value: "value",
            device_id: "device_id",
        });
        expect(response).toEqual({
            id: "id",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/device-credentials/id").respondWith().statusCode(200).build();

        const response = await client.deviceCredentials.delete("id");
        expect(response).toEqual(undefined);
    });
});
