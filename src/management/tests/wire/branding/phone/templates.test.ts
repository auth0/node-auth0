/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../../Client.js";
import * as Management from "../../../../api/index.js";

describe("Templates", () => {
    test("list (828f05db)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            templates: [
                {
                    id: "id",
                    channel: "channel",
                    customizable: true,
                    tenant: "tenant",
                    content: {},
                    type: "otp_verify",
                    disabled: true,
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/branding/phone/templates")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.branding.phone.templates.list();
        expect(response).toEqual({
            templates: [
                {
                    id: "id",
                    channel: "channel",
                    customizable: true,
                    tenant: "tenant",
                    content: {},
                    type: "otp_verify",
                    disabled: true,
                },
            ],
        });
    });

    test("list (c60dd33b)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/branding/phone/templates")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.phone.templates.list();
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("list (1e230aeb)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/branding/phone/templates")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.phone.templates.list();
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("list (af841397)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/branding/phone/templates")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.phone.templates.list();
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("list (ee1e23bf)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/branding/phone/templates")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.phone.templates.list();
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });

    test("create (9bd36397)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            channel: "channel",
            customizable: true,
            tenant: "tenant",
            content: { syntax: "syntax", from: "from", body: { text: "text", voice: "voice" } },
            type: "otp_verify",
            disabled: true,
        };
        server
            .mockEndpoint()
            .post("/branding/phone/templates")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.branding.phone.templates.create();
        expect(response).toEqual({
            id: "id",
            channel: "channel",
            customizable: true,
            tenant: "tenant",
            content: {
                syntax: "syntax",
                from: "from",
                body: {
                    text: "text",
                    voice: "voice",
                },
            },
            type: "otp_verify",
            disabled: true,
        });
    });

    test("create (1516a932)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { type: undefined, disabled: undefined, content: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/branding/phone/templates")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.phone.templates.create({
                type: undefined,
                disabled: undefined,
                content: undefined,
            });
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("create (fb33d08a)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { type: undefined, disabled: undefined, content: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/branding/phone/templates")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.phone.templates.create({
                type: undefined,
                disabled: undefined,
                content: undefined,
            });
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("create (a1481a4e)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { type: undefined, disabled: undefined, content: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/branding/phone/templates")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.phone.templates.create({
                type: undefined,
                disabled: undefined,
                content: undefined,
            });
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("create (91609346)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { type: undefined, disabled: undefined, content: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/branding/phone/templates")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(409)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.phone.templates.create({
                type: undefined,
                disabled: undefined,
                content: undefined,
            });
        }).rejects.toThrow(
            new Management.ConflictError({
                key: "value",
            }),
        );
    });

    test("create (271466da)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { type: undefined, disabled: undefined, content: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/branding/phone/templates")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.phone.templates.create({
                type: undefined,
                disabled: undefined,
                content: undefined,
            });
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });

    test("get (a774a254)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            channel: "channel",
            customizable: true,
            tenant: "tenant",
            content: { syntax: "syntax", from: "from", body: { text: "text", voice: "voice" } },
            type: "otp_verify",
            disabled: true,
        };
        server
            .mockEndpoint()
            .get("/branding/phone/templates/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.branding.phone.templates.get("id");
        expect(response).toEqual({
            id: "id",
            channel: "channel",
            customizable: true,
            tenant: "tenant",
            content: {
                syntax: "syntax",
                from: "from",
                body: {
                    text: "text",
                    voice: "voice",
                },
            },
            type: "otp_verify",
            disabled: true,
        });
    });

    test("get (fcf9dbd1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/branding/phone/templates/id")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.phone.templates.get("id");
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("get (49d52691)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/branding/phone/templates/id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.phone.templates.get("id");
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("get (2428808d)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/branding/phone/templates/id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.phone.templates.get("id");
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("get (e55ce3fd)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/branding/phone/templates/id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.phone.templates.get("id");
        }).rejects.toThrow(
            new Management.NotFoundError({
                key: "value",
            }),
        );
    });

    test("get (27b44cb5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/branding/phone/templates/id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.phone.templates.get("id");
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });

    test("delete (c7f0a6bf)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/branding/phone/templates/id").respondWith().statusCode(200).build();

        const response = await client.branding.phone.templates.delete("id");
        expect(response).toEqual(undefined);
    });

    test("delete (fcf9dbd1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/branding/phone/templates/id")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.phone.templates.delete("id");
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("delete (49d52691)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/branding/phone/templates/id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.phone.templates.delete("id");
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("delete (2428808d)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/branding/phone/templates/id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.phone.templates.delete("id");
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("delete (e55ce3fd)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/branding/phone/templates/id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.phone.templates.delete("id");
        }).rejects.toThrow(
            new Management.NotFoundError({
                key: "value",
            }),
        );
    });

    test("delete (27b44cb5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/branding/phone/templates/id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.phone.templates.delete("id");
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });

    test("update (8876e08d)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            channel: "channel",
            customizable: true,
            tenant: "tenant",
            content: { syntax: "syntax", from: "from", body: { text: "text", voice: "voice" } },
            type: "otp_verify",
            disabled: true,
        };
        server
            .mockEndpoint()
            .patch("/branding/phone/templates/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.branding.phone.templates.update("id");
        expect(response).toEqual({
            id: "id",
            channel: "channel",
            customizable: true,
            tenant: "tenant",
            content: {
                syntax: "syntax",
                from: "from",
                body: {
                    text: "text",
                    voice: "voice",
                },
            },
            type: "otp_verify",
            disabled: true,
        });
    });

    test("update (8f28893a)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { content: undefined, disabled: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/branding/phone/templates/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.phone.templates.update("id", {
                content: undefined,
                disabled: undefined,
            });
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("update (e8b8d2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { content: undefined, disabled: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/branding/phone/templates/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.phone.templates.update("id", {
                content: undefined,
                disabled: undefined,
            });
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("update (fcf69a76)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { content: undefined, disabled: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/branding/phone/templates/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.phone.templates.update("id", {
                content: undefined,
                disabled: undefined,
            });
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("update (9c8db2ae)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { content: undefined, disabled: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/branding/phone/templates/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.phone.templates.update("id", {
                content: undefined,
                disabled: undefined,
            });
        }).rejects.toThrow(
            new Management.NotFoundError({
                key: "value",
            }),
        );
    });

    test("update (f439c8c2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { content: undefined, disabled: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/branding/phone/templates/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.phone.templates.update("id", {
                content: undefined,
                disabled: undefined,
            });
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });

    test("reset (fb61fe1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { key: "value" };
        const rawResponseBody = {
            id: "x",
            channel: "channel",
            customizable: true,
            tenant: "x",
            content: { syntax: "syntax", from: "x", body: { text: "x", voice: "x" } },
            type: "otp_verify",
            disabled: true,
        };
        server
            .mockEndpoint()
            .patch("/branding/phone/templates/id/reset")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.branding.phone.templates.reset("id", {
            key: "value",
        });
        expect(response).toEqual({
            id: "x",
            channel: "channel",
            customizable: true,
            tenant: "x",
            content: {
                syntax: "syntax",
                from: "x",
                body: {
                    text: "x",
                    voice: "x",
                },
            },
            type: "otp_verify",
            disabled: true,
        });
    });

    test("reset (cdfab77c)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { key: "value" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/branding/phone/templates/id/reset")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.phone.templates.reset("id", {
                key: "value",
            });
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("reset (d04d8304)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { key: "value" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/branding/phone/templates/id/reset")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.phone.templates.reset("id", {
                key: "value",
            });
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("reset (9e11d2e8)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { key: "value" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/branding/phone/templates/id/reset")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.phone.templates.reset("id", {
                key: "value",
            });
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("reset (46b71c34)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { key: "value" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/branding/phone/templates/id/reset")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.phone.templates.reset("id", {
                key: "value",
            });
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });

    test("test (e67fdf07)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { to: "to" };
        const rawResponseBody = { message: "message" };
        server
            .mockEndpoint()
            .post("/branding/phone/templates/id/try")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.branding.phone.templates.test("id", {
            to: "to",
        });
        expect(response).toEqual({
            message: "message",
        });
    });

    test("test (9a4c89af)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { to: "x", delivery_method: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/branding/phone/templates/id/try")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.phone.templates.test("id", {
                to: "x",
                delivery_method: undefined,
            });
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("test (f81cd5bf)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { to: "x", delivery_method: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/branding/phone/templates/id/try")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.phone.templates.test("id", {
                to: "x",
                delivery_method: undefined,
            });
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("test (f9f4d20b)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { to: "x", delivery_method: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/branding/phone/templates/id/try")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.phone.templates.test("id", {
                to: "x",
                delivery_method: undefined,
            });
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("test (b570c96b)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { to: "x", delivery_method: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/branding/phone/templates/id/try")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.phone.templates.test("id", {
                to: "x",
                delivery_method: undefined,
            });
        }).rejects.toThrow(
            new Management.NotFoundError({
                key: "value",
            }),
        );
    });

    test("test (9b38c03)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { to: "x", delivery_method: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/branding/phone/templates/id/try")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.phone.templates.test("id", {
                to: "x",
                delivery_method: undefined,
            });
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });
});
