/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../../Client.js";
import * as Management from "../../../../api/index.js";

describe("Templates", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            templates: [
                {
                    id: "id",
                    channel: "channel",
                    customizable: true,
                    tenant: "tenant",
                    content: {},
                    type: "otp_verify",
                    disabled: true,
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/branding/phone/templates")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.branding.phone.templates.list();
        expect(response).toEqual({
            templates: [
                {
                    id: "id",
                    channel: "channel",
                    customizable: true,
                    tenant: "tenant",
                    content: {},
                    type: "otp_verify",
                    disabled: true,
                },
            ],
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            channel: "channel",
            customizable: true,
            tenant: "tenant",
            content: { syntax: "syntax", from: "from", body: { text: "text", voice: "voice" } },
            type: "otp_verify",
            disabled: true,
        };
        server
            .mockEndpoint()
            .post("/branding/phone/templates")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.branding.phone.templates.create();
        expect(response).toEqual({
            id: "id",
            channel: "channel",
            customizable: true,
            tenant: "tenant",
            content: {
                syntax: "syntax",
                from: "from",
                body: {
                    text: "text",
                    voice: "voice",
                },
            },
            type: "otp_verify",
            disabled: true,
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            channel: "channel",
            customizable: true,
            tenant: "tenant",
            content: { syntax: "syntax", from: "from", body: { text: "text", voice: "voice" } },
            type: "otp_verify",
            disabled: true,
        };
        server
            .mockEndpoint()
            .get("/branding/phone/templates/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.branding.phone.templates.get("id");
        expect(response).toEqual({
            id: "id",
            channel: "channel",
            customizable: true,
            tenant: "tenant",
            content: {
                syntax: "syntax",
                from: "from",
                body: {
                    text: "text",
                    voice: "voice",
                },
            },
            type: "otp_verify",
            disabled: true,
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/branding/phone/templates/id").respondWith().statusCode(200).build();

        const response = await client.branding.phone.templates.delete("id");
        expect(response).toEqual(undefined);
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            channel: "channel",
            customizable: true,
            tenant: "tenant",
            content: { syntax: "syntax", from: "from", body: { text: "text", voice: "voice" } },
            type: "otp_verify",
            disabled: true,
        };
        server
            .mockEndpoint()
            .patch("/branding/phone/templates/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.branding.phone.templates.update("id");
        expect(response).toEqual({
            id: "id",
            channel: "channel",
            customizable: true,
            tenant: "tenant",
            content: {
                syntax: "syntax",
                from: "from",
                body: {
                    text: "text",
                    voice: "voice",
                },
            },
            type: "otp_verify",
            disabled: true,
        });
    });

    test("reset (fb61fe1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { key: "value" };
        const rawResponseBody = {
            id: "x",
            channel: "channel",
            customizable: true,
            tenant: "x",
            content: { syntax: "syntax", from: "x", body: { text: "x", voice: "x" } },
            type: "otp_verify",
            disabled: true,
        };
        server
            .mockEndpoint()
            .patch("/branding/phone/templates/id/reset")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.branding.phone.templates.reset("id", {
            key: "value",
        });
        expect(response).toEqual({
            id: "x",
            channel: "channel",
            customizable: true,
            tenant: "x",
            content: {
                syntax: "syntax",
                from: "x",
                body: {
                    text: "x",
                    voice: "x",
                },
            },
            type: "otp_verify",
            disabled: true,
        });
    });

    test("reset (cdfab77c)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { key: "value" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/branding/phone/templates/id/reset")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.phone.templates.reset("id", {
                key: "value",
            });
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("reset (d04d8304)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { key: "value" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/branding/phone/templates/id/reset")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.phone.templates.reset("id", {
                key: "value",
            });
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("reset (9e11d2e8)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { key: "value" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/branding/phone/templates/id/reset")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.phone.templates.reset("id", {
                key: "value",
            });
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("reset (46b71c34)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { key: "value" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/branding/phone/templates/id/reset")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.phone.templates.reset("id", {
                key: "value",
            });
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });

    test("test", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { to: "to" };
        const rawResponseBody = { message: "message" };
        server
            .mockEndpoint()
            .post("/branding/phone/templates/id/try")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.branding.phone.templates.test("id", {
            to: "to",
        });
        expect(response).toEqual({
            message: "message",
        });
    });
});
