/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../Client.js";

describe("Templates", () => {
    test("getUniversalLogin", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { body: "body" };
        server
            .mockEndpoint()
            .get("/branding/templates/universal-login")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.branding.templates.getUniversalLogin();
        expect(response).toEqual({
            body: "body",
        });
    });

    test("updateUniversalLogin", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = "string";

        server
            .mockEndpoint()
            .put("/branding/templates/universal-login")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.branding.templates.updateUniversalLogin("string");
        expect(response).toEqual(undefined);
    });

    test("deleteUniversalLogin", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/branding/templates/universal-login").respondWith().statusCode(200).build();

        const response = await client.branding.templates.deleteUniversalLogin();
        expect(response).toEqual(undefined);
    });
});
