// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ManagementClient } from "../../../Client";
import * as Management from "../../../api/index";

describe("Templates", () => {
    test("getUniversalLogin (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { body: "body" };
        server
            .mockEndpoint()
            .get("/branding/templates/universal-login")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.branding.templates.getUniversalLogin();
        expect(response).toEqual({
            body: "body",
        });
    });

    test("getUniversalLogin (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/branding/templates/universal-login")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.templates.getUniversalLogin();
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("getUniversalLogin (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/branding/templates/universal-login")
            .respondWith()
            .statusCode(402)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.templates.getUniversalLogin();
        }).rejects.toThrow(Management.PaymentRequiredError);
    });

    test("getUniversalLogin (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/branding/templates/universal-login")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.templates.getUniversalLogin();
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("getUniversalLogin (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/branding/templates/universal-login")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.templates.getUniversalLogin();
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("getUniversalLogin (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/branding/templates/universal-login")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.templates.getUniversalLogin();
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("updateUniversalLogin (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = "string";

        server
            .mockEndpoint()
            .put("/branding/templates/universal-login")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.branding.templates.updateUniversalLogin("string");
        expect(response).toEqual(undefined);
    });

    test("updateUniversalLogin (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = "string";
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/branding/templates/universal-login")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.templates.updateUniversalLogin("string");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("updateUniversalLogin (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = "string";
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/branding/templates/universal-login")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.templates.updateUniversalLogin("string");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("updateUniversalLogin (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = "string";
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/branding/templates/universal-login")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(402)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.templates.updateUniversalLogin("string");
        }).rejects.toThrow(Management.PaymentRequiredError);
    });

    test("updateUniversalLogin (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = "string";
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/branding/templates/universal-login")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.templates.updateUniversalLogin("string");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("updateUniversalLogin (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = "string";
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/branding/templates/universal-login")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(409)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.templates.updateUniversalLogin("string");
        }).rejects.toThrow(Management.ConflictError);
    });

    test("updateUniversalLogin (7)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = "string";
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/branding/templates/universal-login")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.templates.updateUniversalLogin("string");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("deleteUniversalLogin (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/branding/templates/universal-login").respondWith().statusCode(200).build();

        const response = await client.branding.templates.deleteUniversalLogin();
        expect(response).toEqual(undefined);
    });

    test("deleteUniversalLogin (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/branding/templates/universal-login")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.templates.deleteUniversalLogin();
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("deleteUniversalLogin (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/branding/templates/universal-login")
            .respondWith()
            .statusCode(402)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.templates.deleteUniversalLogin();
        }).rejects.toThrow(Management.PaymentRequiredError);
    });

    test("deleteUniversalLogin (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/branding/templates/universal-login")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.templates.deleteUniversalLogin();
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("deleteUniversalLogin (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/branding/templates/universal-login")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.templates.deleteUniversalLogin();
        }).rejects.toThrow(Management.TooManyRequestsError);
    });
});
