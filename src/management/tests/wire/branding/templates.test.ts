/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../Client.js";
import * as Management from "../../../api/index.js";

describe("Templates", () => {
    test("getUniversalLogin (15e1b15e)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { body: "body" };
        server
            .mockEndpoint()
            .get("/branding/templates/universal-login")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.branding.templates.getUniversalLogin();
        expect(response).toEqual({
            body: "body",
        });
    });

    test("getUniversalLogin (1e230aeb)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/branding/templates/universal-login")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.templates.getUniversalLogin();
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("getUniversalLogin (67cb641b)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/branding/templates/universal-login")
            .respondWith()
            .statusCode(402)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.templates.getUniversalLogin();
        }).rejects.toThrow(
            new Management.PaymentRequiredError({
                key: "value",
            }),
        );
    });

    test("getUniversalLogin (af841397)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/branding/templates/universal-login")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.templates.getUniversalLogin();
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("getUniversalLogin (c29c5807)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/branding/templates/universal-login")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.templates.getUniversalLogin();
        }).rejects.toThrow(
            new Management.NotFoundError({
                key: "value",
            }),
        );
    });

    test("getUniversalLogin (ee1e23bf)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/branding/templates/universal-login")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.templates.getUniversalLogin();
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });

    test("updateUniversalLogin (557afd8d)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = "string";

        server
            .mockEndpoint()
            .put("/branding/templates/universal-login")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.branding.templates.updateUniversalLogin("string");
        expect(response).toEqual(undefined);
    });

    test("updateUniversalLogin (57675741)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = "string";
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/branding/templates/universal-login")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.templates.updateUniversalLogin("string");
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("updateUniversalLogin (f4b7c941)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = "string";
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/branding/templates/universal-login")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.templates.updateUniversalLogin("string");
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("updateUniversalLogin (c4ae8811)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = "string";
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/branding/templates/universal-login")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(402)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.templates.updateUniversalLogin("string");
        }).rejects.toThrow(
            new Management.PaymentRequiredError({
                key: "value",
            }),
        );
    });

    test("updateUniversalLogin (6382ce7d)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = "string";
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/branding/templates/universal-login")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.templates.updateUniversalLogin("string");
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("updateUniversalLogin (b4d69145)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = "string";
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/branding/templates/universal-login")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(409)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.templates.updateUniversalLogin("string");
        }).rejects.toThrow(
            new Management.ConflictError({
                key: "value",
            }),
        );
    });

    test("updateUniversalLogin (a6434165)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = "string";
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/branding/templates/universal-login")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.templates.updateUniversalLogin("string");
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });

    test("deleteUniversalLogin (5465b825)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/branding/templates/universal-login").respondWith().statusCode(200).build();

        const response = await client.branding.templates.deleteUniversalLogin();
        expect(response).toEqual(undefined);
    });

    test("deleteUniversalLogin (1e230aeb)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/branding/templates/universal-login")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.templates.deleteUniversalLogin();
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("deleteUniversalLogin (67cb641b)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/branding/templates/universal-login")
            .respondWith()
            .statusCode(402)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.templates.deleteUniversalLogin();
        }).rejects.toThrow(
            new Management.PaymentRequiredError({
                key: "value",
            }),
        );
    });

    test("deleteUniversalLogin (af841397)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/branding/templates/universal-login")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.templates.deleteUniversalLogin();
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("deleteUniversalLogin (ee1e23bf)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/branding/templates/universal-login")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.branding.templates.deleteUniversalLogin();
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });
});
