// This file was auto-generated by Fern from our API Definition.

import * as Management from "../../../api/index";
import { ManagementClient } from "../../../Client";
import { mockServerPool } from "../../mock-server/MockServerPool";

describe("Captcha", () => {
    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { active_provider_id: "active_provider_id" };
        server
            .mockEndpoint()
            .get("/attack-protection/captcha")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.attackProtection.captcha.get();
        expect(response).toEqual({
            active_provider_id: "active_provider_id",
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/attack-protection/captcha")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.attackProtection.captcha.get();
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/attack-protection/captcha")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.attackProtection.captcha.get();
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/attack-protection/captcha")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.attackProtection.captcha.get();
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("get (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/attack-protection/captcha")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.attackProtection.captcha.get();
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("update (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            policy: "high_risk",
            passwordless_policy: "high_risk",
            password_reset_policy: "high_risk",
            selected: "auth0",
            providers: {
                auth0_v2: { failOpen: true },
                recaptcha_v2: { siteKey: "siteKey", secret: "secret" },
                recaptcha_enterprise: { siteKey: "siteKey", apiKey: "apiKey", projectId: "projectId" },
                hcaptcha: { siteKey: "siteKey", secret: "secret" },
                friendly_captcha: { siteKey: "siteKey", secret: "secret" },
                arkose: {
                    siteKey: "siteKey",
                    secret: "secret",
                    clientSubdomain: "clientSubdomain",
                    verifySubdomain: "verifySubdomain",
                    failOpen: true,
                },
            },
            allowlist: ["allowlist"],
        };
        server
            .mockEndpoint()
            .patch("/attack-protection/captcha")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.attackProtection.captcha.update();
        expect(response).toEqual({
            policy: "high_risk",
            passwordless_policy: "high_risk",
            password_reset_policy: "high_risk",
            selected: "auth0",
            providers: {
                auth0_v2: {
                    failOpen: true,
                },
                recaptcha_v2: {
                    siteKey: "siteKey",
                    secret: "secret",
                },
                recaptcha_enterprise: {
                    siteKey: "siteKey",
                    apiKey: "apiKey",
                    projectId: "projectId",
                },
                hcaptcha: {
                    siteKey: "siteKey",
                    secret: "secret",
                },
                friendly_captcha: {
                    siteKey: "siteKey",
                    secret: "secret",
                },
                arkose: {
                    siteKey: "siteKey",
                    secret: "secret",
                    clientSubdomain: "clientSubdomain",
                    verifySubdomain: "verifySubdomain",
                    failOpen: true,
                },
            },
            allowlist: ["allowlist"],
        });
    });

    test("update (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/attack-protection/captcha")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.attackProtection.captcha.update();
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("update (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/attack-protection/captcha")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.attackProtection.captcha.update();
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("update (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/attack-protection/captcha")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.attackProtection.captcha.update();
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("update (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/attack-protection/captcha")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.attackProtection.captcha.update();
        }).rejects.toThrow(Management.TooManyRequestsError);
    });
});
