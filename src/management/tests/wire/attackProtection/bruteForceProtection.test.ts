/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../Client.js";

describe("BruteForceProtection", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            enabled: true,
            shields: ["block"],
            allowlist: ["allowlist"],
            mode: "count_per_identifier_and_ip",
            max_attempts: 1,
        };
        server
            .mockEndpoint()
            .get("/attack-protection/brute-force-protection")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.attackProtection.bruteForceProtection.get();
        expect(response).toEqual({
            enabled: true,
            shields: ["block"],
            allowlist: ["allowlist"],
            mode: "count_per_identifier_and_ip",
            max_attempts: 1,
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            enabled: true,
            shields: ["block"],
            allowlist: ["allowlist"],
            mode: "count_per_identifier_and_ip",
            max_attempts: 1,
        };
        server
            .mockEndpoint()
            .patch("/attack-protection/brute-force-protection")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.attackProtection.bruteForceProtection.update();
        expect(response).toEqual({
            enabled: true,
            shields: ["block"],
            allowlist: ["allowlist"],
            mode: "count_per_identifier_and_ip",
            max_attempts: 1,
        });
    });
});
