/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../Client.js";
import * as Management from "../../../api/index.js";

describe("BreachedPasswordDetection", () => {
    test("get (6e0fd73b)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            enabled: true,
            shields: ["block"],
            admin_notification_frequency: ["immediately"],
            method: "standard",
            stage: { "pre-user-registration": { shields: ["block"] }, "pre-change-password": { shields: ["block"] } },
        };
        server
            .mockEndpoint()
            .get("/attack-protection/breached-password-detection")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.attackProtection.breachedPasswordDetection.get();
        expect(response).toEqual({
            enabled: true,
            shields: ["block"],
            admin_notification_frequency: ["immediately"],
            method: "standard",
            stage: {
                "pre-user-registration": {
                    shields: ["block"],
                },
                "pre-change-password": {
                    shields: ["block"],
                },
            },
        });
    });

    test("get (1e230aeb)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/attack-protection/breached-password-detection")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.attackProtection.breachedPasswordDetection.get();
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("get (af841397)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/attack-protection/breached-password-detection")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.attackProtection.breachedPasswordDetection.get();
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("get (ee1e23bf)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/attack-protection/breached-password-detection")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.attackProtection.breachedPasswordDetection.get();
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });

    test("update (a8a94978)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            enabled: true,
            shields: ["block"],
            admin_notification_frequency: ["immediately"],
            method: "standard",
            stage: { "pre-user-registration": { shields: ["block"] }, "pre-change-password": { shields: ["block"] } },
        };
        server
            .mockEndpoint()
            .patch("/attack-protection/breached-password-detection")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.attackProtection.breachedPasswordDetection.update();
        expect(response).toEqual({
            enabled: true,
            shields: ["block"],
            admin_notification_frequency: ["immediately"],
            method: "standard",
            stage: {
                "pre-user-registration": {
                    shields: ["block"],
                },
                "pre-change-password": {
                    shields: ["block"],
                },
            },
        });
    });

    test("update (e9a21948)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            enabled: undefined,
            shields: undefined,
            admin_notification_frequency: undefined,
            method: undefined,
            stage: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/attack-protection/breached-password-detection")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.attackProtection.breachedPasswordDetection.update({
                enabled: undefined,
                shields: undefined,
                admin_notification_frequency: undefined,
                method: undefined,
                stage: undefined,
            });
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("update (417344b0)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            enabled: undefined,
            shields: undefined,
            admin_notification_frequency: undefined,
            method: undefined,
            stage: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/attack-protection/breached-password-detection")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.attackProtection.breachedPasswordDetection.update({
                enabled: undefined,
                shields: undefined,
                admin_notification_frequency: undefined,
                method: undefined,
                stage: undefined,
            });
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("update (5e218094)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            enabled: undefined,
            shields: undefined,
            admin_notification_frequency: undefined,
            method: undefined,
            stage: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/attack-protection/breached-password-detection")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.attackProtection.breachedPasswordDetection.update({
                enabled: undefined,
                shields: undefined,
                admin_notification_frequency: undefined,
                method: undefined,
                stage: undefined,
            });
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("update (7d3b0da0)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            enabled: undefined,
            shields: undefined,
            admin_notification_frequency: undefined,
            method: undefined,
            stage: undefined,
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/attack-protection/breached-password-detection")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.attackProtection.breachedPasswordDetection.update({
                enabled: undefined,
                shields: undefined,
                admin_notification_frequency: undefined,
                method: undefined,
                stage: undefined,
            });
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });
});
