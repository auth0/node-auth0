/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../Client.js";

describe("BreachedPasswordDetection", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            enabled: true,
            shields: ["block"],
            admin_notification_frequency: ["immediately"],
            method: "standard",
            stage: { "pre-user-registration": { shields: ["block"] }, "pre-change-password": { shields: ["block"] } },
        };
        server
            .mockEndpoint()
            .get("/attack-protection/breached-password-detection")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.attackProtection.breachedPasswordDetection.get();
        expect(response).toEqual({
            enabled: true,
            shields: ["block"],
            admin_notification_frequency: ["immediately"],
            method: "standard",
            stage: {
                "pre-user-registration": {
                    shields: ["block"],
                },
                "pre-change-password": {
                    shields: ["block"],
                },
            },
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            enabled: true,
            shields: ["block"],
            admin_notification_frequency: ["immediately"],
            method: "standard",
            stage: { "pre-user-registration": { shields: ["block"] }, "pre-change-password": { shields: ["block"] } },
        };
        server
            .mockEndpoint()
            .patch("/attack-protection/breached-password-detection")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.attackProtection.breachedPasswordDetection.update();
        expect(response).toEqual({
            enabled: true,
            shields: ["block"],
            admin_notification_frequency: ["immediately"],
            method: "standard",
            stage: {
                "pre-user-registration": {
                    shields: ["block"],
                },
                "pre-change-password": {
                    shields: ["block"],
                },
            },
        });
    });
});
