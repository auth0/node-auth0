/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { ManagementClient } from "../../Client.js";

describe("Logs", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            date: "date",
            type: "type",
            description: "description",
            connection: "connection",
            connection_id: "connection_id",
            client_id: "client_id",
            client_name: "client_name",
            ip: "ip",
            hostname: "hostname",
            user_id: "user_id",
            user_name: "user_name",
            audience: "audience",
            scope: "scope",
            strategy: "strategy",
            strategy_type: "strategy_type",
            log_id: "log_id",
            isMobile: true,
            details: { key: "value" },
            user_agent: "user_agent",
            location_info: {
                country_code: "country_code",
                country_code3: "country_code3",
                country_name: "country_name",
                city_name: "city_name",
                latitude: "latitude",
                longitude: "longitude",
                time_zone: "time_zone",
                continent_code: "continent_code",
            },
        };
        server.mockEndpoint().get("/logs/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.logs.get("id");
        expect(response).toEqual({
            date: "date",
            type: "type",
            description: "description",
            connection: "connection",
            connection_id: "connection_id",
            client_id: "client_id",
            client_name: "client_name",
            ip: "ip",
            hostname: "hostname",
            user_id: "user_id",
            user_name: "user_name",
            audience: "audience",
            scope: "scope",
            strategy: "strategy",
            strategy_type: "strategy_type",
            log_id: "log_id",
            isMobile: true,
            details: {
                key: "value",
            },
            user_agent: "user_agent",
            location_info: {
                country_code: "country_code",
                country_code3: "country_code3",
                country_name: "country_name",
                city_name: "city_name",
                latitude: "latitude",
                longitude: "longitude",
                time_zone: "time_zone",
                continent_code: "continent_code",
            },
        });
    });
});
