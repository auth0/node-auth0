/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { ManagementClient } from "../../Client.js";

describe("UserBlocks", () => {
    test("listByIdentifier", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { blocked_for: [{ identifier: "identifier", ip: "ip", connection: "connection" }] };
        server.mockEndpoint().get("/user-blocks").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.userBlocks.listByIdentifier({
            identifier: "identifier",
        });
        expect(response).toEqual({
            blocked_for: [
                {
                    identifier: "identifier",
                    ip: "ip",
                    connection: "connection",
                },
            ],
        });
    });

    test("deleteByIdentifier", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/user-blocks").respondWith().statusCode(200).build();

        const response = await client.userBlocks.deleteByIdentifier({
            identifier: "identifier",
        });
        expect(response).toEqual(undefined);
    });

    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { blocked_for: [{ identifier: "identifier", ip: "ip", connection: "connection" }] };
        server.mockEndpoint().get("/user-blocks/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.userBlocks.list("id");
        expect(response).toEqual({
            blocked_for: [
                {
                    identifier: "identifier",
                    ip: "ip",
                    connection: "connection",
                },
            ],
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/user-blocks/id").respondWith().statusCode(200).build();

        const response = await client.userBlocks.delete("id");
        expect(response).toEqual(undefined);
    });
});
