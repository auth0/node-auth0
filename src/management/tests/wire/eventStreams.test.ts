// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../mock-server/MockServerPool";
import { ManagementClient } from "../../Client";
import * as Management from "../../api/index";

describe("EventStreams", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                id: "id",
                name: "name",
                subscriptions: [{}],
                destination: {
                    type: "webhook",
                    configuration: {
                        webhook_endpoint: "webhook_endpoint",
                        webhook_authorization: { method: "basic", username: "username" },
                    },
                },
                status: "enabled",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
            },
        ];
        server.mockEndpoint().get("/event-streams").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.eventStreams.list({
            from: "from",
            take: 1,
        });
        expect(response).toEqual([
            {
                id: "id",
                name: "name",
                subscriptions: [{}],
                destination: {
                    type: "webhook",
                    configuration: {
                        webhook_endpoint: "webhook_endpoint",
                        webhook_authorization: {
                            method: "basic",
                            username: "username",
                        },
                    },
                },
                status: "enabled",
                created_at: "2024-01-15T09:30:00Z",
                updated_at: "2024-01-15T09:30:00Z",
            },
        ]);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/event-streams").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.eventStreams.list();
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/event-streams").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.eventStreams.list();
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/event-streams").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.eventStreams.list();
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("list (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/event-streams").respondWith().statusCode(429).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.eventStreams.list();
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            destination: {
                type: "webhook",
                configuration: {
                    webhook_endpoint: "webhook_endpoint",
                    webhook_authorization: { method: "basic", username: "username" },
                },
            },
        };
        const rawResponseBody = {
            id: "id",
            name: "name",
            subscriptions: [{ event_type: "event_type" }],
            destination: {
                type: "webhook",
                configuration: {
                    webhook_endpoint: "webhook_endpoint",
                    webhook_authorization: { method: "basic", username: "username" },
                },
            },
            status: "enabled",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .post("/event-streams")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.eventStreams.create({
            destination: {
                type: "webhook",
                configuration: {
                    webhook_endpoint: "webhook_endpoint",
                    webhook_authorization: {
                        method: "basic",
                        username: "username",
                    },
                },
            },
        });
        expect(response).toEqual({
            id: "id",
            name: "name",
            subscriptions: [
                {
                    event_type: "event_type",
                },
            ],
            destination: {
                type: "webhook",
                configuration: {
                    webhook_endpoint: "webhook_endpoint",
                    webhook_authorization: {
                        method: "basic",
                        username: "username",
                    },
                },
            },
            status: "enabled",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            destination: {
                type: "webhook",
                configuration: {
                    webhook_endpoint: "webhook_endpoint",
                    webhook_authorization: { method: "basic", username: "username" },
                },
            },
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/event-streams")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.eventStreams.create({
                destination: {
                    type: "webhook",
                    configuration: {
                        webhook_endpoint: "webhook_endpoint",
                        webhook_authorization: {
                            method: "basic",
                            username: "username",
                        },
                    },
                },
            });
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("create (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            destination: {
                type: "webhook",
                configuration: {
                    webhook_endpoint: "webhook_endpoint",
                    webhook_authorization: { method: "basic", username: "username" },
                },
            },
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/event-streams")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.eventStreams.create({
                destination: {
                    type: "webhook",
                    configuration: {
                        webhook_endpoint: "webhook_endpoint",
                        webhook_authorization: {
                            method: "basic",
                            username: "username",
                        },
                    },
                },
            });
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("create (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            destination: {
                type: "webhook",
                configuration: {
                    webhook_endpoint: "webhook_endpoint",
                    webhook_authorization: { method: "basic", username: "username" },
                },
            },
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/event-streams")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.eventStreams.create({
                destination: {
                    type: "webhook",
                    configuration: {
                        webhook_endpoint: "webhook_endpoint",
                        webhook_authorization: {
                            method: "basic",
                            username: "username",
                        },
                    },
                },
            });
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("create (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            destination: {
                type: "webhook",
                configuration: {
                    webhook_endpoint: "webhook_endpoint",
                    webhook_authorization: { method: "basic", username: "username" },
                },
            },
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/event-streams")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(409)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.eventStreams.create({
                destination: {
                    type: "webhook",
                    configuration: {
                        webhook_endpoint: "webhook_endpoint",
                        webhook_authorization: {
                            method: "basic",
                            username: "username",
                        },
                    },
                },
            });
        }).rejects.toThrow(Management.ConflictError);
    });

    test("create (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            destination: {
                type: "webhook",
                configuration: {
                    webhook_endpoint: "webhook_endpoint",
                    webhook_authorization: { method: "basic", username: "username" },
                },
            },
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/event-streams")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.eventStreams.create({
                destination: {
                    type: "webhook",
                    configuration: {
                        webhook_endpoint: "webhook_endpoint",
                        webhook_authorization: {
                            method: "basic",
                            username: "username",
                        },
                    },
                },
            });
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            name: "name",
            subscriptions: [{ event_type: "event_type" }],
            destination: {
                type: "webhook",
                configuration: {
                    webhook_endpoint: "webhook_endpoint",
                    webhook_authorization: { method: "basic", username: "username" },
                },
            },
            status: "enabled",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
        };
        server.mockEndpoint().get("/event-streams/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.eventStreams.get("id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            subscriptions: [
                {
                    event_type: "event_type",
                },
            ],
            destination: {
                type: "webhook",
                configuration: {
                    webhook_endpoint: "webhook_endpoint",
                    webhook_authorization: {
                        method: "basic",
                        username: "username",
                    },
                },
            },
            status: "enabled",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/event-streams/id").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.eventStreams.get("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/event-streams/id").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.eventStreams.get("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/event-streams/id").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.eventStreams.get("id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("get (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/event-streams/id").respondWith().statusCode(429).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.eventStreams.get("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/event-streams/id").respondWith().statusCode(200).build();

        const response = await client.eventStreams.delete("id");
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/event-streams/id")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.eventStreams.delete("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/event-streams/id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.eventStreams.delete("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("delete (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/event-streams/id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.eventStreams.delete("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("delete (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/event-streams/id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.eventStreams.delete("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("update (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            name: "name",
            subscriptions: [{ event_type: "event_type" }],
            destination: {
                type: "webhook",
                configuration: {
                    webhook_endpoint: "webhook_endpoint",
                    webhook_authorization: { method: "basic", username: "username" },
                },
            },
            status: "enabled",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .patch("/event-streams/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.eventStreams.update("id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            subscriptions: [
                {
                    event_type: "event_type",
                },
            ],
            destination: {
                type: "webhook",
                configuration: {
                    webhook_endpoint: "webhook_endpoint",
                    webhook_authorization: {
                        method: "basic",
                        username: "username",
                    },
                },
            },
            status: "enabled",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
        });
    });

    test("update (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/event-streams/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.eventStreams.update("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("update (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/event-streams/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.eventStreams.update("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("update (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/event-streams/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.eventStreams.update("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("update (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/event-streams/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.eventStreams.update("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("test (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { event_type: "user.created" };
        const rawResponseBody = {
            id: "id",
            event_stream_id: "event_stream_id",
            status: "failed",
            event_type: "user.created",
            attempts: [{ status: "failed", timestamp: "2024-01-15T09:30:00Z", error_message: "error_message" }],
            event: {
                id: "id",
                source: "source",
                specversion: "specversion",
                type: "type",
                time: "2024-01-15T09:30:00Z",
                data: "data",
            },
        };
        server
            .mockEndpoint()
            .post("/event-streams/id/test")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.eventStreams.test("id", {
            event_type: "user.created",
        });
        expect(response).toEqual({
            id: "id",
            event_stream_id: "event_stream_id",
            status: "failed",
            event_type: "user.created",
            attempts: [
                {
                    status: "failed",
                    timestamp: "2024-01-15T09:30:00Z",
                    error_message: "error_message",
                },
            ],
            event: {
                id: "id",
                source: "source",
                specversion: "specversion",
                type: "type",
                time: "2024-01-15T09:30:00Z",
                data: "data",
            },
        });
    });

    test("test (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { event_type: "user.created" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/event-streams/id/test")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.eventStreams.test("id", {
                event_type: "user.created",
            });
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("test (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { event_type: "user.created" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/event-streams/id/test")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.eventStreams.test("id", {
                event_type: "user.created",
            });
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("test (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { event_type: "user.created" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/event-streams/id/test")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.eventStreams.test("id", {
                event_type: "user.created",
            });
        }).rejects.toThrow(Management.TooManyRequestsError);
    });
});
