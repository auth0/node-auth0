/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { ManagementClient } from "../../Client.js";

describe("Flows", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            start: 1.1,
            limit: 1.1,
            total: 1.1,
            flows: [
                {
                    id: "id",
                    name: "name",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    executed_at: "executed_at",
                },
            ],
        };
        server.mockEndpoint().get("/flows").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const expected = {
            start: 1.1,
            limit: 1.1,
            total: 1.1,
            flows: [
                {
                    id: "id",
                    name: "name",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    executed_at: "executed_at",
                },
            ],
        };
        const page = await client.flows.list();
        expect(expected.flows).toEqual(page.data);

        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.flows).toEqual(nextPage.data);
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name" };
        const rawResponseBody = {
            id: "id",
            name: "name",
            actions: [
                {
                    id: "id",
                    alias: "alias",
                    type: "ACTIVECAMPAIGN",
                    action: "LIST_CONTACTS",
                    allow_failure: true,
                    mask_output: true,
                    params: { connection_id: "connection_id", email: "email" },
                },
            ],
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            executed_at: "executed_at",
        };
        server
            .mockEndpoint()
            .post("/flows")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.flows.create({
            name: "name",
        });
        expect(response).toEqual({
            id: "id",
            name: "name",
            actions: [
                {
                    id: "id",
                    alias: "alias",
                    type: "ACTIVECAMPAIGN",
                    action: "LIST_CONTACTS",
                    allow_failure: true,
                    mask_output: true,
                    params: {
                        connection_id: "connection_id",
                        email: "email",
                    },
                },
            ],
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            executed_at: "executed_at",
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            name: "name",
            actions: [
                {
                    id: "id",
                    alias: "alias",
                    type: "ACTIVECAMPAIGN",
                    action: "LIST_CONTACTS",
                    allow_failure: true,
                    mask_output: true,
                    params: { connection_id: "connection_id", email: "email" },
                },
            ],
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            executed_at: "executed_at",
        };
        server.mockEndpoint().get("/flows/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.flows.get("id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            actions: [
                {
                    id: "id",
                    alias: "alias",
                    type: "ACTIVECAMPAIGN",
                    action: "LIST_CONTACTS",
                    allow_failure: true,
                    mask_output: true,
                    params: {
                        connection_id: "connection_id",
                        email: "email",
                    },
                },
            ],
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            executed_at: "executed_at",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/flows/id").respondWith().statusCode(200).build();

        const response = await client.flows.delete("id");
        expect(response).toEqual(undefined);
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            name: "name",
            actions: [
                {
                    id: "id",
                    alias: "alias",
                    type: "ACTIVECAMPAIGN",
                    action: "LIST_CONTACTS",
                    allow_failure: true,
                    mask_output: true,
                    params: { connection_id: "connection_id", email: "email" },
                },
            ],
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            executed_at: "executed_at",
        };
        server
            .mockEndpoint()
            .patch("/flows/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.flows.update("id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            actions: [
                {
                    id: "id",
                    alias: "alias",
                    type: "ACTIVECAMPAIGN",
                    action: "LIST_CONTACTS",
                    allow_failure: true,
                    mask_output: true,
                    params: {
                        connection_id: "connection_id",
                        email: "email",
                    },
                },
            ],
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            executed_at: "executed_at",
        });
    });
});
