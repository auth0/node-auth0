/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { ManagementClient } from "../../Client.js";

describe("CustomSigningKeys", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            keys: [
                {
                    kty: "EC",
                    kid: "kid",
                    use: "sig",
                    key_ops: ["verify"],
                    alg: "RS256",
                    n: "n",
                    e: "e",
                    crv: "P-256",
                    x: "x",
                    y: "y",
                    x5u: "x5u",
                    x5c: ["x5c"],
                    x5t: "x5t",
                    "x5t#S256": "x5t#S256",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/keys/custom-signing")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customSigningKeys.get();
        expect(response).toEqual({
            keys: [
                {
                    kty: "EC",
                    kid: "kid",
                    use: "sig",
                    key_ops: ["verify"],
                    alg: "RS256",
                    n: "n",
                    e: "e",
                    crv: "P-256",
                    x: "x",
                    y: "y",
                    x5u: "x5u",
                    x5c: ["x5c"],
                    x5t: "x5t",
                    "x5t#S256": "x5t#S256",
                },
            ],
        });
    });

    test("set", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { keys: [{ kty: "EC" }] };
        const rawResponseBody = {
            keys: [
                {
                    kty: "EC",
                    kid: "kid",
                    use: "sig",
                    key_ops: ["verify"],
                    alg: "RS256",
                    n: "n",
                    e: "e",
                    crv: "P-256",
                    x: "x",
                    y: "y",
                    x5u: "x5u",
                    x5c: ["x5c"],
                    x5t: "x5t",
                    "x5t#S256": "x5t#S256",
                },
            ],
        };
        server
            .mockEndpoint()
            .put("/keys/custom-signing")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customSigningKeys.set({
            keys: [
                {
                    kty: "EC",
                },
            ],
        });
        expect(response).toEqual({
            keys: [
                {
                    kty: "EC",
                    kid: "kid",
                    use: "sig",
                    key_ops: ["verify"],
                    alg: "RS256",
                    n: "n",
                    e: "e",
                    crv: "P-256",
                    x: "x",
                    y: "y",
                    x5u: "x5u",
                    x5c: ["x5c"],
                    x5t: "x5t",
                    "x5t#S256": "x5t#S256",
                },
            ],
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/keys/custom-signing").respondWith().statusCode(200).build();

        const response = await client.customSigningKeys.delete();
        expect(response).toEqual(undefined);
    });
});
