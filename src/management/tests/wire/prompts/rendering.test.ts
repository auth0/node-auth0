// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ManagementClient } from "../../../Client";
import * as Management from "../../../api/index";

describe("Rendering", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            configs: [
                {
                    rendering_mode: "advanced",
                    context_configuration: ["context_configuration"],
                    default_head_tags_disabled: true,
                    head_tags: [{}],
                    use_page_template: true,
                },
            ],
            start: 1.1,
            limit: 1.1,
            total: 1.1,
        };
        server.mockEndpoint().get("/prompts/rendering").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const expected = {
            configs: [
                {
                    rendering_mode: "advanced",
                    context_configuration: ["context_configuration"],
                    default_head_tags_disabled: true,
                    head_tags: [{}],
                    use_page_template: true,
                },
            ],
            start: 1.1,
            limit: 1.1,
            total: 1.1,
        };
        const page = await client.prompts.rendering.list({
            fields: "fields",
            include_fields: true,
            page: 1,
            per_page: 1,
            include_totals: true,
            prompt: "prompt",
            screen: "screen",
            rendering_mode: "advanced",
        });

        expect(expected.configs).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.configs).toEqual(nextPage.data);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/prompts/rendering").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.prompts.rendering.list();
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/prompts/rendering").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.prompts.rendering.list();
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/prompts/rendering").respondWith().statusCode(402).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.prompts.rendering.list();
        }).rejects.toThrow(Management.PaymentRequiredError);
    });

    test("list (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/prompts/rendering").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.prompts.rendering.list();
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("list (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/prompts/rendering").respondWith().statusCode(429).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.prompts.rendering.list();
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("bulkUpdate (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            configs: [{ prompt: "login", screen: "login", rendering_mode: "advanced", head_tags: [{}] }],
        };
        const rawResponseBody = {
            configs: [
                {
                    prompt: "login",
                    screen: "login",
                    rendering_mode: "advanced",
                    context_configuration: ["context_configuration"],
                    default_head_tags_disabled: true,
                    head_tags: [{}],
                    use_page_template: true,
                },
            ],
        };
        server
            .mockEndpoint()
            .patch("/prompts/rendering")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.prompts.rendering.bulkUpdate({
            configs: [
                {
                    prompt: "login",
                    screen: "login",
                    rendering_mode: "advanced",
                    head_tags: [{}],
                },
            ],
        });
        expect(response).toEqual({
            configs: [
                {
                    prompt: "login",
                    screen: "login",
                    rendering_mode: "advanced",
                    context_configuration: ["context_configuration"],
                    default_head_tags_disabled: true,
                    head_tags: [{}],
                    use_page_template: true,
                },
            ],
        });
    });

    test("bulkUpdate (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            configs: [
                { prompt: "login", screen: "login", rendering_mode: "advanced", head_tags: [{}, {}] },
                { prompt: "login", screen: "login", rendering_mode: "advanced", head_tags: [{}, {}] },
            ],
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/prompts/rendering")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.prompts.rendering.bulkUpdate({
                configs: [
                    {
                        prompt: "login",
                        screen: "login",
                        rendering_mode: "advanced",
                        head_tags: [{}, {}],
                    },
                    {
                        prompt: "login",
                        screen: "login",
                        rendering_mode: "advanced",
                        head_tags: [{}, {}],
                    },
                ],
            });
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("bulkUpdate (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            configs: [
                { prompt: "login", screen: "login", rendering_mode: "advanced", head_tags: [{}, {}] },
                { prompt: "login", screen: "login", rendering_mode: "advanced", head_tags: [{}, {}] },
            ],
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/prompts/rendering")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.prompts.rendering.bulkUpdate({
                configs: [
                    {
                        prompt: "login",
                        screen: "login",
                        rendering_mode: "advanced",
                        head_tags: [{}, {}],
                    },
                    {
                        prompt: "login",
                        screen: "login",
                        rendering_mode: "advanced",
                        head_tags: [{}, {}],
                    },
                ],
            });
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("bulkUpdate (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            configs: [
                { prompt: "login", screen: "login", rendering_mode: "advanced", head_tags: [{}, {}] },
                { prompt: "login", screen: "login", rendering_mode: "advanced", head_tags: [{}, {}] },
            ],
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/prompts/rendering")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(402)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.prompts.rendering.bulkUpdate({
                configs: [
                    {
                        prompt: "login",
                        screen: "login",
                        rendering_mode: "advanced",
                        head_tags: [{}, {}],
                    },
                    {
                        prompt: "login",
                        screen: "login",
                        rendering_mode: "advanced",
                        head_tags: [{}, {}],
                    },
                ],
            });
        }).rejects.toThrow(Management.PaymentRequiredError);
    });

    test("bulkUpdate (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            configs: [
                { prompt: "login", screen: "login", rendering_mode: "advanced", head_tags: [{}, {}] },
                { prompt: "login", screen: "login", rendering_mode: "advanced", head_tags: [{}, {}] },
            ],
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/prompts/rendering")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.prompts.rendering.bulkUpdate({
                configs: [
                    {
                        prompt: "login",
                        screen: "login",
                        rendering_mode: "advanced",
                        head_tags: [{}, {}],
                    },
                    {
                        prompt: "login",
                        screen: "login",
                        rendering_mode: "advanced",
                        head_tags: [{}, {}],
                    },
                ],
            });
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("bulkUpdate (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            configs: [
                { prompt: "login", screen: "login", rendering_mode: "advanced", head_tags: [{}, {}] },
                { prompt: "login", screen: "login", rendering_mode: "advanced", head_tags: [{}, {}] },
            ],
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/prompts/rendering")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.prompts.rendering.bulkUpdate({
                configs: [
                    {
                        prompt: "login",
                        screen: "login",
                        rendering_mode: "advanced",
                        head_tags: [{}, {}],
                    },
                    {
                        prompt: "login",
                        screen: "login",
                        rendering_mode: "advanced",
                        head_tags: [{}, {}],
                    },
                ],
            });
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            tenant: "tenant",
            prompt: "prompt",
            screen: "screen",
            rendering_mode: "advanced",
            context_configuration: ["context_configuration"],
            default_head_tags_disabled: true,
            head_tags: [{ tag: "tag", content: "content" }],
            filters: {
                match_type: "includes_any",
                clients: [{ id: "id" }],
                organizations: [{ id: "id" }],
                domains: [{ id: "id" }],
            },
            use_page_template: true,
        };
        server
            .mockEndpoint()
            .get("/prompts/login/screen/login/rendering")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.prompts.rendering.get("login", "login");
        expect(response).toEqual({
            tenant: "tenant",
            prompt: "prompt",
            screen: "screen",
            rendering_mode: "advanced",
            context_configuration: ["context_configuration"],
            default_head_tags_disabled: true,
            head_tags: [
                {
                    tag: "tag",
                    content: "content",
                },
            ],
            filters: {
                match_type: "includes_any",
                clients: [
                    {
                        id: "id",
                    },
                ],
                organizations: [
                    {
                        id: "id",
                    },
                ],
                domains: [
                    {
                        id: "id",
                    },
                ],
            },
            use_page_template: true,
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/prompts/login/screen/login/rendering")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.prompts.rendering.get("login", "login");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/prompts/login/screen/login/rendering")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.prompts.rendering.get("login", "login");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/prompts/login/screen/login/rendering")
            .respondWith()
            .statusCode(402)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.prompts.rendering.get("login", "login");
        }).rejects.toThrow(Management.PaymentRequiredError);
    });

    test("get (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/prompts/login/screen/login/rendering")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.prompts.rendering.get("login", "login");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("get (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/prompts/login/screen/login/rendering")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.prompts.rendering.get("login", "login");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("get (7)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/prompts/login/screen/login/rendering")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.prompts.rendering.get("login", "login");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("update (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { rendering_mode: "advanced", head_tags: [{}] };
        const rawResponseBody = {
            rendering_mode: "advanced",
            context_configuration: ["context_configuration"],
            default_head_tags_disabled: true,
            head_tags: [{ tag: "tag", content: "content" }],
            filters: {
                match_type: "includes_any",
                clients: [{ id: "id" }],
                organizations: [{ id: "id" }],
                domains: [{ id: "id" }],
            },
            use_page_template: true,
        };
        server
            .mockEndpoint()
            .patch("/prompts/login/screen/login/rendering")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.prompts.rendering.update("login", "login", {
            rendering_mode: "advanced",
            head_tags: [{}],
        });
        expect(response).toEqual({
            rendering_mode: "advanced",
            context_configuration: ["context_configuration"],
            default_head_tags_disabled: true,
            head_tags: [
                {
                    tag: "tag",
                    content: "content",
                },
            ],
            filters: {
                match_type: "includes_any",
                clients: [
                    {
                        id: "id",
                    },
                ],
                organizations: [
                    {
                        id: "id",
                    },
                ],
                domains: [
                    {
                        id: "id",
                    },
                ],
            },
            use_page_template: true,
        });
    });

    test("update (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { rendering_mode: "advanced", head_tags: [{}, {}] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/prompts/login/screen/login/rendering")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.prompts.rendering.update("login", "login", {
                rendering_mode: "advanced",
                head_tags: [{}, {}],
            });
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("update (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { rendering_mode: "advanced", head_tags: [{}, {}] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/prompts/login/screen/login/rendering")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.prompts.rendering.update("login", "login", {
                rendering_mode: "advanced",
                head_tags: [{}, {}],
            });
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("update (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { rendering_mode: "advanced", head_tags: [{}, {}] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/prompts/login/screen/login/rendering")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(402)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.prompts.rendering.update("login", "login", {
                rendering_mode: "advanced",
                head_tags: [{}, {}],
            });
        }).rejects.toThrow(Management.PaymentRequiredError);
    });

    test("update (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { rendering_mode: "advanced", head_tags: [{}, {}] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/prompts/login/screen/login/rendering")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.prompts.rendering.update("login", "login", {
                rendering_mode: "advanced",
                head_tags: [{}, {}],
            });
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("update (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { rendering_mode: "advanced", head_tags: [{}, {}] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/prompts/login/screen/login/rendering")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.prompts.rendering.update("login", "login", {
                rendering_mode: "advanced",
                head_tags: [{}, {}],
            });
        }).rejects.toThrow(Management.TooManyRequestsError);
    });
});
