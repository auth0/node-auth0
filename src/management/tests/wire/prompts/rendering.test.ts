/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../Client.js";

describe("Rendering", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            tenant: "tenant",
            prompt: "prompt",
            screen: "screen",
            rendering_mode: "advanced",
            context_configuration: ["context_configuration"],
            default_head_tags_disabled: true,
            head_tags: [{ tag: "tag", content: "content" }],
            filters: { match_type: "includes_any", clients: [{}], organizations: [{}], domains: [{}] },
            use_page_template: true,
        };
        server
            .mockEndpoint()
            .get("/prompts/login/screen/login/rendering")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.prompts.rendering.get("login", "login");
        expect(response).toEqual({
            tenant: "tenant",
            prompt: "prompt",
            screen: "screen",
            rendering_mode: "advanced",
            context_configuration: ["context_configuration"],
            default_head_tags_disabled: true,
            head_tags: [
                {
                    tag: "tag",
                    content: "content",
                },
            ],
            filters: {
                match_type: "includes_any",
                clients: [{}],
                organizations: [{}],
                domains: [{}],
            },
            use_page_template: true,
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            rendering_mode: "advanced",
            context_configuration: ["context_configuration"],
            default_head_tags_disabled: true,
            head_tags: [{ tag: "tag", content: "content" }],
            filters: { match_type: "includes_any", clients: [{}], organizations: [{}], domains: [{}] },
            use_page_template: true,
        };
        server
            .mockEndpoint()
            .patch("/prompts/login/screen/login/rendering")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.prompts.rendering.update("login", "login");
        expect(response).toEqual({
            rendering_mode: "advanced",
            context_configuration: ["context_configuration"],
            default_head_tags_disabled: true,
            head_tags: [
                {
                    tag: "tag",
                    content: "content",
                },
            ],
            filters: {
                match_type: "includes_any",
                clients: [{}],
                organizations: [{}],
                domains: [{}],
            },
            use_page_template: true,
        });
    });
});
