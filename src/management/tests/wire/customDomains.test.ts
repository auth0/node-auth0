// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../mock-server/MockServerPool";
import { ManagementClient } from "../../Client";
import * as Management from "../../api/index";

describe("CustomDomains", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                custom_domain_id: "custom_domain_id",
                domain: "domain",
                primary: true,
                status: "pending_verification",
                type: "auth0_managed_certs",
                origin_domain_name: "origin_domain_name",
                verification: { methods: [{ name: "cname", record: "record" }] },
                custom_client_ip_header: "custom_client_ip_header",
                tls_policy: "tls_policy",
            },
        ];
        server.mockEndpoint().get("/custom-domains").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.customDomains.list();
        expect(response).toEqual([
            {
                custom_domain_id: "custom_domain_id",
                domain: "domain",
                primary: true,
                status: "pending_verification",
                type: "auth0_managed_certs",
                origin_domain_name: "origin_domain_name",
                verification: {
                    methods: [
                        {
                            name: "cname",
                            record: "record",
                        },
                    ],
                },
                custom_client_ip_header: "custom_client_ip_header",
                tls_policy: "tls_policy",
            },
        ]);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/custom-domains").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.customDomains.list();
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/custom-domains").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.customDomains.list();
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/custom-domains").respondWith().statusCode(429).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.customDomains.list();
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { domain: "domain", type: "auth0_managed_certs" };
        const rawResponseBody = {
            custom_domain_id: "custom_domain_id",
            domain: "domain",
            primary: true,
            status: "pending_verification",
            type: "auth0_managed_certs",
            verification: { methods: [{ name: "cname", record: "record" }] },
            custom_client_ip_header: "custom_client_ip_header",
            tls_policy: "tls_policy",
        };
        server
            .mockEndpoint()
            .post("/custom-domains")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customDomains.create({
            domain: "domain",
            type: "auth0_managed_certs",
        });
        expect(response).toEqual({
            custom_domain_id: "custom_domain_id",
            domain: "domain",
            primary: true,
            status: "pending_verification",
            type: "auth0_managed_certs",
            verification: {
                methods: [
                    {
                        name: "cname",
                        record: "record",
                    },
                ],
            },
            custom_client_ip_header: "custom_client_ip_header",
            tls_policy: "tls_policy",
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { domain: "domain", type: "auth0_managed_certs" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/custom-domains")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customDomains.create({
                domain: "domain",
                type: "auth0_managed_certs",
            });
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("create (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { domain: "domain", type: "auth0_managed_certs" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/custom-domains")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customDomains.create({
                domain: "domain",
                type: "auth0_managed_certs",
            });
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("create (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { domain: "domain", type: "auth0_managed_certs" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/custom-domains")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customDomains.create({
                domain: "domain",
                type: "auth0_managed_certs",
            });
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("create (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { domain: "domain", type: "auth0_managed_certs" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/custom-domains")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(409)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customDomains.create({
                domain: "domain",
                type: "auth0_managed_certs",
            });
        }).rejects.toThrow(Management.ConflictError);
    });

    test("create (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { domain: "domain", type: "auth0_managed_certs" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/custom-domains")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customDomains.create({
                domain: "domain",
                type: "auth0_managed_certs",
            });
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            custom_domain_id: "custom_domain_id",
            domain: "domain",
            primary: true,
            status: "pending_verification",
            type: "auth0_managed_certs",
            origin_domain_name: "origin_domain_name",
            verification: { methods: [{ name: "cname", record: "record" }] },
            custom_client_ip_header: "custom_client_ip_header",
            tls_policy: "tls_policy",
        };
        server.mockEndpoint().get("/custom-domains/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.customDomains.get("id");
        expect(response).toEqual({
            custom_domain_id: "custom_domain_id",
            domain: "domain",
            primary: true,
            status: "pending_verification",
            type: "auth0_managed_certs",
            origin_domain_name: "origin_domain_name",
            verification: {
                methods: [
                    {
                        name: "cname",
                        record: "record",
                    },
                ],
            },
            custom_client_ip_header: "custom_client_ip_header",
            tls_policy: "tls_policy",
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/custom-domains/id").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.customDomains.get("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/custom-domains/id").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.customDomains.get("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/custom-domains/id").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.customDomains.get("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("get (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/custom-domains/id").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.customDomains.get("id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("get (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/custom-domains/id").respondWith().statusCode(429).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.customDomains.get("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/custom-domains/id").respondWith().statusCode(200).build();

        const response = await client.customDomains.delete("id");
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/custom-domains/id")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customDomains.delete("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/custom-domains/id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customDomains.delete("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("delete (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/custom-domains/id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customDomains.delete("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("delete (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/custom-domains/id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customDomains.delete("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("update (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            custom_domain_id: "custom_domain_id",
            domain: "domain",
            primary: true,
            status: "pending_verification",
            type: "auth0_managed_certs",
            verification: { methods: [{ name: "cname", record: "record" }] },
            custom_client_ip_header: "custom_client_ip_header",
            tls_policy: "tls_policy",
        };
        server
            .mockEndpoint()
            .patch("/custom-domains/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customDomains.update("id");
        expect(response).toEqual({
            custom_domain_id: "custom_domain_id",
            domain: "domain",
            primary: true,
            status: "pending_verification",
            type: "auth0_managed_certs",
            verification: {
                methods: [
                    {
                        name: "cname",
                        record: "record",
                    },
                ],
            },
            custom_client_ip_header: "custom_client_ip_header",
            tls_policy: "tls_policy",
        });
    });

    test("update (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/custom-domains/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customDomains.update("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("update (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/custom-domains/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customDomains.update("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("update (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/custom-domains/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customDomains.update("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("update (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/custom-domains/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customDomains.update("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("test (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { success: true, message: "message" };
        server
            .mockEndpoint()
            .post("/custom-domains/id/test")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customDomains.test("id");
        expect(response).toEqual({
            success: true,
            message: "message",
        });
    });

    test("test (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/custom-domains/id/test")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customDomains.test("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("test (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/custom-domains/id/test")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customDomains.test("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("test (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/custom-domains/id/test")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customDomains.test("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("test (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/custom-domains/id/test")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customDomains.test("id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("test (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/custom-domains/id/test")
            .respondWith()
            .statusCode(409)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customDomains.test("id");
        }).rejects.toThrow(Management.ConflictError);
    });

    test("verify (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            custom_domain_id: "custom_domain_id",
            domain: "domain",
            primary: true,
            status: "pending_verification",
            type: "auth0_managed_certs",
            cname_api_key: "cname_api_key",
            origin_domain_name: "origin_domain_name",
            verification: { methods: [{ name: "cname", record: "record" }] },
            custom_client_ip_header: "custom_client_ip_header",
            tls_policy: "tls_policy",
        };
        server
            .mockEndpoint()
            .post("/custom-domains/id/verify")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.customDomains.verify("id");
        expect(response).toEqual({
            custom_domain_id: "custom_domain_id",
            domain: "domain",
            primary: true,
            status: "pending_verification",
            type: "auth0_managed_certs",
            cname_api_key: "cname_api_key",
            origin_domain_name: "origin_domain_name",
            verification: {
                methods: [
                    {
                        name: "cname",
                        record: "record",
                    },
                ],
            },
            custom_client_ip_header: "custom_client_ip_header",
            tls_policy: "tls_policy",
        });
    });

    test("verify (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/custom-domains/id/verify")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customDomains.verify("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("verify (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/custom-domains/id/verify")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customDomains.verify("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("verify (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/custom-domains/id/verify")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customDomains.verify("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("verify (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/custom-domains/id/verify")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customDomains.verify("id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("verify (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/custom-domains/id/verify")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.customDomains.verify("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });
});
