/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { ManagementClient } from "../../Client.js";

describe("Roles", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name" };
        const rawResponseBody = { id: "id", name: "name", description: "description" };
        server
            .mockEndpoint()
            .post("/roles")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.roles.create({
            name: "name",
        });
        expect(response).toEqual({
            id: "id",
            name: "name",
            description: "description",
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { id: "id", name: "name", description: "description" };
        server.mockEndpoint().get("/roles/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.roles.get("id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            description: "description",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/roles/id").respondWith().statusCode(200).build();

        const response = await client.roles.delete("id");
        expect(response).toEqual(undefined);
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { id: "id", name: "name", description: "description" };
        server
            .mockEndpoint()
            .patch("/roles/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.roles.update("id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            description: "description",
        });
    });

    test("addPermissions", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            permissions: [
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
            ],
        };

        server
            .mockEndpoint()
            .post("/roles/id/permissions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.roles.addPermissions("id", {
            permissions: [
                {
                    resource_server_identifier: "resource_server_identifier",
                    permission_name: "permission_name",
                },
            ],
        });
        expect(response).toEqual(undefined);
    });

    test("deletePermissions", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            permissions: [
                { resource_server_identifier: "resource_server_identifier", permission_name: "permission_name" },
            ],
        };

        server
            .mockEndpoint()
            .delete("/roles/id/permissions")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.roles.deletePermissions("id", {
            permissions: [
                {
                    resource_server_identifier: "resource_server_identifier",
                    permission_name: "permission_name",
                },
            ],
        });
        expect(response).toEqual(undefined);
    });

    test("assignUsers", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { users: ["users"] };

        server.mockEndpoint().post("/roles/id/users").jsonBody(rawRequestBody).respondWith().statusCode(200).build();

        const response = await client.roles.assignUsers("id", {
            users: ["users"],
        });
        expect(response).toEqual(undefined);
    });
});
