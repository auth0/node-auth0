// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../mock-server/MockServerPool";
import { ManagementClient } from "../../Client";
import * as Management from "../../api/index";

describe("RefreshTokens", () => {
    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            user_id: "user_id",
            created_at: "2024-01-15T09:30:00Z",
            idle_expires_at: "2024-01-15T09:30:00Z",
            expires_at: "2024-01-15T09:30:00Z",
            device: {
                initial_ip: "initial_ip",
                initial_asn: "initial_asn",
                initial_user_agent: "initial_user_agent",
                last_ip: "last_ip",
                last_asn: "last_asn",
                last_user_agent: "last_user_agent",
            },
            client_id: "client_id",
            session_id: "session_id",
            rotating: true,
            resource_servers: [{ audience: "audience", scopes: "scopes" }],
            last_exchanged_at: "2024-01-15T09:30:00Z",
        };
        server.mockEndpoint().get("/refresh-tokens/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.refreshTokens.get("id");
        expect(response).toEqual({
            id: "id",
            user_id: "user_id",
            created_at: "2024-01-15T09:30:00Z",
            idle_expires_at: "2024-01-15T09:30:00Z",
            expires_at: "2024-01-15T09:30:00Z",
            device: {
                initial_ip: "initial_ip",
                initial_asn: "initial_asn",
                initial_user_agent: "initial_user_agent",
                last_ip: "last_ip",
                last_asn: "last_asn",
                last_user_agent: "last_user_agent",
            },
            client_id: "client_id",
            session_id: "session_id",
            rotating: true,
            resource_servers: [
                {
                    audience: "audience",
                    scopes: "scopes",
                },
            ],
            last_exchanged_at: "2024-01-15T09:30:00Z",
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/refresh-tokens/id").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.refreshTokens.get("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/refresh-tokens/id").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.refreshTokens.get("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/refresh-tokens/id").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.refreshTokens.get("id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("get (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/refresh-tokens/id").respondWith().statusCode(429).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.refreshTokens.get("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/refresh-tokens/id").respondWith().statusCode(200).build();

        const response = await client.refreshTokens.delete("id");
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/refresh-tokens/id")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.refreshTokens.delete("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/refresh-tokens/id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.refreshTokens.delete("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("delete (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/refresh-tokens/id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.refreshTokens.delete("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("delete (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/refresh-tokens/id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.refreshTokens.delete("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });
});
