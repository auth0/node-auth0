/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../../Client.js";

describe("Tokens", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                token_id: "token_id",
                scopes: ["scopes"],
                created_at: "created_at",
                valid_until: "valid_until",
                last_used_at: "last_used_at",
            },
        ];
        server
            .mockEndpoint()
            .get("/connections/id/scim-configuration/tokens")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.connections.scimConfiguration.tokens.get("id");
        expect(response).toEqual([
            {
                token_id: "token_id",
                scopes: ["scopes"],
                created_at: "created_at",
                valid_until: "valid_until",
                last_used_at: "last_used_at",
            },
        ]);
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            token_id: "token_id",
            token: "token",
            scopes: ["scopes"],
            created_at: "created_at",
            valid_until: "valid_until",
        };
        server
            .mockEndpoint()
            .post("/connections/id/scim-configuration/tokens")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.connections.scimConfiguration.tokens.create("id");
        expect(response).toEqual({
            token_id: "token_id",
            token: "token",
            scopes: ["scopes"],
            created_at: "created_at",
            valid_until: "valid_until",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server
            .mockEndpoint()
            .delete("/connections/id/scim-configuration/tokens/tokenId")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.connections.scimConfiguration.tokens.delete("id", "tokenId");
        expect(response).toEqual(undefined);
    });
});
