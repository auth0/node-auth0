/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../../Client.js";
import * as Management from "../../../../api/index.js";

describe("Tokens", () => {
    test("get (f4f21c24)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                token_id: "token_id",
                scopes: ["scopes"],
                created_at: "created_at",
                valid_until: "valid_until",
                last_used_at: "last_used_at",
            },
        ];
        server
            .mockEndpoint()
            .get("/connections/id/scim-configuration/tokens")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.connections.scimConfiguration.tokens.get("id");
        expect(response).toEqual([
            {
                token_id: "token_id",
                scopes: ["scopes"],
                created_at: "created_at",
                valid_until: "valid_until",
                last_used_at: "last_used_at",
            },
        ]);
    });

    test("get (fcf9dbd1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/connections/id/scim-configuration/tokens")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connections.scimConfiguration.tokens.get("id");
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("get (e55ce3fd)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/connections/id/scim-configuration/tokens")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connections.scimConfiguration.tokens.get("id");
        }).rejects.toThrow(
            new Management.NotFoundError({
                key: "value",
            }),
        );
    });

    test("create (b46c72ad)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            token_id: "token_id",
            token: "token",
            scopes: ["scopes"],
            created_at: "created_at",
            valid_until: "valid_until",
        };
        server
            .mockEndpoint()
            .post("/connections/id/scim-configuration/tokens")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.connections.scimConfiguration.tokens.create("id");
        expect(response).toEqual({
            token_id: "token_id",
            token: "token",
            scopes: ["scopes"],
            created_at: "created_at",
            valid_until: "valid_until",
        });
    });

    test("create (ff486446)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { scopes: undefined, token_lifetime: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/connections/id/scim-configuration/tokens")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connections.scimConfiguration.tokens.create("id", {
                scopes: undefined,
                token_lifetime: undefined,
            });
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("create (5530a34a)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { scopes: undefined, token_lifetime: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/connections/id/scim-configuration/tokens")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connections.scimConfiguration.tokens.create("id", {
                scopes: undefined,
                token_lifetime: undefined,
            });
        }).rejects.toThrow(
            new Management.NotFoundError({
                key: "value",
            }),
        );
    });

    test("create (8e6474ea)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { scopes: undefined, token_lifetime: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/connections/id/scim-configuration/tokens")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(409)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connections.scimConfiguration.tokens.create("id", {
                scopes: undefined,
                token_lifetime: undefined,
            });
        }).rejects.toThrow(
            new Management.ConflictError({
                key: "value",
            }),
        );
    });

    test("delete (793a239)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server
            .mockEndpoint()
            .delete("/connections/id/scim-configuration/tokens/tokenId")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.connections.scimConfiguration.tokens.delete("id", "tokenId");
        expect(response).toEqual(undefined);
    });

    test("delete (b713f0e0)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/connections/id/scim-configuration/tokens/tokenId")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connections.scimConfiguration.tokens.delete("id", "tokenId");
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("delete (90a18d94)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/connections/id/scim-configuration/tokens/tokenId")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connections.scimConfiguration.tokens.delete("id", "tokenId");
        }).rejects.toThrow(
            new Management.NotFoundError({
                key: "value",
            }),
        );
    });
});
