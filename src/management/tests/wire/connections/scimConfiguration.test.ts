// This file was auto-generated by Fern from our API Definition.

import * as Management from "../../../api/index";
import { ManagementClient } from "../../../Client";
import { mockServerPool } from "../../mock-server/MockServerPool";

describe("ScimConfiguration", () => {
    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            connection_id: "connection_id",
            connection_name: "connection_name",
            strategy: "strategy",
            tenant_name: "tenant_name",
            user_id_attribute: "user_id_attribute",
            mapping: [{ auth0: "auth0", scim: "scim" }],
            created_at: "created_at",
            updated_on: "updated_on",
        };
        server
            .mockEndpoint()
            .get("/connections/id/scim-configuration")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.connections.scimConfiguration.get("id");
        expect(response).toEqual({
            connection_id: "connection_id",
            connection_name: "connection_name",
            strategy: "strategy",
            tenant_name: "tenant_name",
            user_id_attribute: "user_id_attribute",
            mapping: [
                {
                    auth0: "auth0",
                    scim: "scim",
                },
            ],
            created_at: "created_at",
            updated_on: "updated_on",
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/connections/id/scim-configuration")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connections.scimConfiguration.get("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/connections/id/scim-configuration")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connections.scimConfiguration.get("id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            connection_id: "connection_id",
            connection_name: "connection_name",
            strategy: "strategy",
            tenant_name: "tenant_name",
            user_id_attribute: "user_id_attribute",
            mapping: [{ auth0: "auth0", scim: "scim" }],
            created_at: "created_at",
            updated_on: "updated_on",
        };
        server
            .mockEndpoint()
            .post("/connections/id/scim-configuration")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.connections.scimConfiguration.create("id");
        expect(response).toEqual({
            connection_id: "connection_id",
            connection_name: "connection_name",
            strategy: "strategy",
            tenant_name: "tenant_name",
            user_id_attribute: "user_id_attribute",
            mapping: [
                {
                    auth0: "auth0",
                    scim: "scim",
                },
            ],
            created_at: "created_at",
            updated_on: "updated_on",
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/connections/id/scim-configuration")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connections.scimConfiguration.create("id", undefined);
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("create (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/connections/id/scim-configuration")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connections.scimConfiguration.create("id", undefined);
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/connections/id/scim-configuration").respondWith().statusCode(200).build();

        const response = await client.connections.scimConfiguration.delete("id");
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/connections/id/scim-configuration")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connections.scimConfiguration.delete("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/connections/id/scim-configuration")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connections.scimConfiguration.delete("id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("update (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { user_id_attribute: "user_id_attribute", mapping: [{}] };
        const rawResponseBody = {
            connection_id: "connection_id",
            connection_name: "connection_name",
            strategy: "strategy",
            tenant_name: "tenant_name",
            user_id_attribute: "user_id_attribute",
            mapping: [{ auth0: "auth0", scim: "scim" }],
            created_at: "created_at",
            updated_on: "updated_on",
        };
        server
            .mockEndpoint()
            .patch("/connections/id/scim-configuration")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.connections.scimConfiguration.update("id", {
            user_id_attribute: "user_id_attribute",
            mapping: [{}],
        });
        expect(response).toEqual({
            connection_id: "connection_id",
            connection_name: "connection_name",
            strategy: "strategy",
            tenant_name: "tenant_name",
            user_id_attribute: "user_id_attribute",
            mapping: [
                {
                    auth0: "auth0",
                    scim: "scim",
                },
            ],
            created_at: "created_at",
            updated_on: "updated_on",
        });
    });

    test("update (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { user_id_attribute: "user_id_attribute", mapping: [{}, {}] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/connections/id/scim-configuration")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connections.scimConfiguration.update("id", {
                user_id_attribute: "user_id_attribute",
                mapping: [{}, {}],
            });
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("update (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { user_id_attribute: "user_id_attribute", mapping: [{}, {}] };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/connections/id/scim-configuration")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connections.scimConfiguration.update("id", {
                user_id_attribute: "user_id_attribute",
                mapping: [{}, {}],
            });
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("getDefaultMapping (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { mapping: [{ auth0: "auth0", scim: "scim" }] };
        server
            .mockEndpoint()
            .get("/connections/id/scim-configuration/default-mapping")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.connections.scimConfiguration.getDefaultMapping("id");
        expect(response).toEqual({
            mapping: [
                {
                    auth0: "auth0",
                    scim: "scim",
                },
            ],
        });
    });

    test("getDefaultMapping (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/connections/id/scim-configuration/default-mapping")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connections.scimConfiguration.getDefaultMapping("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("getDefaultMapping (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/connections/id/scim-configuration/default-mapping")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connections.scimConfiguration.getDefaultMapping("id");
        }).rejects.toThrow(Management.NotFoundError);
    });
});
