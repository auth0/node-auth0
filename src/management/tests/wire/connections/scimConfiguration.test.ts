/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../Client.js";

describe("ScimConfiguration", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            connection_id: "connection_id",
            connection_name: "connection_name",
            strategy: "strategy",
            tenant_name: "tenant_name",
            user_id_attribute: "user_id_attribute",
            mapping: [{ auth0: "auth0", scim: "scim" }],
            created_at: "created_at",
            updated_on: "updated_on",
        };
        server
            .mockEndpoint()
            .get("/connections/id/scim-configuration")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.connections.scimConfiguration.get("id");
        expect(response).toEqual({
            connection_id: "connection_id",
            connection_name: "connection_name",
            strategy: "strategy",
            tenant_name: "tenant_name",
            user_id_attribute: "user_id_attribute",
            mapping: [
                {
                    auth0: "auth0",
                    scim: "scim",
                },
            ],
            created_at: "created_at",
            updated_on: "updated_on",
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            connection_id: "connection_id",
            connection_name: "connection_name",
            strategy: "strategy",
            tenant_name: "tenant_name",
            user_id_attribute: "user_id_attribute",
            mapping: [
                { auth0: "auth0", scim: "scim" },
                { auth0: "auth0", scim: "scim" },
            ],
            created_at: "created_at",
            updated_on: "updated_on",
        };
        server
            .mockEndpoint()
            .post("/connections/id/scim-configuration")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.connections.scimConfiguration.create("id", undefined);
        expect(response).toEqual({
            connection_id: "connection_id",
            connection_name: "connection_name",
            strategy: "strategy",
            tenant_name: "tenant_name",
            user_id_attribute: "user_id_attribute",
            mapping: [
                {
                    auth0: "auth0",
                    scim: "scim",
                },
                {
                    auth0: "auth0",
                    scim: "scim",
                },
            ],
            created_at: "created_at",
            updated_on: "updated_on",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/connections/id/scim-configuration").respondWith().statusCode(200).build();

        const response = await client.connections.scimConfiguration.delete("id");
        expect(response).toEqual(undefined);
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { user_id_attribute: "user_id_attribute", mapping: [{}] };
        const rawResponseBody = {
            connection_id: "connection_id",
            connection_name: "connection_name",
            strategy: "strategy",
            tenant_name: "tenant_name",
            user_id_attribute: "user_id_attribute",
            mapping: [{ auth0: "auth0", scim: "scim" }],
            created_at: "created_at",
            updated_on: "updated_on",
        };
        server
            .mockEndpoint()
            .patch("/connections/id/scim-configuration")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.connections.scimConfiguration.update("id", {
            user_id_attribute: "user_id_attribute",
            mapping: [{}],
        });
        expect(response).toEqual({
            connection_id: "connection_id",
            connection_name: "connection_name",
            strategy: "strategy",
            tenant_name: "tenant_name",
            user_id_attribute: "user_id_attribute",
            mapping: [
                {
                    auth0: "auth0",
                    scim: "scim",
                },
            ],
            created_at: "created_at",
            updated_on: "updated_on",
        });
    });

    test("getDefaultMapping", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { mapping: [{ auth0: "auth0", scim: "scim" }] };
        server
            .mockEndpoint()
            .get("/connections/id/scim-configuration/default-mapping")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.connections.scimConfiguration.getDefaultMapping("id");
        expect(response).toEqual({
            mapping: [
                {
                    auth0: "auth0",
                    scim: "scim",
                },
            ],
        });
    });
});
