// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ManagementClient } from "../../../Client";
import * as Management from "../../../api/index";

describe("Keys", () => {
    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                kid: "kid",
                cert: "cert",
                pkcs: "pkcs",
                current: true,
                next: true,
                previous: true,
                current_since: "current_since",
                fingerprint: "fingerprint",
                thumbprint: "thumbprint",
                algorithm: "algorithm",
                key_use: "encryption",
                subject_dn: "subject_dn",
            },
        ];
        server
            .mockEndpoint()
            .get("/connections/id/keys")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.connections.keys.get("id");
        expect(response).toEqual([
            {
                kid: "kid",
                cert: "cert",
                pkcs: "pkcs",
                current: true,
                next: true,
                previous: true,
                current_since: "current_since",
                fingerprint: "fingerprint",
                thumbprint: "thumbprint",
                algorithm: "algorithm",
                key_use: "encryption",
                subject_dn: "subject_dn",
            },
        ]);
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/connections/id/keys")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connections.keys.get("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/connections/id/keys")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connections.keys.get("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/connections/id/keys")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connections.keys.get("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("get (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/connections/id/keys")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connections.keys.get("id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("get (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/connections/id/keys")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connections.keys.get("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("rotate (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            kid: "kid",
            cert: "cert",
            pkcs: "pkcs",
            next: true,
            fingerprint: "fingerprint",
            thumbprint: "thumbprint",
            algorithm: "algorithm",
            key_use: "encryption",
            subject_dn: "subject_dn",
        };
        server
            .mockEndpoint()
            .post("/connections/id/keys/rotate")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.connections.keys.rotate("id");
        expect(response).toEqual({
            kid: "kid",
            cert: "cert",
            pkcs: "pkcs",
            next: true,
            fingerprint: "fingerprint",
            thumbprint: "thumbprint",
            algorithm: "algorithm",
            key_use: "encryption",
            subject_dn: "subject_dn",
        });
    });

    test("rotate (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/connections/id/keys/rotate")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connections.keys.rotate("id", undefined);
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("rotate (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/connections/id/keys/rotate")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connections.keys.rotate("id", undefined);
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("rotate (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/connections/id/keys/rotate")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connections.keys.rotate("id", undefined);
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("rotate (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/connections/id/keys/rotate")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connections.keys.rotate("id", undefined);
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("rotate (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/connections/id/keys/rotate")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connections.keys.rotate("id", undefined);
        }).rejects.toThrow(Management.TooManyRequestsError);
    });
});
