/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../Client.js";

describe("Keys", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                kid: "kid",
                cert: "cert",
                pkcs: "pkcs",
                current: true,
                next: true,
                previous: true,
                current_since: "current_since",
                fingerprint: "fingerprint",
                thumbprint: "thumbprint",
                algorithm: "algorithm",
                key_use: "encryption",
                subject_dn: "subject_dn",
            },
        ];
        server
            .mockEndpoint()
            .get("/connections/id/keys")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.connections.keys.get("id");
        expect(response).toEqual([
            {
                kid: "kid",
                cert: "cert",
                pkcs: "pkcs",
                current: true,
                next: true,
                previous: true,
                current_since: "current_since",
                fingerprint: "fingerprint",
                thumbprint: "thumbprint",
                algorithm: "algorithm",
                key_use: "encryption",
                subject_dn: "subject_dn",
            },
        ]);
    });

    test("rotate", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            kid: "kid",
            cert: "-----BEGIN CERTIFICATE-----\r\nMIIDDTCCA...YiA0TQhAt8=\r\n-----END CERTIFICATE-----",
            pkcs: "-----BEGIN PKCS7-----\r\nMIIDPA....t8xAA==\r\n-----END PKCS7-----",
            next: true,
            fingerprint: "CC:FB:DD:D8:9A:B5:DE:1B:F0:CC:36:D2:99:59:21:12:03:DD:A8:25",
            thumbprint: "CCFBDDD89AB5DE1BF0CC36D29959211203DDA825",
            algorithm: "algorithm",
            key_use: "encryption",
            subject_dn: "subject_dn",
        };
        server
            .mockEndpoint()
            .post("/connections/id/keys/rotate")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.connections.keys.rotate("id", undefined);
        expect(response).toEqual({
            kid: "kid",
            cert: "-----BEGIN CERTIFICATE-----\r\nMIIDDTCCA...YiA0TQhAt8=\r\n-----END CERTIFICATE-----",
            pkcs: "-----BEGIN PKCS7-----\r\nMIIDPA....t8xAA==\r\n-----END PKCS7-----",
            next: true,
            fingerprint: "CC:FB:DD:D8:9A:B5:DE:1B:F0:CC:36:D2:99:59:21:12:03:DD:A8:25",
            thumbprint: "CCFBDDD89AB5DE1BF0CC36D29959211203DDA825",
            algorithm: "algorithm",
            key_use: "encryption",
            subject_dn: "subject_dn",
        });
    });
});
