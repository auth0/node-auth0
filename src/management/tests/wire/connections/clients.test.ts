// This file was auto-generated by Fern from our API Definition.

import * as Management from "../../../api/index";
import { ManagementClient } from "../../../Client";
import { mockServerPool } from "../../mock-server/MockServerPool";

describe("Clients", () => {
    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { clients: [{ client_id: "client_id" }], next: "next" };
        server
            .mockEndpoint()
            .get("/connections/id/clients")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            clients: [
                {
                    client_id: "client_id",
                },
            ],
            next: "next",
        };
        const page = await client.connections.clients.get("id", {
            take: 1,
            from: "from",
        });

        expect(expected.clients).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.clients).toEqual(nextPage.data);
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/connections/id/clients")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connections.clients.get("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/connections/id/clients")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connections.clients.get("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/connections/id/clients")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connections.clients.get("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("get (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/connections/id/clients")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connections.clients.get("id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("get (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/connections/id/clients")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connections.clients.get("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("update (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = [{ client_id: "client_id", status: true }];

        server
            .mockEndpoint()
            .patch("/connections/id/clients")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.connections.clients.update("id", [
            {
                client_id: "client_id",
                status: true,
            },
        ]);
        expect(response).toEqual(undefined);
    });

    test("update (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = [
            { client_id: "client_id", status: true },
            { client_id: "client_id", status: true },
        ];
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/connections/id/clients")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connections.clients.update("id", [
                {
                    client_id: "client_id",
                    status: true,
                },
                {
                    client_id: "client_id",
                    status: true,
                },
            ]);
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("update (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = [
            { client_id: "client_id", status: true },
            { client_id: "client_id", status: true },
        ];
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/connections/id/clients")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connections.clients.update("id", [
                {
                    client_id: "client_id",
                    status: true,
                },
                {
                    client_id: "client_id",
                    status: true,
                },
            ]);
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("update (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = [
            { client_id: "client_id", status: true },
            { client_id: "client_id", status: true },
        ];
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/connections/id/clients")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connections.clients.update("id", [
                {
                    client_id: "client_id",
                    status: true,
                },
                {
                    client_id: "client_id",
                    status: true,
                },
            ]);
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("update (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = [
            { client_id: "client_id", status: true },
            { client_id: "client_id", status: true },
        ];
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/connections/id/clients")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connections.clients.update("id", [
                {
                    client_id: "client_id",
                    status: true,
                },
                {
                    client_id: "client_id",
                    status: true,
                },
            ]);
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("update (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = [
            { client_id: "client_id", status: true },
            { client_id: "client_id", status: true },
        ];
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/connections/id/clients")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.connections.clients.update("id", [
                {
                    client_id: "client_id",
                    status: true,
                },
                {
                    client_id: "client_id",
                    status: true,
                },
            ]);
        }).rejects.toThrow(Management.TooManyRequestsError);
    });
});
