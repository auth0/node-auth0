/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../Client.js";

describe("Encryption", () => {
    test("list", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            start: 1,
            limit: 1,
            total: 1,
            keys: [
                {
                    kid: "kid",
                    type: "customer-provided-root-key",
                    state: "pre-activation",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    parent_kid: "parent_kid",
                    public_key: "public_key",
                },
            ],
        };
        server.mockEndpoint().get("/keys/encryption").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const expected = {
            start: 1,
            limit: 1,
            total: 1,
            keys: [
                {
                    kid: "kid",
                    type: "customer-provided-root-key",
                    state: "pre-activation",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    parent_kid: "parent_kid",
                    public_key: "public_key",
                },
            ],
        };
        const page = await client.keys.encryption.list();
        expect(expected.keys).toEqual(page.data);

        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.keys).toEqual(nextPage.data);
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { type: "customer-provided-root-key" };
        const rawResponseBody = {
            kid: "kid",
            type: "customer-provided-root-key",
            state: "pre-activation",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            parent_kid: "parent_kid",
            public_key: "public_key",
        };
        server
            .mockEndpoint()
            .post("/keys/encryption")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.keys.encryption.create({
            type: "customer-provided-root-key",
        });
        expect(response).toEqual({
            kid: "kid",
            type: "customer-provided-root-key",
            state: "pre-activation",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            parent_kid: "parent_kid",
            public_key: "public_key",
        });
    });

    test("rekey", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().post("/keys/encryption/rekey").respondWith().statusCode(200).build();

        const response = await client.keys.encryption.rekey();
        expect(response).toEqual(undefined);
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            kid: "kid",
            type: "customer-provided-root-key",
            state: "pre-activation",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            parent_kid: "parent_kid",
            public_key: "public_key",
        };
        server
            .mockEndpoint()
            .get("/keys/encryption/kid")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.keys.encryption.get("kid");
        expect(response).toEqual({
            kid: "kid",
            type: "customer-provided-root-key",
            state: "pre-activation",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            parent_kid: "parent_kid",
            public_key: "public_key",
        });
    });

    test("import", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { wrapped_key: "wrapped_key" };
        const rawResponseBody = {
            kid: "kid",
            type: "customer-provided-root-key",
            state: "pre-activation",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            parent_kid: "parent_kid",
            public_key: "public_key",
        };
        server
            .mockEndpoint()
            .post("/keys/encryption/kid")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.keys.encryption.import("kid", {
            wrapped_key: "wrapped_key",
        });
        expect(response).toEqual({
            kid: "kid",
            type: "customer-provided-root-key",
            state: "pre-activation",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            parent_kid: "parent_kid",
            public_key: "public_key",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/keys/encryption/kid").respondWith().statusCode(200).build();

        const response = await client.keys.encryption.delete("kid");
        expect(response).toEqual(undefined);
    });

    test("createPublicWrappingKey", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { public_key: "public_key", algorithm: "CKM_RSA_AES_KEY_WRAP" };
        server
            .mockEndpoint()
            .post("/keys/encryption/kid/wrapping-key")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.keys.encryption.createPublicWrappingKey("kid");
        expect(response).toEqual({
            public_key: "public_key",
            algorithm: "CKM_RSA_AES_KEY_WRAP",
        });
    });
});
