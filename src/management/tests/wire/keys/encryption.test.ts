// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ManagementClient } from "../../../Client";
import * as Management from "../../../api/index";

describe("Encryption", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            start: 1,
            limit: 1,
            total: 1,
            keys: [
                {
                    kid: "kid",
                    type: "customer-provided-root-key",
                    state: "pre-activation",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    parent_kid: "parent_kid",
                    public_key: "public_key",
                },
            ],
        };
        server.mockEndpoint().get("/keys/encryption").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const expected = {
            start: 1,
            limit: 1,
            total: 1,
            keys: [
                {
                    kid: "kid",
                    type: "customer-provided-root-key",
                    state: "pre-activation",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                    parent_kid: "parent_kid",
                    public_key: "public_key",
                },
            ],
        };
        const page = await client.keys.encryption.list({
            page: 1,
            per_page: 1,
            include_totals: true,
        });

        expect(expected.keys).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.keys).toEqual(nextPage.data);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/keys/encryption").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.keys.encryption.list();
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/keys/encryption").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.keys.encryption.list();
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/keys/encryption").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.keys.encryption.list();
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("list (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/keys/encryption").respondWith().statusCode(429).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.keys.encryption.list();
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { type: "customer-provided-root-key" };
        const rawResponseBody = {
            kid: "kid",
            type: "customer-provided-root-key",
            state: "pre-activation",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            parent_kid: "parent_kid",
            public_key: "public_key",
        };
        server
            .mockEndpoint()
            .post("/keys/encryption")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.keys.encryption.create({
            type: "customer-provided-root-key",
        });
        expect(response).toEqual({
            kid: "kid",
            type: "customer-provided-root-key",
            state: "pre-activation",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            parent_kid: "parent_kid",
            public_key: "public_key",
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { type: "customer-provided-root-key" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/keys/encryption")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.keys.encryption.create({
                type: "customer-provided-root-key",
            });
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("create (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { type: "customer-provided-root-key" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/keys/encryption")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.keys.encryption.create({
                type: "customer-provided-root-key",
            });
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("create (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { type: "customer-provided-root-key" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/keys/encryption")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.keys.encryption.create({
                type: "customer-provided-root-key",
            });
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("create (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { type: "customer-provided-root-key" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/keys/encryption")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(409)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.keys.encryption.create({
                type: "customer-provided-root-key",
            });
        }).rejects.toThrow(Management.ConflictError);
    });

    test("create (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { type: "customer-provided-root-key" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/keys/encryption")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.keys.encryption.create({
                type: "customer-provided-root-key",
            });
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("rekey (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().post("/keys/encryption/rekey").respondWith().statusCode(200).build();

        const response = await client.keys.encryption.rekey();
        expect(response).toEqual(undefined);
    });

    test("rekey (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/keys/encryption/rekey")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.keys.encryption.rekey();
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("rekey (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/keys/encryption/rekey")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.keys.encryption.rekey();
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("rekey (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/keys/encryption/rekey")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.keys.encryption.rekey();
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            kid: "kid",
            type: "customer-provided-root-key",
            state: "pre-activation",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            parent_kid: "parent_kid",
            public_key: "public_key",
        };
        server
            .mockEndpoint()
            .get("/keys/encryption/kid")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.keys.encryption.get("kid");
        expect(response).toEqual({
            kid: "kid",
            type: "customer-provided-root-key",
            state: "pre-activation",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            parent_kid: "parent_kid",
            public_key: "public_key",
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/keys/encryption/kid")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.keys.encryption.get("kid");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/keys/encryption/kid")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.keys.encryption.get("kid");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/keys/encryption/kid")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.keys.encryption.get("kid");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("get (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/keys/encryption/kid")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.keys.encryption.get("kid");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("get (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/keys/encryption/kid")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.keys.encryption.get("kid");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("import (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { wrapped_key: "wrapped_key" };
        const rawResponseBody = {
            kid: "kid",
            type: "customer-provided-root-key",
            state: "pre-activation",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            parent_kid: "parent_kid",
            public_key: "public_key",
        };
        server
            .mockEndpoint()
            .post("/keys/encryption/kid")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.keys.encryption.import("kid", {
            wrapped_key: "wrapped_key",
        });
        expect(response).toEqual({
            kid: "kid",
            type: "customer-provided-root-key",
            state: "pre-activation",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            parent_kid: "parent_kid",
            public_key: "public_key",
        });
    });

    test("import (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { wrapped_key: "wrapped_key" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/keys/encryption/kid")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.keys.encryption.import("kid", {
                wrapped_key: "wrapped_key",
            });
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("import (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { wrapped_key: "wrapped_key" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/keys/encryption/kid")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.keys.encryption.import("kid", {
                wrapped_key: "wrapped_key",
            });
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("import (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { wrapped_key: "wrapped_key" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/keys/encryption/kid")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.keys.encryption.import("kid", {
                wrapped_key: "wrapped_key",
            });
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("import (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { wrapped_key: "wrapped_key" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/keys/encryption/kid")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(409)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.keys.encryption.import("kid", {
                wrapped_key: "wrapped_key",
            });
        }).rejects.toThrow(Management.ConflictError);
    });

    test("import (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { wrapped_key: "wrapped_key" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/keys/encryption/kid")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.keys.encryption.import("kid", {
                wrapped_key: "wrapped_key",
            });
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/keys/encryption/kid").respondWith().statusCode(200).build();

        const response = await client.keys.encryption.delete("kid");
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/keys/encryption/kid")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.keys.encryption.delete("kid");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/keys/encryption/kid")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.keys.encryption.delete("kid");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("delete (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/keys/encryption/kid")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.keys.encryption.delete("kid");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("delete (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/keys/encryption/kid")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.keys.encryption.delete("kid");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("createPublicWrappingKey (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { public_key: "public_key", algorithm: "CKM_RSA_AES_KEY_WRAP" };
        server
            .mockEndpoint()
            .post("/keys/encryption/kid/wrapping-key")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.keys.encryption.createPublicWrappingKey("kid");
        expect(response).toEqual({
            public_key: "public_key",
            algorithm: "CKM_RSA_AES_KEY_WRAP",
        });
    });

    test("createPublicWrappingKey (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/keys/encryption/kid/wrapping-key")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.keys.encryption.createPublicWrappingKey("kid");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("createPublicWrappingKey (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/keys/encryption/kid/wrapping-key")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.keys.encryption.createPublicWrappingKey("kid");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("createPublicWrappingKey (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/keys/encryption/kid/wrapping-key")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.keys.encryption.createPublicWrappingKey("kid");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("createPublicWrappingKey (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/keys/encryption/kid/wrapping-key")
            .respondWith()
            .statusCode(409)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.keys.encryption.createPublicWrappingKey("kid");
        }).rejects.toThrow(Management.ConflictError);
    });

    test("createPublicWrappingKey (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/keys/encryption/kid/wrapping-key")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.keys.encryption.createPublicWrappingKey("kid");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });
});
