// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ManagementClient } from "../../../Client";
import * as Management from "../../../api/index";

describe("Signing", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                kid: "kid",
                cert: "cert",
                pkcs7: "pkcs7",
                current: true,
                next: true,
                previous: true,
                current_since: "current_since",
                current_until: "current_until",
                fingerprint: "fingerprint",
                thumbprint: "thumbprint",
                revoked: true,
                revoked_at: "revoked_at",
            },
        ];
        server.mockEndpoint().get("/keys/signing").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.keys.signing.list();
        expect(response).toEqual([
            {
                kid: "kid",
                cert: "cert",
                pkcs7: "pkcs7",
                current: true,
                next: true,
                previous: true,
                current_since: "current_since",
                current_until: "current_until",
                fingerprint: "fingerprint",
                thumbprint: "thumbprint",
                revoked: true,
                revoked_at: "revoked_at",
            },
        ]);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/keys/signing").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.keys.signing.list();
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/keys/signing").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.keys.signing.list();
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/keys/signing").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.keys.signing.list();
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("list (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/keys/signing").respondWith().statusCode(429).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.keys.signing.list();
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("rotate (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { cert: "cert", kid: "kid" };
        server
            .mockEndpoint()
            .post("/keys/signing/rotate")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.keys.signing.rotate();
        expect(response).toEqual({
            cert: "cert",
            kid: "kid",
        });
    });

    test("rotate (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/keys/signing/rotate")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.keys.signing.rotate();
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("rotate (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/keys/signing/rotate")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.keys.signing.rotate();
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("rotate (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/keys/signing/rotate")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.keys.signing.rotate();
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            kid: "kid",
            cert: "cert",
            pkcs7: "pkcs7",
            current: true,
            next: true,
            previous: true,
            current_since: "current_since",
            current_until: "current_until",
            fingerprint: "fingerprint",
            thumbprint: "thumbprint",
            revoked: true,
            revoked_at: "revoked_at",
        };
        server.mockEndpoint().get("/keys/signing/kid").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.keys.signing.get("kid");
        expect(response).toEqual({
            kid: "kid",
            cert: "cert",
            pkcs7: "pkcs7",
            current: true,
            next: true,
            previous: true,
            current_since: "current_since",
            current_until: "current_until",
            fingerprint: "fingerprint",
            thumbprint: "thumbprint",
            revoked: true,
            revoked_at: "revoked_at",
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/keys/signing/kid").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.keys.signing.get("kid");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/keys/signing/kid").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.keys.signing.get("kid");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/keys/signing/kid").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.keys.signing.get("kid");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("get (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/keys/signing/kid").respondWith().statusCode(429).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.keys.signing.get("kid");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("revoke (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { cert: "cert", kid: "kid" };
        server
            .mockEndpoint()
            .put("/keys/signing/kid/revoke")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.keys.signing.revoke("kid");
        expect(response).toEqual({
            cert: "cert",
            kid: "kid",
        });
    });

    test("revoke (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/keys/signing/kid/revoke")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.keys.signing.revoke("kid");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("revoke (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/keys/signing/kid/revoke")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.keys.signing.revoke("kid");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("revoke (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/keys/signing/kid/revoke")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.keys.signing.revoke("kid");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("revoke (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/keys/signing/kid/revoke")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.keys.signing.revoke("kid");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });
});
