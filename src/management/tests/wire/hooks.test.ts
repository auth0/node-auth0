/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { ManagementClient } from "../../Client.js";
import * as Management from "../../api/index.js";

describe("Hooks", () => {
    test("list (70af6fe5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            start: 1.1,
            limit: 1.1,
            total: 1.1,
            hooks: [
                {
                    triggerId: "triggerId",
                    id: "id",
                    name: "name",
                    enabled: true,
                    script: "script",
                    dependencies: { key: "value" },
                },
            ],
        };
        server.mockEndpoint().get("/hooks").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const expected = {
            start: 1.1,
            limit: 1.1,
            total: 1.1,
            hooks: [
                {
                    triggerId: "triggerId",
                    id: "id",
                    name: "name",
                    enabled: true,
                    script: "script",
                    dependencies: {
                        key: "value",
                    },
                },
            ],
        };
        const page = await client.hooks.list();
        expect(expected.hooks).toEqual(page.data);

        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.hooks).toEqual(nextPage.data);
    });

    test("list (c60dd33b)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/hooks").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.hooks.list();
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("list (1e230aeb)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/hooks").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.hooks.list();
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("list (af841397)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/hooks").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.hooks.list();
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("list (c29c5807)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/hooks").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.hooks.list();
        }).rejects.toThrow(
            new Management.NotFoundError({
                key: "value",
            }),
        );
    });

    test("list (ee1e23bf)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/hooks").respondWith().statusCode(429).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.hooks.list();
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });

    test("create (97c3e762)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name", script: "script", triggerId: "credentials-exchange" };
        const rawResponseBody = {
            triggerId: "triggerId",
            id: "id",
            name: "name",
            enabled: true,
            script: "script",
            dependencies: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/hooks")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.hooks.create({
            name: "name",
            script: "script",
            triggerId: "credentials-exchange",
        });
        expect(response).toEqual({
            triggerId: "triggerId",
            id: "id",
            name: "name",
            enabled: true,
            script: "script",
            dependencies: {
                key: "value",
            },
        });
    });

    test("create (5ac04fde)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "my-hook",
            script: "module.exports = function(client, scope, audience, context, cb) cb(null, access_token); };",
            enabled: undefined,
            dependencies: undefined,
            triggerId: "credentials-exchange",
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/hooks")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.hooks.create({
                name: "my-hook",
                script: "module.exports = function(client, scope, audience, context, cb) cb(null, access_token); };",
                enabled: undefined,
                dependencies: undefined,
                triggerId: "credentials-exchange",
            });
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("create (7de53de6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "my-hook",
            script: "module.exports = function(client, scope, audience, context, cb) cb(null, access_token); };",
            enabled: undefined,
            dependencies: undefined,
            triggerId: "credentials-exchange",
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/hooks")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.hooks.create({
                name: "my-hook",
                script: "module.exports = function(client, scope, audience, context, cb) cb(null, access_token); };",
                enabled: undefined,
                dependencies: undefined,
                triggerId: "credentials-exchange",
            });
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("create (40a063aa)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "my-hook",
            script: "module.exports = function(client, scope, audience, context, cb) cb(null, access_token); };",
            enabled: undefined,
            dependencies: undefined,
            triggerId: "credentials-exchange",
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/hooks")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.hooks.create({
                name: "my-hook",
                script: "module.exports = function(client, scope, audience, context, cb) cb(null, access_token); };",
                enabled: undefined,
                dependencies: undefined,
                triggerId: "credentials-exchange",
            });
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("create (17150fc2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "my-hook",
            script: "module.exports = function(client, scope, audience, context, cb) cb(null, access_token); };",
            enabled: undefined,
            dependencies: undefined,
            triggerId: "credentials-exchange",
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/hooks")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(409)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.hooks.create({
                name: "my-hook",
                script: "module.exports = function(client, scope, audience, context, cb) cb(null, access_token); };",
                enabled: undefined,
                dependencies: undefined,
                triggerId: "credentials-exchange",
            });
        }).rejects.toThrow(
            new Management.ConflictError({
                key: "value",
            }),
        );
    });

    test("create (5ccab7c6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "my-hook",
            script: "module.exports = function(client, scope, audience, context, cb) cb(null, access_token); };",
            enabled: undefined,
            dependencies: undefined,
            triggerId: "credentials-exchange",
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/hooks")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.hooks.create({
                name: "my-hook",
                script: "module.exports = function(client, scope, audience, context, cb) cb(null, access_token); };",
                enabled: undefined,
                dependencies: undefined,
                triggerId: "credentials-exchange",
            });
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });

    test("get (ee316992)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            triggerId: "triggerId",
            id: "id",
            name: "name",
            enabled: true,
            script: "script",
            dependencies: { key: "value" },
        };
        server.mockEndpoint().get("/hooks/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.hooks.get("id");
        expect(response).toEqual({
            triggerId: "triggerId",
            id: "id",
            name: "name",
            enabled: true,
            script: "script",
            dependencies: {
                key: "value",
            },
        });
    });

    test("get (fcf9dbd1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/hooks/id").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.hooks.get("id");
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("get (49d52691)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/hooks/id").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.hooks.get("id");
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("get (2428808d)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/hooks/id").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.hooks.get("id");
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("get (e55ce3fd)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/hooks/id").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.hooks.get("id");
        }).rejects.toThrow(
            new Management.NotFoundError({
                key: "value",
            }),
        );
    });

    test("get (27b44cb5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/hooks/id").respondWith().statusCode(429).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.hooks.get("id");
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });

    test("delete (c7f0a6bf)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/hooks/id").respondWith().statusCode(200).build();

        const response = await client.hooks.delete("id");
        expect(response).toEqual(undefined);
    });

    test("delete (fcf9dbd1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/hooks/id").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.hooks.delete("id");
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("delete (49d52691)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/hooks/id").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.hooks.delete("id");
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("delete (2428808d)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/hooks/id").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.hooks.delete("id");
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("delete (27b44cb5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/hooks/id").respondWith().statusCode(429).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.hooks.delete("id");
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });

    test("update (cd2be091)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            triggerId: "triggerId",
            id: "id",
            name: "name",
            enabled: true,
            script: "script",
            dependencies: { key: "value" },
        };
        server
            .mockEndpoint()
            .patch("/hooks/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.hooks.update("id");
        expect(response).toEqual({
            triggerId: "triggerId",
            id: "id",
            name: "name",
            enabled: true,
            script: "script",
            dependencies: {
                key: "value",
            },
        });
    });

    test("update (fdebfe7f)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: undefined, script: undefined, enabled: undefined, dependencies: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/hooks/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.hooks.update("id", {
                name: undefined,
                script: undefined,
                enabled: undefined,
                dependencies: undefined,
            });
        }).rejects.toThrow(
            new Management.BadRequestError({
                key: "value",
            }),
        );
    });

    test("update (359a0e0f)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: undefined, script: undefined, enabled: undefined, dependencies: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/hooks/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.hooks.update("id", {
                name: undefined,
                script: undefined,
                enabled: undefined,
                dependencies: undefined,
            });
        }).rejects.toThrow(
            new Management.UnauthorizedError({
                key: "value",
            }),
        );
    });

    test("update (c653e65b)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: undefined, script: undefined, enabled: undefined, dependencies: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/hooks/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.hooks.update("id", {
                name: undefined,
                script: undefined,
                enabled: undefined,
                dependencies: undefined,
            });
        }).rejects.toThrow(
            new Management.ForbiddenError({
                key: "value",
            }),
        );
    });

    test("update (51ae21fb)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: undefined, script: undefined, enabled: undefined, dependencies: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/hooks/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.hooks.update("id", {
                name: undefined,
                script: undefined,
                enabled: undefined,
                dependencies: undefined,
            });
        }).rejects.toThrow(
            new Management.NotFoundError({
                key: "value",
            }),
        );
    });

    test("update (56a732d3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: undefined, script: undefined, enabled: undefined, dependencies: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/hooks/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(409)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.hooks.update("id", {
                name: undefined,
                script: undefined,
                enabled: undefined,
                dependencies: undefined,
            });
        }).rejects.toThrow(
            new Management.ConflictError({
                key: "value",
            }),
        );
    });

    test("update (b6d13213)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: undefined, script: undefined, enabled: undefined, dependencies: undefined };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/hooks/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.hooks.update("id", {
                name: undefined,
                script: undefined,
                enabled: undefined,
                dependencies: undefined,
            });
        }).rejects.toThrow(
            new Management.TooManyRequestsError({
                key: "value",
            }),
        );
    });
});
