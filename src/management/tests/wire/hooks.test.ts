/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { ManagementClient } from "../../Client.js";

describe("Hooks", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name", script: "script", triggerId: "credentials-exchange" };
        const rawResponseBody = {
            triggerId: "triggerId",
            id: "id",
            name: "name",
            enabled: true,
            script: "script",
            dependencies: { key: "value" },
        };
        server
            .mockEndpoint()
            .post("/hooks")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.hooks.create({
            name: "name",
            script: "script",
            triggerId: "credentials-exchange",
        });
        expect(response).toEqual({
            triggerId: "triggerId",
            id: "id",
            name: "name",
            enabled: true,
            script: "script",
            dependencies: {
                key: "value",
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            triggerId: "triggerId",
            id: "id",
            name: "name",
            enabled: true,
            script: "script",
            dependencies: { key: "value" },
        };
        server.mockEndpoint().get("/hooks/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.hooks.get("id");
        expect(response).toEqual({
            triggerId: "triggerId",
            id: "id",
            name: "name",
            enabled: true,
            script: "script",
            dependencies: {
                key: "value",
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/hooks/id").respondWith().statusCode(200).build();

        const response = await client.hooks.delete("id");
        expect(response).toEqual(undefined);
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            triggerId: "triggerId",
            id: "id",
            name: "name",
            enabled: true,
            script: "script",
            dependencies: { key: "value" },
        };
        server
            .mockEndpoint()
            .patch("/hooks/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.hooks.update("id");
        expect(response).toEqual({
            triggerId: "triggerId",
            id: "id",
            name: "name",
            enabled: true,
            script: "script",
            dependencies: {
                key: "value",
            },
        });
    });
});
