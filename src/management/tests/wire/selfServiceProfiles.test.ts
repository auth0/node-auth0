/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { ManagementClient } from "../../Client.js";

describe("SelfServiceProfiles", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { name: "name" };
        const rawResponseBody = {
            id: "id",
            name: "name",
            description: "description",
            user_attributes: [{ name: "name", description: "description", is_optional: true }],
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            branding: { logo_url: "logo_url", colors: { primary: "primary" } },
            allowed_strategies: ["oidc"],
        };
        server
            .mockEndpoint()
            .post("/self-service-profiles")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.selfServiceProfiles.create({
            name: "name",
        });
        expect(response).toEqual({
            id: "id",
            name: "name",
            description: "description",
            user_attributes: [
                {
                    name: "name",
                    description: "description",
                    is_optional: true,
                },
            ],
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            branding: {
                logo_url: "logo_url",
                colors: {
                    primary: "primary",
                },
            },
            allowed_strategies: ["oidc"],
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            name: "name",
            description: "description",
            user_attributes: [{ name: "name", description: "description", is_optional: true }],
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            branding: { logo_url: "logo_url", colors: { primary: "primary" } },
            allowed_strategies: ["oidc"],
        };
        server
            .mockEndpoint()
            .get("/self-service-profiles/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.selfServiceProfiles.get("id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            description: "description",
            user_attributes: [
                {
                    name: "name",
                    description: "description",
                    is_optional: true,
                },
            ],
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            branding: {
                logo_url: "logo_url",
                colors: {
                    primary: "primary",
                },
            },
            allowed_strategies: ["oidc"],
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/self-service-profiles/id").respondWith().statusCode(200).build();

        const response = await client.selfServiceProfiles.delete("id");
        expect(response).toEqual(undefined);
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            name: "name",
            description: "description",
            user_attributes: [{ name: "name", description: "description", is_optional: true }],
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            branding: { logo_url: "logo_url", colors: { primary: "primary" } },
            allowed_strategies: ["oidc"],
        };
        server
            .mockEndpoint()
            .patch("/self-service-profiles/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.selfServiceProfiles.update("id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            description: "description",
            user_attributes: [
                {
                    name: "name",
                    description: "description",
                    is_optional: true,
                },
            ],
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            branding: {
                logo_url: "logo_url",
                colors: {
                    primary: "primary",
                },
            },
            allowed_strategies: ["oidc"],
        });
    });

    test("listCustomText", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/self-service-profiles/id/custom-text/en/get-started")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.selfServiceProfiles.listCustomText("id", "en", "get-started");
        expect(response).toEqual({
            key: "value",
        });
    });

    test("setCustomText", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { key: "value" };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .put("/self-service-profiles/id/custom-text/en/get-started")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.selfServiceProfiles.setCustomText("id", "en", "get-started", {
            key: "value",
        });
        expect(response).toEqual({
            key: "value",
        });
    });

    test("createSsoTicket", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { ticket: "ticket" };
        server
            .mockEndpoint()
            .post("/self-service-profiles/id/sso-ticket")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.selfServiceProfiles.createSsoTicket("id");
        expect(response).toEqual({
            ticket: "ticket",
        });
    });

    test("revokeSsoTicket", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server
            .mockEndpoint()
            .post("/self-service-profiles/profileId/sso-ticket/id/revoke")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.selfServiceProfiles.revokeSsoTicket("profileId", "id");
        expect(response).toEqual(undefined);
    });
});
