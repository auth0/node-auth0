/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../../mock-server/MockServerPool.js";
import { ManagementClient } from "../../../../Client.js";

describe("Templates", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "name",
            type: "type",
            dialect: "dialect",
            presentation: { "org.iso.18013.5.1.mDL": { "org.iso.18013.5.1": {} } },
            well_known_trusted_issuers: "well_known_trusted_issuers",
        };
        const rawResponseBody = {
            id: "id",
            name: "name",
            type: "type",
            dialect: "dialect",
            presentation: { "org.iso.18013.5.1.mDL": { "org.iso.18013.5.1": {} } },
            custom_certificate_authority: "custom_certificate_authority",
            well_known_trusted_issuers: "well_known_trusted_issuers",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .post("/verifiable-credentials/verification/templates")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.verifiableCredentials.verification.templates.create({
            name: "name",
            type: "type",
            dialect: "dialect",
            presentation: {
                "org.iso.18013.5.1.mDL": {
                    "org.iso.18013.5.1": {},
                },
            },
            well_known_trusted_issuers: "well_known_trusted_issuers",
        });
        expect(response).toEqual({
            id: "id",
            name: "name",
            type: "type",
            dialect: "dialect",
            presentation: {
                "org.iso.18013.5.1.mDL": {
                    "org.iso.18013.5.1": {},
                },
            },
            custom_certificate_authority: "custom_certificate_authority",
            well_known_trusted_issuers: "well_known_trusted_issuers",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            name: "name",
            type: "type",
            dialect: "dialect",
            presentation: { "org.iso.18013.5.1.mDL": { "org.iso.18013.5.1": {} } },
            custom_certificate_authority: "custom_certificate_authority",
            well_known_trusted_issuers: "well_known_trusted_issuers",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .get("/verifiable-credentials/verification/templates/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.verifiableCredentials.verification.templates.get("id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            type: "type",
            dialect: "dialect",
            presentation: {
                "org.iso.18013.5.1.mDL": {
                    "org.iso.18013.5.1": {},
                },
            },
            custom_certificate_authority: "custom_certificate_authority",
            well_known_trusted_issuers: "well_known_trusted_issuers",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server
            .mockEndpoint()
            .delete("/verifiable-credentials/verification/templates/id")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.verifiableCredentials.verification.templates.delete("id");
        expect(response).toEqual(undefined);
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            name: "name",
            type: "type",
            dialect: "dialect",
            presentation: { "org.iso.18013.5.1.mDL": { "org.iso.18013.5.1": {} } },
            custom_certificate_authority: "custom_certificate_authority",
            well_known_trusted_issuers: "well_known_trusted_issuers",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .patch("/verifiable-credentials/verification/templates/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.verifiableCredentials.verification.templates.update("id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            type: "type",
            dialect: "dialect",
            presentation: {
                "org.iso.18013.5.1.mDL": {
                    "org.iso.18013.5.1": {},
                },
            },
            custom_certificate_authority: "custom_certificate_authority",
            well_known_trusted_issuers: "well_known_trusted_issuers",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
        });
    });
});
