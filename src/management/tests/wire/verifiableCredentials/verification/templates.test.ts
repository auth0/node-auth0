// This file was auto-generated by Fern from our API Definition.

import * as Management from "../../../../api/index";
import { ManagementClient } from "../../../../Client";
import { mockServerPool } from "../../../mock-server/MockServerPool";

describe("Templates", () => {
    test("list (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            next: "next",
            templates: [
                {
                    id: "id",
                    name: "name",
                    type: "type",
                    dialect: "dialect",
                    presentation: { "org.iso.18013.5.1.mDL": { "org.iso.18013.5.1": {} } },
                    custom_certificate_authority: "custom_certificate_authority",
                    well_known_trusted_issuers: "well_known_trusted_issuers",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/verifiable-credentials/verification/templates")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const expected = {
            next: "next",
            templates: [
                {
                    id: "id",
                    name: "name",
                    type: "type",
                    dialect: "dialect",
                    presentation: {
                        "org.iso.18013.5.1.mDL": {
                            "org.iso.18013.5.1": {},
                        },
                    },
                    custom_certificate_authority: "custom_certificate_authority",
                    well_known_trusted_issuers: "well_known_trusted_issuers",
                    created_at: "2024-01-15T09:30:00Z",
                    updated_at: "2024-01-15T09:30:00Z",
                },
            ],
        };
        const page = await client.verifiableCredentials.verification.templates.list({
            from: "from",
            take: 1,
        });

        expect(expected.templates).toEqual(page.data);
        expect(page.hasNextPage()).toBe(true);
        const nextPage = await page.getNextPage();
        expect(expected.templates).toEqual(nextPage.data);
    });

    test("list (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/verifiable-credentials/verification/templates")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.verifiableCredentials.verification.templates.list();
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("list (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/verifiable-credentials/verification/templates")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.verifiableCredentials.verification.templates.list();
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("list (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/verifiable-credentials/verification/templates")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.verifiableCredentials.verification.templates.list();
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("list (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/verifiable-credentials/verification/templates")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.verifiableCredentials.verification.templates.list();
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("create (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "name",
            type: "type",
            dialect: "dialect",
            presentation: { "org.iso.18013.5.1.mDL": { "org.iso.18013.5.1": {} } },
            well_known_trusted_issuers: "well_known_trusted_issuers",
        };
        const rawResponseBody = {
            id: "id",
            name: "name",
            type: "type",
            dialect: "dialect",
            presentation: { "org.iso.18013.5.1.mDL": { "org.iso.18013.5.1": {} } },
            custom_certificate_authority: "custom_certificate_authority",
            well_known_trusted_issuers: "well_known_trusted_issuers",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .post("/verifiable-credentials/verification/templates")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.verifiableCredentials.verification.templates.create({
            name: "name",
            type: "type",
            dialect: "dialect",
            presentation: {
                "org.iso.18013.5.1.mDL": {
                    "org.iso.18013.5.1": {},
                },
            },
            well_known_trusted_issuers: "well_known_trusted_issuers",
        });
        expect(response).toEqual({
            id: "id",
            name: "name",
            type: "type",
            dialect: "dialect",
            presentation: {
                "org.iso.18013.5.1.mDL": {
                    "org.iso.18013.5.1": {},
                },
            },
            custom_certificate_authority: "custom_certificate_authority",
            well_known_trusted_issuers: "well_known_trusted_issuers",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
        });
    });

    test("create (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "x",
            type: "x",
            dialect: "dialect",
            presentation: { "org.iso.18013.5.1.mDL": { "org.iso.18013.5.1": {} } },
            well_known_trusted_issuers: "x",
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/verifiable-credentials/verification/templates")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.verifiableCredentials.verification.templates.create({
                name: "x",
                type: "x",
                dialect: "dialect",
                presentation: {
                    "org.iso.18013.5.1.mDL": {
                        "org.iso.18013.5.1": {},
                    },
                },
                well_known_trusted_issuers: "x",
            });
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("create (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "x",
            type: "x",
            dialect: "dialect",
            presentation: { "org.iso.18013.5.1.mDL": { "org.iso.18013.5.1": {} } },
            well_known_trusted_issuers: "x",
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/verifiable-credentials/verification/templates")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.verifiableCredentials.verification.templates.create({
                name: "x",
                type: "x",
                dialect: "dialect",
                presentation: {
                    "org.iso.18013.5.1.mDL": {
                        "org.iso.18013.5.1": {},
                    },
                },
                well_known_trusted_issuers: "x",
            });
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("create (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "x",
            type: "x",
            dialect: "dialect",
            presentation: { "org.iso.18013.5.1.mDL": { "org.iso.18013.5.1": {} } },
            well_known_trusted_issuers: "x",
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/verifiable-credentials/verification/templates")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.verifiableCredentials.verification.templates.create({
                name: "x",
                type: "x",
                dialect: "dialect",
                presentation: {
                    "org.iso.18013.5.1.mDL": {
                        "org.iso.18013.5.1": {},
                    },
                },
                well_known_trusted_issuers: "x",
            });
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("create (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "x",
            type: "x",
            dialect: "dialect",
            presentation: { "org.iso.18013.5.1.mDL": { "org.iso.18013.5.1": {} } },
            well_known_trusted_issuers: "x",
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/verifiable-credentials/verification/templates")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(409)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.verifiableCredentials.verification.templates.create({
                name: "x",
                type: "x",
                dialect: "dialect",
                presentation: {
                    "org.iso.18013.5.1.mDL": {
                        "org.iso.18013.5.1": {},
                    },
                },
                well_known_trusted_issuers: "x",
            });
        }).rejects.toThrow(Management.ConflictError);
    });

    test("create (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {
            name: "x",
            type: "x",
            dialect: "dialect",
            presentation: { "org.iso.18013.5.1.mDL": { "org.iso.18013.5.1": {} } },
            well_known_trusted_issuers: "x",
        };
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/verifiable-credentials/verification/templates")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.verifiableCredentials.verification.templates.create({
                name: "x",
                type: "x",
                dialect: "dialect",
                presentation: {
                    "org.iso.18013.5.1.mDL": {
                        "org.iso.18013.5.1": {},
                    },
                },
                well_known_trusted_issuers: "x",
            });
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            name: "name",
            type: "type",
            dialect: "dialect",
            presentation: { "org.iso.18013.5.1.mDL": { "org.iso.18013.5.1": {} } },
            custom_certificate_authority: "custom_certificate_authority",
            well_known_trusted_issuers: "well_known_trusted_issuers",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .get("/verifiable-credentials/verification/templates/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.verifiableCredentials.verification.templates.get("id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            type: "type",
            dialect: "dialect",
            presentation: {
                "org.iso.18013.5.1.mDL": {
                    "org.iso.18013.5.1": {},
                },
            },
            custom_certificate_authority: "custom_certificate_authority",
            well_known_trusted_issuers: "well_known_trusted_issuers",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/verifiable-credentials/verification/templates/id")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.verifiableCredentials.verification.templates.get("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/verifiable-credentials/verification/templates/id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.verifiableCredentials.verification.templates.get("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/verifiable-credentials/verification/templates/id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.verifiableCredentials.verification.templates.get("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("get (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/verifiable-credentials/verification/templates/id")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.verifiableCredentials.verification.templates.get("id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("get (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .get("/verifiable-credentials/verification/templates/id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.verifiableCredentials.verification.templates.get("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server
            .mockEndpoint()
            .delete("/verifiable-credentials/verification/templates/id")
            .respondWith()
            .statusCode(200)
            .build();

        const response = await client.verifiableCredentials.verification.templates.delete("id");
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/verifiable-credentials/verification/templates/id")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.verifiableCredentials.verification.templates.delete("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/verifiable-credentials/verification/templates/id")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.verifiableCredentials.verification.templates.delete("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("delete (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/verifiable-credentials/verification/templates/id")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.verifiableCredentials.verification.templates.delete("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("delete (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .delete("/verifiable-credentials/verification/templates/id")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.verifiableCredentials.verification.templates.delete("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("update (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            name: "name",
            type: "type",
            dialect: "dialect",
            presentation: { "org.iso.18013.5.1.mDL": { "org.iso.18013.5.1": {} } },
            custom_certificate_authority: "custom_certificate_authority",
            well_known_trusted_issuers: "well_known_trusted_issuers",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
        };
        server
            .mockEndpoint()
            .patch("/verifiable-credentials/verification/templates/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.verifiableCredentials.verification.templates.update("id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            type: "type",
            dialect: "dialect",
            presentation: {
                "org.iso.18013.5.1.mDL": {
                    "org.iso.18013.5.1": {},
                },
            },
            custom_certificate_authority: "custom_certificate_authority",
            well_known_trusted_issuers: "well_known_trusted_issuers",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
        });
    });

    test("update (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/verifiable-credentials/verification/templates/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.verifiableCredentials.verification.templates.update("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("update (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/verifiable-credentials/verification/templates/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.verifiableCredentials.verification.templates.update("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("update (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/verifiable-credentials/verification/templates/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.verifiableCredentials.verification.templates.update("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("update (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/verifiable-credentials/verification/templates/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(409)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.verifiableCredentials.verification.templates.update("id");
        }).rejects.toThrow(Management.ConflictError);
    });

    test("update (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/verifiable-credentials/verification/templates/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.verifiableCredentials.verification.templates.update("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });
});
