/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { ManagementClient } from "../../Client.js";

describe("Sessions", () => {
    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            user_id: "user_id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            authenticated_at: "2024-01-15T09:30:00Z",
            idle_expires_at: "2024-01-15T09:30:00Z",
            expires_at: "2024-01-15T09:30:00Z",
            last_interacted_at: "2024-01-15T09:30:00Z",
            device: {
                initial_user_agent: "initial_user_agent",
                initial_ip: "initial_ip",
                initial_asn: "initial_asn",
                last_user_agent: "last_user_agent",
                last_ip: "last_ip",
                last_asn: "last_asn",
            },
            clients: [{ client_id: "client_id" }],
            authentication: { methods: [{}] },
            cookie: { mode: "non-persistent" },
        };
        server.mockEndpoint().get("/sessions/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.sessions.get("id");
        expect(response).toEqual({
            id: "id",
            user_id: "user_id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            authenticated_at: "2024-01-15T09:30:00Z",
            idle_expires_at: "2024-01-15T09:30:00Z",
            expires_at: "2024-01-15T09:30:00Z",
            last_interacted_at: "2024-01-15T09:30:00Z",
            device: {
                initial_user_agent: "initial_user_agent",
                initial_ip: "initial_ip",
                initial_asn: "initial_asn",
                last_user_agent: "last_user_agent",
                last_ip: "last_ip",
                last_asn: "last_asn",
            },
            clients: [
                {
                    client_id: "client_id",
                },
            ],
            authentication: {
                methods: [{}],
            },
            cookie: {
                mode: "non-persistent",
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/sessions/id").respondWith().statusCode(200).build();

        const response = await client.sessions.delete("id");
        expect(response).toEqual(undefined);
    });

    test("revoke", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().post("/sessions/id/revoke").respondWith().statusCode(200).build();

        const response = await client.sessions.revoke("id");
        expect(response).toEqual(undefined);
    });
});
