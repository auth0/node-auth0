// This file was auto-generated by Fern from our API Definition.

import { mockServerPool } from "../mock-server/MockServerPool";
import { ManagementClient } from "../../Client";
import * as Management from "../../api/index";

describe("Sessions", () => {
    test("get (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            user_id: "user_id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            authenticated_at: "2024-01-15T09:30:00Z",
            idle_expires_at: "2024-01-15T09:30:00Z",
            expires_at: "2024-01-15T09:30:00Z",
            last_interacted_at: "2024-01-15T09:30:00Z",
            device: {
                initial_user_agent: "initial_user_agent",
                initial_ip: "initial_ip",
                initial_asn: "initial_asn",
                last_user_agent: "last_user_agent",
                last_ip: "last_ip",
                last_asn: "last_asn",
            },
            clients: [{ client_id: "client_id" }],
            authentication: { methods: [{}] },
            cookie: { mode: "non-persistent" },
            session_metadata: { key: "value" },
        };
        server.mockEndpoint().get("/sessions/id").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.sessions.get("id");
        expect(response).toEqual({
            id: "id",
            user_id: "user_id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            authenticated_at: "2024-01-15T09:30:00Z",
            idle_expires_at: "2024-01-15T09:30:00Z",
            expires_at: "2024-01-15T09:30:00Z",
            last_interacted_at: "2024-01-15T09:30:00Z",
            device: {
                initial_user_agent: "initial_user_agent",
                initial_ip: "initial_ip",
                initial_asn: "initial_asn",
                last_user_agent: "last_user_agent",
                last_ip: "last_ip",
                last_asn: "last_asn",
            },
            clients: [
                {
                    client_id: "client_id",
                },
            ],
            authentication: {
                methods: [{}],
            },
            cookie: {
                mode: "non-persistent",
            },
            session_metadata: {
                key: "value",
            },
        });
    });

    test("get (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/sessions/id").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.sessions.get("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("get (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/sessions/id").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.sessions.get("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("get (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/sessions/id").respondWith().statusCode(404).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.sessions.get("id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("get (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().get("/sessions/id").respondWith().statusCode(429).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.sessions.get("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("delete (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/sessions/id").respondWith().statusCode(200).build();

        const response = await client.sessions.delete("id");
        expect(response).toEqual(undefined);
    });

    test("delete (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/sessions/id").respondWith().statusCode(400).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.sessions.delete("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("delete (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/sessions/id").respondWith().statusCode(401).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.sessions.delete("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("delete (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/sessions/id").respondWith().statusCode(403).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.sessions.delete("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("delete (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server.mockEndpoint().delete("/sessions/id").respondWith().statusCode(429).jsonBody(rawResponseBody).build();

        await expect(async () => {
            return await client.sessions.delete("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("update (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            user_id: "user_id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            authenticated_at: "2024-01-15T09:30:00Z",
            idle_expires_at: "2024-01-15T09:30:00Z",
            expires_at: "2024-01-15T09:30:00Z",
            last_interacted_at: "2024-01-15T09:30:00Z",
            device: {
                initial_user_agent: "initial_user_agent",
                initial_ip: "initial_ip",
                initial_asn: "initial_asn",
                last_user_agent: "last_user_agent",
                last_ip: "last_ip",
                last_asn: "last_asn",
            },
            clients: [{ client_id: "client_id" }],
            authentication: { methods: [{}] },
            cookie: { mode: "non-persistent" },
            session_metadata: { key: "value" },
        };
        server
            .mockEndpoint()
            .patch("/sessions/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.sessions.update("id");
        expect(response).toEqual({
            id: "id",
            user_id: "user_id",
            created_at: "2024-01-15T09:30:00Z",
            updated_at: "2024-01-15T09:30:00Z",
            authenticated_at: "2024-01-15T09:30:00Z",
            idle_expires_at: "2024-01-15T09:30:00Z",
            expires_at: "2024-01-15T09:30:00Z",
            last_interacted_at: "2024-01-15T09:30:00Z",
            device: {
                initial_user_agent: "initial_user_agent",
                initial_ip: "initial_ip",
                initial_asn: "initial_asn",
                last_user_agent: "last_user_agent",
                last_ip: "last_ip",
                last_asn: "last_asn",
            },
            clients: [
                {
                    client_id: "client_id",
                },
            ],
            authentication: {
                methods: [{}],
            },
            cookie: {
                mode: "non-persistent",
            },
            session_metadata: {
                key: "value",
            },
        });
    });

    test("update (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/sessions/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.sessions.update("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("update (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/sessions/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.sessions.update("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("update (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/sessions/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.sessions.update("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("update (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/sessions/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.sessions.update("id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("update (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .patch("/sessions/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.sessions.update("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });

    test("revoke (1)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().post("/sessions/id/revoke").respondWith().statusCode(200).build();

        const response = await client.sessions.revoke("id");
        expect(response).toEqual(undefined);
    });

    test("revoke (2)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/sessions/id/revoke")
            .respondWith()
            .statusCode(400)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.sessions.revoke("id");
        }).rejects.toThrow(Management.BadRequestError);
    });

    test("revoke (3)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/sessions/id/revoke")
            .respondWith()
            .statusCode(401)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.sessions.revoke("id");
        }).rejects.toThrow(Management.UnauthorizedError);
    });

    test("revoke (4)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/sessions/id/revoke")
            .respondWith()
            .statusCode(403)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.sessions.revoke("id");
        }).rejects.toThrow(Management.ForbiddenError);
    });

    test("revoke (5)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/sessions/id/revoke")
            .respondWith()
            .statusCode(404)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.sessions.revoke("id");
        }).rejects.toThrow(Management.NotFoundError);
    });

    test("revoke (6)", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = { key: "value" };
        server
            .mockEndpoint()
            .post("/sessions/id/revoke")
            .respondWith()
            .statusCode(429)
            .jsonBody(rawResponseBody)
            .build();

        await expect(async () => {
            return await client.sessions.revoke("id");
        }).rejects.toThrow(Management.TooManyRequestsError);
    });
});
