/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool.js";
import { ManagementClient } from "../../Client.js";

describe("ResourceServers", () => {
    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = { identifier: "identifier" };
        const rawResponseBody = {
            id: "id",
            name: "name",
            is_system: true,
            identifier: "identifier",
            scopes: [{ value: "value", description: "description" }],
            signing_alg: "HS256",
            signing_secret: "signing_secret",
            allow_offline_access: true,
            skip_consent_for_verifiable_first_party_clients: true,
            token_lifetime: 1,
            token_lifetime_for_web: 1,
            enforce_policies: true,
            token_dialect: "access_token",
            token_encryption: {
                format: "compact-nested-jwe",
                encryption_key: { name: "name", alg: "RSA-OAEP-256", kid: "kid", pem: "pem" },
            },
            consent_policy: "consent_policy",
            authorization_details: [{ key: "value" }],
            proof_of_possession: { mechanism: "mtls", required: true },
        };
        server
            .mockEndpoint()
            .post("/resource-servers")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.resourceServers.create({
            identifier: "identifier",
        });
        expect(response).toEqual({
            id: "id",
            name: "name",
            is_system: true,
            identifier: "identifier",
            scopes: [
                {
                    value: "value",
                    description: "description",
                },
            ],
            signing_alg: "HS256",
            signing_secret: "signing_secret",
            allow_offline_access: true,
            skip_consent_for_verifiable_first_party_clients: true,
            token_lifetime: 1,
            token_lifetime_for_web: 1,
            enforce_policies: true,
            token_dialect: "access_token",
            token_encryption: {
                format: "compact-nested-jwe",
                encryption_key: {
                    name: "name",
                    alg: "RSA-OAEP-256",
                    kid: "kid",
                    pem: "pem",
                },
            },
            consent_policy: "consent_policy",
            authorization_details: [
                {
                    key: "value",
                },
            ],
            proof_of_possession: {
                mechanism: "mtls",
                required: true,
            },
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        const rawResponseBody = {
            id: "id",
            name: "name",
            is_system: true,
            identifier: "identifier",
            scopes: [{ value: "value", description: "description" }],
            signing_alg: "HS256",
            signing_secret: "signing_secret",
            allow_offline_access: true,
            skip_consent_for_verifiable_first_party_clients: true,
            token_lifetime: 1,
            token_lifetime_for_web: 1,
            enforce_policies: true,
            token_dialect: "access_token",
            token_encryption: {
                format: "compact-nested-jwe",
                encryption_key: { name: "name", alg: "RSA-OAEP-256", kid: "kid", pem: "pem" },
            },
            consent_policy: "consent_policy",
            authorization_details: [{ key: "value" }],
            proof_of_possession: { mechanism: "mtls", required: true },
        };
        server
            .mockEndpoint()
            .get("/resource-servers/id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.resourceServers.get("id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            is_system: true,
            identifier: "identifier",
            scopes: [
                {
                    value: "value",
                    description: "description",
                },
            ],
            signing_alg: "HS256",
            signing_secret: "signing_secret",
            allow_offline_access: true,
            skip_consent_for_verifiable_first_party_clients: true,
            token_lifetime: 1,
            token_lifetime_for_web: 1,
            enforce_policies: true,
            token_dialect: "access_token",
            token_encryption: {
                format: "compact-nested-jwe",
                encryption_key: {
                    name: "name",
                    alg: "RSA-OAEP-256",
                    kid: "kid",
                    pem: "pem",
                },
            },
            consent_policy: "consent_policy",
            authorization_details: [
                {
                    key: "value",
                },
            ],
            proof_of_possession: {
                mechanism: "mtls",
                required: true,
            },
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });

        server.mockEndpoint().delete("/resource-servers/id").respondWith().statusCode(200).build();

        const response = await client.resourceServers.delete("id");
        expect(response).toEqual(undefined);
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ManagementClient({ token: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            id: "id",
            name: "name",
            is_system: true,
            identifier: "identifier",
            scopes: [{ value: "value", description: "description" }],
            signing_alg: "HS256",
            signing_secret: "signing_secret",
            allow_offline_access: true,
            skip_consent_for_verifiable_first_party_clients: true,
            token_lifetime: 1,
            token_lifetime_for_web: 1,
            enforce_policies: true,
            token_dialect: "access_token",
            token_encryption: {
                format: "compact-nested-jwe",
                encryption_key: { name: "name", alg: "RSA-OAEP-256", kid: "kid", pem: "pem" },
            },
            consent_policy: "consent_policy",
            authorization_details: [{ key: "value" }],
            proof_of_possession: { mechanism: "mtls", required: true },
        };
        server
            .mockEndpoint()
            .patch("/resource-servers/id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.resourceServers.update("id");
        expect(response).toEqual({
            id: "id",
            name: "name",
            is_system: true,
            identifier: "identifier",
            scopes: [
                {
                    value: "value",
                    description: "description",
                },
            ],
            signing_alg: "HS256",
            signing_secret: "signing_secret",
            allow_offline_access: true,
            skip_consent_for_verifiable_first_party_clients: true,
            token_lifetime: 1,
            token_lifetime_for_web: 1,
            enforce_policies: true,
            token_dialect: "access_token",
            token_encryption: {
                format: "compact-nested-jwe",
                encryption_key: {
                    name: "name",
                    alg: "RSA-OAEP-256",
                    kid: "kid",
                    pem: "pem",
                },
            },
            consent_policy: "consent_policy",
            authorization_details: [
                {
                    key: "value",
                },
            ],
            proof_of_possession: {
                mechanism: "mtls",
                required: true,
            },
        });
    });
});
